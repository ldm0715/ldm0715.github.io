<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Anaconda的基础使用总结</title>
      <link href="/2023/03/25/anaconda-de-ji-chu-shi-yong/"/>
      <url>/2023/03/25/anaconda-de-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个小小的硬盘崩溃，给我带来了相当大的麻烦，重置了系统之后，注册表与c盘除了用户文件夹的东西都没了，导致一些应用根本打不开，也无法被控制面板检测到。这次实验需要写代码，打开VsCode才发现Anaconda也出问题了，没办法，只好重装了:sob:。重装之后，一些设置又差点记不起来了，于是就想着写一篇博客记录一下。</p><p>Conda环境其实就是虚拟环境。如果把Python的包比喻成螺丝刀，扳手等工具，那么虚拟环境就像是把螺丝刀，扳手等工具装起来的容器（如下图）。用虚拟环境的好处是方便处理各种需求不同的开发环境而不会造成臃肿，不需要的时候可以通过直接删除对应的虚拟环境来删除对应的包。对于Python，可以使用<code>virtualenv</code>、<code>virtualenvwrapper</code>和<code>pipenv</code>等包来管理虚拟环境。Conda环境比起安装其他虚拟环境更加方便。</p><img src="https://z4a.net/images/2023/03/25/conda_and_pakages.png" style="zoom:67%;" /><h2 id="Conda基础指令"><a href="#Conda基础指令" class="headerlink" title="Conda基础指令"></a>Conda基础指令</h2><ol><li><p>创建Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -name 环境名 python=版本号</span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n test python=3.7</span><br></pre></td></tr></table></figure><p><code>-n</code>其实是<code>-name</code>的缩写，这边还需要提醒的是，对于网上大部分的项目，你都需要提前注意Python的版本是否合适。截至2023年3月25日为止，Python最高的版本号为<code>Python 3.11.2</code>，<strong>通常来说，我们不会使用最新版本，一方面是最新版本总会出现一些问题，而出了问题你无法在社区中找到解决方法，另一方面就是很多项目都不是基于最新版的Python。如果没有特殊原因，个人推荐使用<code>Python3.7</code></strong></p><img src="https://z4a.net/images/2023/03/25/create_envs.png" style="zoom: 67%;" /></li><li><p>激活（切换）Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>激活了环境之后，你就可以进行查看、安装、删除包等操作。</p><p><img src="https://z4a.net/images/2023/03/25/activate_envs.png"></p></li><li><p>删除Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure><p>尾巴上的<code>--all</code>是环境中所有包的意思。</p><img src="https://z4a.net/images/2023/03/25/remove_envs.png" style="zoom:67%;" /></li><li><p>查看当前的所有的Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_envs_info.png"></p><p>注：Conda自带一个名为<code>base</code>的虚拟环境。</p></li><li><p>修改环境名</p><p>conda没有直接重命名环境的指令，但是它提供了克隆指令，你可以先使用克隆指令克隆将要修改名字的环境到新建的环境中，然后用删除指令删除原有的环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name B --clone A</span><br><span class="line">conda remove --name A --all</span><br></pre></td></tr></table></figure></li></ol><h2 id="包与下载源的切换"><a href="#包与下载源的切换" class="headerlink" title="包与下载源的切换"></a>包与下载源的切换</h2><h3 id="Python包的基础操作"><a href="#Python包的基础操作" class="headerlink" title="Python包的基础操作"></a>Python包的基础操作</h3><p>激活了Conda环境后，我们就可以在环境中对包进行查看、安装、删除等操作。在环境中，我们就可以使用Python自带的<code>pip指令</code>进行下载，pip指令默认的下载地址为:</p><blockquote><p><a href="https://pypi.python.org/simple">https://pypi.python.org/simple</a></p></blockquote><ol><li><p>查看包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></li><li><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名</span><br></pre></td></tr></table></figure><p>下面是一个下载<code>OpenCV</code>的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><ul><li>注：如果你想更换下载源，可以加上<code>-c 链接</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -c 下载源链接 包名</span><br></pre></td></tr></table></figure></li><li><p>删除包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 包名</span><br></pre></td></tr></table></figure></li><li><p>更新指定包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade 包名</span><br></pre></td></tr></table></figure><ul><li>注：这个指令也可以用来更新<code>pip</code>本身：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></li></ol><h3 id="切换下载源"><a href="#切换下载源" class="headerlink" title="切换下载源"></a>切换下载源</h3><p>上面提到了<code>pip指令</code>默认的下载地址，这是个外国网站，国内的访问速度可想而知，有时一个一兆的文件都要30秒，如果像是<code>PyTorch</code>、<code>OpenCV</code>这种包，根本下不动，有时甚至是断开连接。这时候就需要切换下载的地址，推荐使用<strong>清华源、中科大、阿里这三个镜像网站，清华源不是很稳定，优先推荐中科大。</strong></p><p>这里先展示一些下载源：</p><blockquote><p>中科大：</p><p>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/free/">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/">https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</a></p><p>清华源：</p><p>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</a></p></blockquote><ol><li><p>展示所有下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/all_chanels.png"></p></li><li><p>添加下载源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels 镜像源链接</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --append channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>去除镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>删除所有下载源（恢复默认下载源）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>此项操作后，除了<code>default</code>外，所有的后期添加的下载源都将被删除。</p></li><li><p>设置全局默认下载源</p><p>如果你想直接设置一个默认的下载源，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url 下载源</span><br></pre></td></tr></table></figure><img src="https://z4a.net/images/2023/03/25/set_init_config.png" style="zoom: 80%;" /><p>这样的作用是直接改变了<code>pip指令</code>的下载地址，将默认下载地址<code>default</code>换成设置后的下载源，此时进入提示路径（<code>C:\Users\用户名\AppData\Roaming\pip</code>）可以看到一个文件<code>pip.ini</code>,如果要回复默认的下载地址，那么将这个<code>pip.ini</code>文件删除即可。</p><img src="https://z4a.net/images/2023/03/25/install_url.png" style="zoom:67%;" /></li><li><p>从channel中安装包时显示channel的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_chanels.png"></p></li><li><p>演示（方便复制）</p><ul><li>添加中科大镜像源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><ul><li>添加清华源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ol><h2 id="conda-install与pip-install"><a href="#conda-install与pip-install" class="headerlink" title="conda install与pip install"></a>conda install与pip install</h2><p>其实自己在日常使用时有时也使用过<code>conda install 包名</code>,安装后貌似也可以正常使用，这时候我有点好奇<code>conda install</code>与<code>pip install</code>到底有什么区别，巧的是，这个问题官方文档也有解释。</p><blockquote><p>Anaconda | Understanding Conda and Pip: <a href="https://www.anaconda.com/blog/understanding-conda-and-pip">https://www.anaconda.com/blog/understanding-conda-and-pip</a>)</p></blockquote><p>总的来说就是你用哪个安装包都可以正常使用，<strong>但是切忌重复安装相同的包！！</strong></p><p>最明显的区别是，<code>pip</code>是Python专门用来安装其他包的一个下载功能包，**<code>pip</code>只能下载支持Python语言编写的包和源码**，而<code>conda install</code>中可能还有 C 或 C++ 库、R 包或任何其他软件，如<code>mkl cuda</code>这种C、C++写的包；以及在文章开头创建<code>conda环境</code>时，它还可以安装Python环境。</p><p>另外一点，<code>pip</code>进行安装、升级时，他并不会去检查安装列表，即使你装过，他还是会再下载一边，<code>到安装的时候它才会去检查该包是否安装过</code>。而<code>conda</code>是会去检查安装列表的，如果你安装过了，它并不会再给你安装一次。例子就是上面我创建<code>test</code>这个<code>conda环境</code>时，它并没有在帮我把依赖文件下一遍，它检测到我安装过后，直接进行了安装。</p><p>官方最后给出的总结表是：</p><table><thead><tr><th align="left"></th><th align="left">conda</th><th align="left">pip</th></tr></thead><tbody><tr><td align="left">manages</td><td align="left">binaries</td><td align="left">wheel or source</td></tr><tr><td align="left">can require compilers</td><td align="left">no</td><td align="left">yes</td></tr><tr><td align="left">create environment</td><td align="left">yes ,built-in</td><td align="left">Python-only</td></tr><tr><td align="left">dependency checks</td><td align="left">yes</td><td align="left">no</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo与Halo的使用后的感受</title>
      <link href="/2023/03/13/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/"/>
      <url>/2023/03/13/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这已经是我第三次安装Halo博客系统，每次都是出于不同的原因，这边可以先做个总结。</p><table><thead><tr><th>序号</th><th>使用系统</th><th>说明</th><th>搭载</th><th>费用</th></tr></thead><tbody><tr><td>1</td><td>Halo 1.6</td><td>第一个博客网站</td><td>vulter</td><td>￥42</td></tr><tr><td>2</td><td>Halo 2.2</td><td>因为付不起服务器费用，导火索：升级主题导致博客出错</td><td>秋叶云</td><td>￥30</td></tr><tr><td>3</td><td>Hexo  4.3</td><td>出于对Halo  2.2 的不满意以及秋叶云管理层的不靠谱</td><td>Github</td><td>0</td></tr><tr><td>4</td><td>Halo 1.6</td><td>搭载于Github，隐私性不够，数据不安全</td><td>星辰云</td><td>￥28.99</td></tr></tbody></table><p>我使用过Hexo之后，先是感受到了Hexo博客的强大之处，同时也体会道了Halo使用起来的便利性，这也是我为什么选择再次创建一个Halo博客的原因。</p><h2 id="Halo与Hexo的对比"><a href="#Halo与Hexo的对比" class="headerlink" title="Halo与Hexo的对比"></a>Halo与Hexo的对比</h2><p>Halo和Hexo都是非常优秀的博客系统，他们<strong>各有优缺点</strong>。下面我根据我多次搭建的经历来谈谈。</p><h3 id="Hexo-——-高度自由，复杂但强大"><a href="#Hexo-——-高度自由，复杂但强大" class="headerlink" title="Hexo —— 高度自由，复杂但强大"></a>Hexo —— 高度自由，复杂但强大</h3><hr><div align="center"><p><img src="https://z4a.net/images/2023/02/21/Hexo.md.jpg" alt="hexo"></p></div><blockquote><p>Hexo官方文档：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><p>Hexo可以说是很出名的博客系统，它最早发布于2012年，发售至今已达11年，可以说是老前辈了，它可能是最早静态博客系统。<strong>它所有的网页都是静态html文件，这也导致它可以直接在GitHub上进行静态托管，不需要自己租赁服务器（零成本）</strong>，这一点应该是它广泛受到使用的重要原因。</p><blockquote><p>我的Hexo博客：<a href="https://ldm0715.github.io/">https://ldm0715.github.io/</a></p></blockquote><p>由于Hexo的所有页面都是静态页面，因此文章需要在本地写作并生成，最后上传到服务器或者&#x3D;&#x3D;静态托管网站&#x3D;&#x3D;。<strong>当然其余的所有操作也只能在本地进行</strong>，这也导致它没有及时性，<strong>如果储存有博客系统的电脑不在身边，那么你将什么都做不了。</strong></p><p>随着版本的不断更新，Hexo的功能也越来越强大，自定义性与便捷性也越来越高。对于我这种非专业性的使用者来说，我如果想要为我的博客添加一些功能，这时候就可以直接安装相应的&#x3D;&#x3D;插件&#x3D;&#x3D;来实现。可以快捷的更换自己喜欢的&#x3D;&#x3D;主题&#x3D;&#x3D;。通过简单的指令快速创建文章或者网页，通过在YAML中给文章设置各种属性（包括标题、封面、tag、分类等，++这个只要支持MarkDown语法都能用++），<strong>上手难度很低</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YAML的写法：</span><br><span class="line">---</span><br><span class="line">title: Hello Hexo</span><br><span class="line">date: 2023-02-21 11:27:44</span><br><span class="line">tags:</span><br><span class="line">- hello world</span><br><span class="line">- hexo</span><br><span class="line">categories:</span><br><span class="line">- 与Hexo的初见</span><br><span class="line">description: 由于复杂原因搭建起Hexo博客，搭建起来确实有点费力，但是加载速度很快，也不怎么吃性能，各种插件也很自由，感觉不错</span><br><span class="line">cover: https://z4a.net/images/2023/02/21/Hexo.md.jpg</span><br><span class="line">swiper_index: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>由于使用者与开发者越来越多，这就造成Hexo社区的不断壮大。它拥有大量插件与主题，<strong>各种教程和错误记录都非常的详细</strong>，可以少踩很多坑。<strong>如果你不去魔改，后期的几乎不需要维护。</strong></p><blockquote><p>Hexo主题仓库：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><p>对于一些有网页基础的使用者来说，他们可以在Hexo博客系统的基础上修改，得到更加炫酷与个性的网页效果，<strong>个人不是很推荐未学习过网页（CSS，JavaScript）的使用者进行大量魔改，不了解其中的语法规则可能会直接导致博客系统的奔溃，如果你还是想要尝试，建议&#x3D;&#x3D;在修改前进行备份。&#x3D;&#x3D;</strong><br>以上都是++Hexo++的&#x3D;&#x3D;优点&#x3D;&#x3D;，简单总结如下：</p><ol><li>可以进行静态页面托管，实现零成本建站</li><li>可以通过插件增加功能</li><li>社区内容详细，有自己的插件仓库与主题仓库</li><li>支持MarkDown格式，可使用YAML设置文章属性</li><li>自定义性较高</li></ol><p>当然++Hexo++也有&#x3D;&#x3D;缺点&#x3D;&#x3D;，其实上文也有提到过一些，这里就简单列举一下：</p><ol><li>如果文章很多，生成速率让人担忧</li><li>静态搭载于Github时，由于仓库是公开的，数据的安全性没有保障</li><li>部分插件已过时，但它们任然储存在插件仓库中，如果安装可能会导致问题</li><li>一些设置过于繁杂，不利于后期的修改</li><li>无法在线编辑</li></ol><h3 id="Halo-——-实时编辑，封闭但易用"><a href="#Halo-——-实时编辑，封闭但易用" class="headerlink" title="Halo —— 实时编辑，封闭但易用"></a>Halo —— 实时编辑，封闭但易用</h3><hr><div align="center">    <img src="https://z4a.net/images/2023/02/21/halo.png" alt="halo.png" alt="后台展示" style="zoom:85%;" /></div><blockquote><p>Halo官方文档：<a href="https://docs.halo.run/">https://docs.halo.run/</a></p></blockquote><p>Halo是纯Java编写的博客系统，最早发布于2018年，虽然发布事件较晚，但是非常易用，是<strong>相当强大易用的开源建站工具</strong>。</p><p>与Hexo相比，Halo最大的缺点就是社区内容较少。因为发布时间较晚，大家可能都已经习惯使用Hexo，WordPress等建站工具，因此Halo受到的关注较少。社区内容较少，就导致它没有像Hexo一样拥有非常丰富的社区内容，最主观的就是主题较少，而且搜索引擎也搜索不到大量相关内容（当然这个有其他原因，下面会详细说说）。<strong>而且Halo 1.×版本不支持插件，因此可玩性较低</strong>。（++Halo 2.×版本已经开始支持插件系统++）</p><p><strong>虽然在个性化方面Halo没有任何优势，但是Halo最大的优点便在于它的&#x3D;&#x3D;易用性&#x3D;&#x3D;<strong>。 Hexo最让人感觉不便的就是它无法在线编辑，但</strong>Halo完美解决了这一点。</strong></p><p><strong>Halo系统是可以直接在线编辑的，可实时预览</strong>。系统有着一个博客后台，在这里，你可以非常轻松设置与管理博客，而不是Hexo那样需要去配置文件中修改代码！！！</p><div class="box" align="center">            <img src="https://z4a.net/images/2023/03/13/halo.png" alt="halo.png" alt="后台展示" style="zoom:30%;" />          <p>博客后台展示</p></div><div align="center">            <img src="https://z4a.net/images/2023/03/13/f7fe18c1b99caf7fd57e64744c0331b7.png" alt="在线编辑" alt="" style="zoom:50%;" />  <p>在线编辑</p></div><p>另一方面Halo没有Hexo那么方便魔改，**但是Halo本身就携带了博客网站的一些基本网页（如：日志、归档、分类、友链、相册），&#x3D;&#x3D;这对于大部分人来说已经够用了&#x3D;&#x3D;**。</p><div align="center"><img src="https://z4a.net/images/2023/03/13/ae474befa541c22b277ff1c74edf7325.png" alt="页面" border="0" style="zoom:50%;">  <p>页面</p></div><p>前面说到Halo没有丰富的社区内容，这不仅说明Halo的可玩性较低，<strong>这也说明Halo的使用几乎不会遇到技术问题</strong>，后台已经展示出了所有的选项，规避了魔改的同时保证了安全性。</p><h2 id="关于Halo-2-×版本"><a href="#关于Halo-2-×版本" class="headerlink" title="关于Halo 2.×版本"></a>关于Halo 2.×版本</h2><p>截直至我写这篇文章的时候，Halo官方已经发布了2.3版本。在体验过Halo 2.2后，我感受到Halo 2.×的革命性，也看到了它待改进之处，因此我还是退回了Halo 1.6。下面我列出一些Halo 2.2的使用感受：<br>😊 优点：</p><ol><li>官方已开发插件系统</li><li>拥有全新后台，界面更加美观</li><li>文本编辑器增加，可自行选择</li></ol><p>🙃 缺点：</p><ol><li>官方并未开放出了文章以外的其他界面接口</li><li>目前适配Halo 2.×的主题很少，已经适配的也有待完善</li><li>将评论区、大图查看、代码高亮等都拆入插件中，这样反而不方便</li><li>目前系统还有着许多的Bug</li></ol><p>我个人非常不建议现在将数据搬迁至Halo 2.3，体验真的没有比Halo 1.6要好，++<strong>我个人建议等到Halo官方发布Halo 2.5及其以上版本再考虑搬迁问题。</strong>++</p>]]></content>
      
      
      <categories>
          
          <category> Halo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo！</title>
      <link href="/2023/02/21/hexo-bo-ke-da-jian-li-cheng/"/>
      <url>/2023/02/21/hexo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>关于我为什么使用 Hexo，其实还挺戏剧性的，一开始我使用的是 Halo 建站，相当傻瓜式，非常推荐大家使用，各种功能也非常全。但是最近服务器厂商应急把服务器关了，差点导致博客丢死，另一个租用的服务器也快到期了，于是我就产生了对文章存档的想法（虽然确实每几篇文章）, 因为其实当今市面上的开源博客系统其实也蛮多的，常见的有：Hexo，Hexo、Hugo、Typecho、Wordpress 等。其中最著名的就是 Hexo，而且他有个特点就是：可以直接搭建在 github 仓库中。等于不需要服务器就能直接访问，而且甚至非常稳定且终身不丢，于是就想着搭建一个 Hexo 博客作为副站使用。</p><p>本篇文章就谈一谈我建站的过程吧，把一些搭建细节给保留下来，如果有人想要搭建，希望能靠这篇帮到访问的你。更多还是方便日后自己解决问题，本人使用的是 Windows 10，Mac 与 Liunx 系统请另寻其他文章</p><p>关于搭建 Hexo 博客前需要知道的事：</p><ol><li>你需要有一个 github 账号</li><li>你需要大致明白 Markdown 的写法（一些语法）</li><li>Hexo 每个页面都是一个静态的网页</li><li>Hexo 不支持在线编写，只能在本地编写文章后上传</li></ol><blockquote><p>Hexo 官网：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><ol><li>安装<code>Node.js</code></li></ol><blockquote><p>Node.js: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></blockquote><ol start="2"><li>安装<code>git</code></li></ol><blockquote><p>git download for windows: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></blockquote><p> 默认下一步，安装后右键会出现:</p><ul><li>Git GUI Here</li><li>Git Bash Here</li></ul><p>初次使用需要设定用户名及绑定邮箱。</p><ul><li><p>设置用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure></li><li><p>绑定邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 邮箱地址</span><br></pre></td></tr></table></figure><p>这两个设置对于轻度使用的用户来说按照喜好填写就行，不会有什么后续影响。</p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 本身拥有的特点就是离线性，搭建的过程完全依赖于本地，后期就只是编写后上传仓库。所以我们需要先在本地搭建起 Hexo。</p><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><ol><li><p>打开<code>cmd</code>输入以下指令，全局安装<code>Hexo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>安装完全后，使用以下指令验证安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建本地Hexo项目"><a href="#创建本地Hexo项目" class="headerlink" title="创建本地Hexo项目"></a>创建本地Hexo项目</h3><p>在本地新建一个文件夹作为 Hexo 项目的地址。<strong>在项目文件夹得目录下打开 <code>cmd</code>：</strong></p><ol><li><p>初始化Hexo项目（得到博客系统文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexoblog</span><br></pre></td></tr></table></figure><p>初始化完成后会出现项目的基本结构，后续一些博客的基础设置修改根据根目录下的<code>_config.yml</code> 文件来实现。</p></li><li><p>安装npm（已安装可跳过）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>本地启动后的地址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><p>正常来说会出现以下画面:</p></li></ol><h2 id="修改博客基础设置"><a href="#修改博客基础设置" class="headerlink" title="修改博客基础设置"></a>修改博客基础设置</h2><ol><li><p>site基础设置</p><p>进入Hexo项目文件夹（简称根目录），打开<code>_config.yml</code>（配置文件），找到如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &#x27;&#x27;</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords: &#x27;&#x27;</span><br><span class="line">author: &#x27;&#x27;</span><br><span class="line">language: &#x27;&#x27;</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这就是网站的基础设置项，这里只讲一些基础参数的修改：</p><ul><li>title：网站标题</li><li>subtitle：网站副标题</li><li>description：网站摘要</li><li>author：博主昵称</li><li>language：默认语言，默认是<code>en</code>（default）<ul><li>中文简体：<code>zh-CN</code></li><li>中文繁体为：<code>zh-TW</code></li></ul></li><li>timezone：时区</li></ul></li><li><p>主题修改</p><p>这个在下面[安装博客主题](# 安装博客主题)时再讲。</p></li></ol><h2 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h2><ol><li><p>下载主题文件</p><p>hexo 一开始是 default 主题。如果不满意的话，肯定需要自己更换主题，可以直接到Hexo官方的主题仓库选择。</p><blockquote><p>Hexo-theme：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>下载后的主题放入博客根目录的 themes 文件夹中，或者直接在 themes 文件中使用 git 的命令进行下载。</p></li><li><p>修改博客设置</p><p>修改博客根目录下<code>_config.yml </code>配置文件中的 theme 参数，修改为主题的名字（一般来说，如果出错可以直接去看各主题博主写的设置文章）</p><p>以下以<code>butterfly</code>主题为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>启动博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>可以缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><h2 id="将博客上传到Github或者Gitee"><a href="#将博客上传到Github或者Gitee" class="headerlink" title="将博客上传到Github或者Gitee"></a>将博客上传到Github或者Gitee</h2><p>将 hexo 博客上传到个人的 github 仓库后，可以直接通过仓库名来访问博客，这就等于白嫖了 github 仓库作为服务器，可以零成本搭建博客且文件不会丢失，小代价是有时可能无法正常访问，这时候可以考虑搭建<strong>全站 CDN（Content Delivery Network）提高访问的速度（网上都推荐 jsDelivr）</strong>，当然也不能保证 CDN 不会崩（jsDelivr 貌似崩了半年），所以看个人的需求吧。</p><p>放到 gitee 上也是一个好选择，访问速度有了保障，但是代价是 gitee 可能哪天就不支持静态页面托管了（有先例），<strong>因此还是首先推荐搭建到 github 仓库。</strong></p><h3 id="上传到Github仓库"><a href="#上传到Github仓库" class="headerlink" title="上传到Github仓库"></a>上传到Github仓库</h3><h4 id="生成SSH密匙"><a href="#生成SSH密匙" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>目录打开命令行，输入以下代码生成密匙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; </span><br></pre></td></tr></table></figure><p>其中<code>xxxxx@xxxxx.com</code>输入你GitHub的邮箱，实际上这只是一个名称，不是最关键的。</p><p>然后到<code>C:\Users\用户名\.ssh</code>，其中之后便会生成<code>id_rsa</code>和<code>id_rsa.pub</code>。其中 SSH 密匙在<code>id_rsa.pub</code>中。</p><p>登陆 github → 点击头像 → setting → SHH and GPG keys → New SSH key 把 id_rsa.pub 复制到其中即可。</p><p>此时</p><h4 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p>登陆 github → <code>＋号</code>（头像旁边） → New repository</p><p>仓库名字命名必须为：<code>github用户名.github.io</code>, 然后<strong>将仓库设为Public</strong></p><h4 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>, 找到<code>deploy</code>, 格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github仓库地址  例如：https://github.com/OliverLoki/OliverLoki.github.io.git </span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h4 id="上传文件到github仓库"><a href="#上传文件到github仓库" class="headerlink" title="上传文件到github仓库"></a>上传文件到github仓库</h4><p>输入上传代码（需要安装插件，详见：[生成和上传页面指令](# 生成与上传页面指令)）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>刷新即可看到仓库中出现了博客文件（<strong>因为网络问题可能会失败，失败就多试几次</strong>）</p><h3 id="上传到Gitee仓库"><a href="#上传到Gitee仓库" class="headerlink" title="上传到Gitee仓库"></a>上传到Gitee仓库</h3><p>上传Gitee与上传Github只有一些不一样，下面只说说不一样的地方，具体流程和上传Github一样。</p><h4 id="生成SSH密匙-1"><a href="#生成SSH密匙-1" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>跟Github不同，我们需要输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h4 id="创建博客仓库-1"><a href="#创建博客仓库-1" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><h4 id="修改博客配置文件-1"><a href="#修改博客配置文件-1" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>在Gitee的仓库中，默认分支不再是main，而是master，因此修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: gitee仓库地址  例如：https://gitee.com/OliverLoki/OliverLoki.gitee.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="上传文件到gitee仓库"><a href="#上传文件到gitee仓库" class="headerlink" title="上传文件到gitee仓库"></a>上传文件到gitee仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="开启静态页面托管服务"><a href="#开启静态页面托管服务" class="headerlink" title="开启静态页面托管服务"></a>开启静态页面托管服务</h4><p>跟Github不同，Gitee没有默认使用静态托管页面，因此我们需要手动开启静态托管页面的功能（此功能需要实名认证）</p><p>之后勾选强制https，然后点击更新</p><h2 id="Hexo系统基础命令"><a href="#Hexo系统基础命令" class="headerlink" title="Hexo系统基础命令"></a>Hexo系统基础命令</h2><p>建立好博客之后，还需要学会一些 <code>Hexo</code> 的一些日常操作指令，这样才能方面后续使用。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>文章默认生成在<code>.\source\_posts</code>文件夹下，且默认格式为 Markdown</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名字&quot;</span><br></pre></td></tr></table></figure><p>按照路径打开文章后内容如下：</p><p>这种方法不常用，不如直接右键生成<code>.md</code>文件</p><h3 id="生成和上传页面指令"><a href="#生成和上传页面指令" class="headerlink" title="生成和上传页面指令"></a>生成和上传页面指令</h3><p>因为 Hexo 是由一些静态的网页组成的，因此在编写完页面或者文章后，需要手动生成静态网页，也需要手动上传到指定的服务器。</p><p>生成静态页面和上传功能首先需要安装 <code>hexo-deployer-git</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li><p>清除页面缓存（有些设置需要清除缓存之后才能显示）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面（上传页面时才需要这么做）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>上传页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>一键部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g --d</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page “页面名”</span><br></pre></td></tr></table></figure><p>需要注意的是，生成的页面默认在项目的 source 文件夹下 (例如：<code>F:\Hexo\source</code>)，默认生成的网页地址为<code> 你的网址/页面名/</code>，所以页面名要与<code>_config.yml</code>文件中设置的页面名保持一致。</p><p>稍微总结一下<strong>生成的相关操作</strong>：</p><table><thead><tr><th>操作</th><th>路径</th><th>需要知道的</th></tr></thead><tbody><tr><td>hexo new “文章名”</td><td><code>.\source\_posts</code></td><td>这种方法不常用</td></tr><tr><td>hexo new page “页面名”</td><td><code>.\source\页面名</code></td><td>默认生成的网页地址为<code>网址/页面名/</code>，所以页面名要与<code>_config.yml</code> 文件中设置的页面名保持一致。</td></tr></tbody></table><h3 id="hexo三连"><a href="#hexo三连" class="headerlink" title="hexo三连"></a>hexo三连</h3><p>如果你觉得一条条写命令麻烦，你可以使用<code>&amp;&amp;</code>来连接这些命令，在更改了网页之后，我们一般要先清除缓存，生成界面，上传页面，一条一条敲的话很麻烦，这时候你就可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="文章属性快速设置"><a href="#文章属性快速设置" class="headerlink" title="文章属性快速设置"></a>文章属性快速设置</h2><p>文章拥有很多属性，如：标题，摘要，tags，类别等。那么就需要学会如何在 md 文件中编写<code>YAML格式</code>（文章头）让系统识别到这是设置的属性。</p><h3 id="文章基础属性设置"><a href="#文章基础属性设置" class="headerlink" title="文章基础属性设置"></a>文章基础属性设置</h3><p>在 md 文件开头写入如下格式（YAML）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">创建文章时间</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">类别1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">类别2</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">摘要</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">文章封面（图片地址）</span></span><br><span class="line"><span class="attr">top-img:</span> <span class="string">文章顶部图（图片地址）</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">是否开启评论(true</span> <span class="string">or</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>写入后在相应的主题中打开相应设置就能看见这些设置。</p><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>有些人可能会拿博客写日记、账号密码等私密内容，这些内容肯定不能直接公开，最直接的保密方法就是给文章加密（当然会不会给轻松破解就不清楚了）</p><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>加密<code>YAML</code>格式</p><p><code>YAML</code>写法为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">自己设置的密码</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">密码文本框提示</span> <span class="string">例如：您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">错误信息提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">校验失败提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个文章不能被校验</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>加密成功提示</p></li></ol><h3 id="文章置顶（Butterfly主题）"><a href="#文章置顶（Butterfly主题）" class="headerlink" title="文章置顶（Butterfly主题）"></a>文章置顶（Butterfly主题）</h3><p><code>hexo-generator-index </code>从 2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的 <code>front-matter </code>区域里添加 <code>sticky: 1 </code>属性来把这篇文章置顶。<strong>数值越大，置顶的优先级越大。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">sticky:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="添加版权提醒"><a href="#添加版权提醒" class="headerlink" title="添加版权提醒"></a>添加版权提醒</h3><p>自己写的文章有时候不太希望随便给人 copy，这时候就需要添加版权信息提示，一般来说主题都包含这项功能（去主题配置文件打开即可），但有时候我们不一定全局都开启版权声明（比如搬运文章），这时候就需要单独给一些文章添加版权信息。</p><p>可以在<code>YAML</code>中加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请注明来自原作者</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>另外，你可以在主题设置中打开复制附加版权信息，这样或许更有作用。</strong></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>Hexo拥有许多插件，并且有着自己的插件仓库，安装一些实用的插件可以让我们的体验大大提升。</p><blockquote><p>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><p>这个插件可以提供站内文章搜索功能，非常推荐安装</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>那么在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search: path: search.xml;</span><br><span class="line">field: post;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>这个插件能在文章的标题下面显示文章字数</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  date: true # 发布日期</span><br><span class="line">  update: true # 更新日期</span><br><span class="line">  wordCount: true # 文章字数统计</span><br><span class="line">  totalCount: true # 站点总文章字数</span><br><span class="line">  min2read: true # 文章阅读时长</span><br><span class="line">  readCount: true # 文章阅读次数</span><br></pre></td></tr></table></figure></li></ol><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>对于中文使用者来说，文章标题都是中文的，因为 hexo 会默认将文章标题作为网页链接的一部分，这就可能会出现一些不便。例如：</p><blockquote><p>修改前：<a href="http://localhost:4000/2022/11/19/python">http://localhost:4000/2022/11/19/python</a> 编程中遇到的一些问题 &#x2F;</p></blockquote><p><strong>你会发现链接无法正常被识别完整，这可能导致一些场合无法直接点击跳转</strong>，因此网页链接中最好不要出现中文，这时候就可以安装此插件。</p><p>这个插件安装配置好后会生成拼音和”-“来代替连接中的中文</p><blockquote><p>修改后：<a href="http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/">http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</a></p></blockquote><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: &#x27;-&#x27; # default: &#x27;-&#x27;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章加密插件"><a href="#文章加密插件" class="headerlink" title="文章加密插件"></a>文章加密插件</h3><p>顾名思义，可以给文章加密。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>具体可见上文内容[给文章加密](# 给文章加密)</p></li></ol><h3 id="文章隐藏插件"><a href="#文章隐藏插件" class="headerlink" title="文章隐藏插件"></a>文章隐藏插件</h3><p>顾名思义，可以将文章隐藏。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>在文章的<code>YAML</code>中加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h3><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>在博客根目录<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  enable: true</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line"> content:</span><br><span class="line"> content_limit: 140</span><br><span class="line"> content_limit_delim: &#x27; &#x27;</span><br><span class="line"> order_by: -date</span><br><span class="line"> icon: icon.png</span><br><span class="line"> autodiscovery: true</span><br><span class="line"> template:</span><br></pre></td></tr></table></figure><p>其实默认即可，但是如果想改的话建议查看官网：</p><blockquote><p><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p></blockquote></li><li><p>在主题的<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li><li><p>添加（或者修改）social处的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fas fa-rss: 你的博客地址/atom.xml</span><br></pre></td></tr></table></figure></li></ol><p>最终生成效果如下，地址为<code>博客地址 + /atom.xml</code>：</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/21/hello-world/"/>
      <url>/2023/02/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程中遇到的一些问题</title>
      <link href="/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  近期进行Python编程的问题汇总。</p><h2 id="需求文档的生成"><a href="#需求文档的生成" class="headerlink" title="需求文档的生成"></a>需求文档的生成</h2><hr><p>  需求文档，其实就是<code>requirements.txt</code>。</p><p>  对于一个项目来说，要能够运行，需要构建相应的运行环境，运行环境中需要包含项目运行的所有库。对于Python来说，它并没有向下兼容的特性，所以明确项目的运行环境就更加重要。对于同一个库，不同的版本可能会有所差异，因此一个对 项目运行库环境的说明就尤其重要。<code>requirements.txt</code>本质就是包含了项目所需要库的一个详细总结。<br>  生成requirements文件一般来说有两种方法。</p><h3 id="pip-freeze-gt-requirements-txt"><a href="#pip-freeze-gt-requirements-txt" class="headerlink" title="pip freeze &gt; requirements.txt"></a><code>pip freeze &gt; requirements.txt</code></h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><ul><li>按这种方式生成的话<strong>一定要在特定的环境下</strong>。</li><li>如果在命令行中运行指令，默认是在Anaconda（base）的环境下运行，会导致将<strong>base环境中所有的包全部导入</strong>，这样操作明显是错误的。会给后续的操作带来很大的麻烦。</li></ul><div align="center">  <img src="https://z4a.net/images/2022/11/19/requirements1.png" alt="直接在cmd生成" width=600></div><h3 id="pipreqs-encoding-utf8-force"><a href="#pipreqs-encoding-utf8-force" class="headerlink" title="pipreqs . --encoding=utf8 --force"></a><code>pipreqs . --encoding=utf8 --force</code></h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure><ul><li>此命令需要安装<code>pipreqs</code>，安装命令为：<code>pip install pipreqs</code> 。此方法最大的优点就是<strong>在任何情况都能正确导入项目需要的库</strong>，因此非常推荐使用。</li><li>注意–encoding&#x3D;utf8为使用utf8编码，不然可能会报<code>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xae in position 406: illegal multibyte sequence </code>的错误.</li><li><code>--force</code>强制执行， 生成目录下的<code>requirements.txt</code>，存在时会直接覆盖。</li></ul><div align="center">     <img src="https://z4a.net/images/2022/11/19/requirements2.png" alt="直接在cmd生成" width=600></div><h3 id="从requirements中安装相应的库。"><a href="#从requirements中安装相应的库。" class="headerlink" title="从requirements中安装相应的库。"></a>从requirements中安装相应的库。</h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>   这个也是非常常用的一个操作，在运行项目时经常需要通过<code>requirements.txt</code>来安装各种项目依赖库。</p><h2 id="PyInstall打包过于臃肿"><a href="#PyInstall打包过于臃肿" class="headerlink" title="PyInstall打包过于臃肿"></a>PyInstall打包过于臃肿</h2><hr><p>  这个问题其实跟上面<code>pip freeze &gt; requirements.txt</code>生成需求文档的问题一样，需要在特定的虚拟环境中进行打包。如果<strong>直接在命令行输入指令（命令行默认是base环境），就会导致直接将base环境中所有的包都纳入打包范围</strong>，结果生成大小不符合常理的打包文件。</p><h3 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h3><hr><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller1.png" alt="直接在cmd生成" width="500">    <img src="https://z4a.net/images/2022/11/19/pyinstaller2.png" alt="直接在cmd生成" width="500"></div><h3 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h3><hr><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller3.png" alt="直接在cmd生成" width="500">    <br>    <img src="https://z4a.net/images/2022/11/19/pyinstaller4.png" alt="直接在cmd生成" width="500"></div><h2 id="PyCharm连接Jupyter报错"><a href="#PyCharm连接Jupyter报错" class="headerlink" title="PyCharm连接Jupyter报错"></a>PyCharm连接Jupyter报错</h2><hr><p>  虽然VsCode作为代码编辑器足够优秀，但是并没有很好的编写项目的能力。<br>PyCharm其实是做项目更好的选择。但是我的PyCharm运行ipynb文件时会报如下的错误，这个问题真的困扰我很久了。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter5.png" alt="直接在cmd生成" width="600"></div><p>  解决方法今天找到：</p><h3 id="得到jupyter内核所在的路径。"><a href="#得到jupyter内核所在的路径。" class="headerlink" title="得到jupyter内核所在的路径。"></a>得到jupyter内核所在的路径。</h3><hr><p>  在cmd输入<code>jupyter kernelspec list</code>,得到jupyter内核所在的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter.png" alt="直接在cmd生成" width="600"></div>​<h3 id="查看Python编译器的路径是否正确。"><a href="#查看Python编译器的路径是否正确。" class="headerlink" title="查看Python编译器的路径是否正确。"></a>查看Python编译器的路径是否正确。</h3><hr><p>  进入安装内核目录打开<code>kernel.jason</code>文件，查看Python编译器的路径是否正确。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter2.png" alt="直接在cmd生成" width="600"></div><h3 id="修改kernel-jason中内核的路径"><a href="#修改kernel-jason中内核的路径" class="headerlink" title="修改kernel.jason中内核的路径"></a>修改<code>kernel.jason</code>中内核的路径</h3><hr><p>  按照自己能够启动jupyter的Python路径，修改<code>kernel.jason</code>中内核的路径。（基本情况是生成了错误的路径）</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter3.png" alt="直接在cmd生成" width="600"></div><h3 id="重启jupyter"><a href="#重启jupyter" class="headerlink" title="重启jupyter"></a>重启jupyter</h3><hr><h3 id="重启PyChram"><a href="#重启PyChram" class="headerlink" title="重启PyChram"></a>重启PyChram</h3><hr><p>  重启PyChram，问题解决。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter4.png" alt="直接在cmd生成" width="600"></div><blockquote><p>我也是生成了错误的内核路径，不知道啥情况，我连那个文件夹都没有，这个估计是PyCharm的bug，希望日后修复。</p></blockquote><h2 id="PyCharm中OpenCV无法得到提示"><a href="#PyCharm中OpenCV无法得到提示" class="headerlink" title="PyCharm中OpenCV无法得到提示"></a>PyCharm中OpenCV无法得到提示</h2><hr><p>在PyCharm中<code>import cv2</code>后，会出现调用cv2方法时没有任何补全提示，甚至输入<code>cv2.</code>时还会出现未知高亮，但是还是可以正常使用。PyCharm无法提供补全提示，说明PyCharm无法找到对应的索引，这时候就需要去找到cv2包所在的文件路径，然后将它加入到解释器路径中。</p><h3 id="寻找cv2所在路径"><a href="#寻找cv2所在路径" class="headerlink" title="寻找cv2所在路径"></a>寻找cv2所在路径</h3><hr><p>  如果是在conda环境中安装，以我的路径为例：</p><blockquote><p>D:\Anaconda\envs\digital_image\Lib\site-packages\cv2</p></blockquote><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv26a4b7efd79bb3fb0.png" alt="cv2所在路径" width=600></div><p>  如果不是在conda环境中安装，那么此时可以先写入<code>cv2.imread</code>，选中<code>imread</code>后右键，按照“转到→实现”的顺序就可以跳转到<code>_init_.py</code>文件中，鼠标悬停在标签上即可看到路径。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv2.png" alt="查找cv2所在路径" width=600></div><br><blockquote><p>小插曲：其实可以看到我的cv2路径已经被复制到c盘中，所以一开始我本来尝试删除进行错误展示，但是发现删除解释器中的cv2路径后还是能正常进行代码提示，原因就在这里，估计是PyCharm进行了备份。</p></blockquote><h3 id="将路径加入解释器路径中"><a href="#将路径加入解释器路径中" class="headerlink" title="将路径加入解释器路径中"></a>将路径加入解释器路径中</h3><hr><p>  找到路径后，按照“文件→设置→项目→Python解释器”的顺序，找到PyCharm解释器列表，之后的操作如下图所示。</p><div align="center"><img src="https://z4a.net/images/2023/02/08/d37934718875d1edba8d4243137c3b1a.png" alt="Python解释器" width="600"><img src="https://z4a.net/images/2023/02/08/cv22.png" alt="直接在cmd生成" width="600"><img src="https://z4a.net/images/2023/02/08/cv21.png" alt="直接在cmd生成" width="600"></div><h3 id="重启PyCharm"><a href="#重启PyCharm" class="headerlink" title="重启PyCharm"></a>重启PyCharm</h3><hr><p>  操作完成后，<strong>建议重启一下PyCharm</strong>，之后写入<code>import cv2</code>操作后，就可以直接看见代码提示，未知的高亮提示也不见了。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/e280accc813259725a0330982e12968f.png" alt="解决补全问题" width="600"></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyCharm </tag>
            
            <tag> Jupyter </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用whl文件快速安装PyTorch</title>
      <link href="/2022/11/16/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/"/>
      <url>/2022/11/16/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/PyTorch_office.png" alt="PyTorch_office" title="PyTorch主页" width="700"></div><br><blockquote><p>PyTorch官网：<a href="https://pytorch.org/">https://pytorch.org/</a></p></blockquote><p>在Windows环境下，PyTorch的安装由于网络问题，大部分人如果想直接通过官网的指令安装显然是非常困难的。因为torch这个库有2G左右的大小，服务器又在国外，这就出现了下载异常缓慢（能下一天）或者下载容易失败的问题（网络问题导致下载中断）。</p><p><strong>这时候有两种方法：</strong></p><ol><li>使用魔法，改善下载速度。</li><li>使用本地文件安装。</li></ol><p>这个博客主要记录如何使用本地压缩包（.whl）文件快速安装PyTorch。</p><h2 id="明确自己的使用需求"><a href="#明确自己的使用需求" class="headerlink" title="明确自己的使用需求"></a>明确自己的使用需求</h2><p>如果你需要使用GPU进行PyTorch实践，那么你就需要安装带CUDA的版本。如果你只是想要使用CPU进行实践，那么就选择CPU版本进行下载。各有优势，没有高低之分。<br><strong>这里有一些注意点</strong>：</p><ol><li>如果你想要下载CUDA版本的PyTorch，不要通过清华源下载，清华源已经没有CUDA版本的资源，下载多少次都是CPU版本的。</li><li>想使用<strong>GPU实践torch，必须安装NVIDIA CUDA</strong>。</li></ol><h2 id="查看自己的CUDA版本并安装CUDA支持"><a href="#查看自己的CUDA版本并安装CUDA支持" class="headerlink" title="查看自己的CUDA版本并安装CUDA支持"></a>查看自己的CUDA版本并安装CUDA支持</h2><ul><li>对于大多数NVIDIA显卡来说，都是支持CUDA的，<strong>如果你的显卡不支持CUDA，那即使装了CUDA版本，也只能使用CPU进行实践。</strong></li><li><strong>如果你的显卡不支持CUDA，那么建议下载CPU版本。</strong></li></ul><h3 id="查看CUDA版本"><a href="#查看CUDA版本" class="headerlink" title="查看CUDA版本"></a>查看CUDA版本</h3><p>如果下载CUDA版本的PyTorch，此时就需要对应自己电脑所支持的最高CUDA版本，然后同级或者向下兼容选择相应的CUDA安装指令。查看CUDA版本有两种方法。</p><ol><li>通过NVIDIA控制面板查看</li></ol><div align="center">  <img src="https://z4a.net/images/2022/11/16/cuda_1.png" alt="通过控制面板" width="500"><img src="https://z4a.net/images/2022/11/16/cuda_2.png" alt="通过控制面板查看" title="通过控制面板查看" width="500"></div><ol start="2"><li><p>通过指令</p><p>打开命令行，输入<code>nvidia-smi</code>，出现以下界面</p></li></ol><div align="center">   <img src="https://z4a.net/images/2022/11/16/cuda_3.png" alt="通过命令函查看" title="通过命令行查看" width="700"></div><h3 id="安装CUDA支持"><a href="#安装CUDA支持" class="headerlink" title="安装CUDA支持"></a>安装CUDA支持</h3><p>查询到自己电脑的CUDA版本后，你需要安装CUDA支持。</p><blockquote><p>各版本CUDA下载：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p></blockquote><div align="center">     <img src="https://z4a.net/images/2022/11/16/CUDA.png" alt="CUDA安装" title="CUDA安装" width="600"></div><p>建议选择电脑支持的<strong>最高CUDA版本</strong>安装即可。</p><h2 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h2><div align="center">     <img src="https://z4a.net/images/2022/11/16/install.png" alt="安装方式" title="安装方式" width="700"></div><p>如果你是Windows用户，一般情况下，官网提供了两种常用的安装方式：</p><ol><li>pip指令</li><li>Conda指令（需要Anaconda环境）</li></ol><p>这两个指令下载的东西都是一样的，只是安装的方式不同。<strong>建议在Anaconda环境中安装</strong>，方便管理。</p><h2 id="下载离线文件"><a href="#下载离线文件" class="headerlink" title="下载离线文件"></a>下载离线文件</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/whl_list.png" alt="PyTorch_office" title="PyTorch主页" width="400"></div><hr><p>.whl文件，实际就是torch的压缩文件。<br>当我们使用pip进行库的下载时候，会先拉取压缩包请求，然后在本地解压安装。这边有个注意点，如果当前拉取的压缩包已经存在，则会直接解压。所以我们提前准备好torch的压缩包，当使用pip指令下载时，会直接拉取本地的压缩包，跳过下载安装包的过程。从本地文件安装的原理就是如此。</p><ul><li>当然还有一个重要前提，单独下载.whl文件真的非常快。</li></ul><p>下载文件之前需要了解一些概念，以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>这个文件名为例。</p><blockquote><p>torch-1.12.0：代表torch版本</p><p>cu116：代表支持CUDA11.6</p><p>cp37：代表运行环境为Python3.7</p><p>win：指Windows平台</p><p>amd64：代表64位操作系统</p></blockquote><p>了解这些之后就可以按自己的需求下载自己需要的.whl压缩文件。</p><blockquote><p>下载地址：<a href="https://download.pytorch.org/whl/torch/">https://download.pytorch.org/whl/torch/</a></p></blockquote><ul><li>小提示：善用快捷搜索，Ctrl+F</li><li>下载后的文件最好放入<code>C:\Users\用户名</code>路径下，方便后续安装。</li></ul><h2 id="使用pip指令安装压缩文件"><a href="#使用pip指令安装压缩文件" class="headerlink" title="使用pip指令安装压缩文件"></a>使用pip指令安装压缩文件</h2><p>以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>为例。</p><p>进入要安装的环境命令行，进入.whl文件所在的路径，运行指令<code>pip install torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl </code> </p><p>如果没出现下载，就会自动显示要求满足，然后压缩安装。如果还是下载了，请自行关闭命令行再次尝试一遍。</p><div align="center">  <img src="https://z4a.net/images/2022/11/16/install_1.png" alt="安装压缩包" title="安装压缩包" width="600"></div><p>安装torch完成后，打开官网再次运行安装命令安装其他相适应的库即可，此时就会直接跳过torch的安装了。</p><div align="center"><img src="https://z4a.net/images/2022/11/16/install_2.png" alt="安装链接" title="安装链接" width="500"><img src="https://z4a.net/images/2022/11/16/install_3.png" alt="安装成功" title="安装成功" width="500"></div><ul><li>注意.whl文件与pip安装命令之间的对应关系。</li><li>如果输入pip您发现还在下载torch，那么您下载的.whl不满足对应要求，请按照pip出现的版本重新下载.whl文件。</li></ul><h2 id="一些检查指令"><a href="#一些检查指令" class="headerlink" title="一些检查指令"></a>一些检查指令</h2><ul><li>返回当前设备索引<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.current_device()</span><br></pre></td></tr></table></figure></li><li>返回GPU的数量  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.device_count()</span><br></pre></td></tr></table></figure></li><li>返回gpu名字，设备索引默认从0开始<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.get_device_name(0)</span><br></pre></td></tr></table></figure></li><li>cuda是否可用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>我的结果：<div align="center"><img src="https://z4a.net/images/2022/11/16/check.png" alt="PyTorch_office" title="PyTorch主页" width="350"></div><br></li></ul><blockquote><p>如果<code>torch.cuda.is_available()</code>返回的是False，那么很遗憾，你可能需要重新安装，重新检查问题所在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PyTorch实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halo博客搭建历程</title>
      <link href="/2022/11/11/halo-bo-ke-da-jian-li-cheng/"/>
      <url>/2022/11/11/halo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>首先要说明的是，这个博客的搭建是按照b站up主“我不是咕咕鸽”所发视频教程来的，大佬很强，真正做到了傻瓜式的教程，个人还是非常感谢的。<br>因为视频是2019年，所以在搭建过程中肯定会遇到的与视频有些出路的地方，我在这个文章中小小记录一下。<br>先这里放一下链接：</p><blockquote><p>如何用服务器优雅地搭建一个博客—Hello,Halo!：<a href="https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web">https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web</a></p></blockquote><h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p>服务器购买还是跟视频说的一样，还是推荐Vultr，当然你也可以选择国内的服务器厂商，但是我觉得Vultr的价格确实还算亲民（在这篇文章编写的时候是<strong>1＄：7.18￥</strong>）。</p><blockquote><p>Vultr官网：<a href="https://my.vultr.com/">https://my.vultr.com/</a></p></blockquote><p>明明后缀中有cn，但是还是可能需要魔法，不然可能会一直加载，注册流程就先跳过了。</p><h2 id="Server-Type"><a href="#Server-Type" class="headerlink" title="Server Type"></a><strong>Server Type</strong></h2><p>前面两个<strong>High Performance</strong>都可以。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/CPU.png"></div><h2 id="Server-Location"><a href="#Server-Location" class="headerlink" title="Server Location"></a><strong>Server Location</strong></h2><p>这个算比较关键，主要如果服务器离中国太远的话，很容易出现高Ping，所以这边先点到Asia，这边推荐选择Tokyo，当然可以选Tokyo之外的其他地区。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/location.png"></div><h2 id="Server-Image"><a href="#Server-Image" class="headerlink" title="Server Image"></a><strong>Server Image</strong></h2><p>按视频来是选择<strong>CentOS 7×64</strong>，其实只要是Decker支持安装的System都是可行的。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/operation-system.png"></div><h2 id="Server-Size"><a href="#Server-Size" class="headerlink" title="Server Size"></a><strong>Server Size</strong></h2><p>视频里也说了最好还是用一核2G的机子，不然的话你的博客就不能设计太多的其他东西，不然会很卡（我自己的一核1G已经卡爆了）</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bill.png"></div><p>把这个关掉然后创建即可</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/auto_save_to_cloud.png"></div><p>网站的链接延迟使用站长之家的Ping值检测即可。大量延迟太高的节点或者主机无响应的话，可能需要重新创建服务器。</p><blockquote><p>站长之家：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p></blockquote><h1 id="使用FinalShell操纵远程服务器"><a href="#使用FinalShell操纵远程服务器" class="headerlink" title="使用FinalShell操纵远程服务器"></a>使用FinalShell操纵远程服务器</h1><p>这边倒是没有出现问题，这边就直接贴一下链接。</p><blockquote><p>FinalShell：<a href="http://www.hostbuf.com/t/988.html">http://www.hostbuf.com/t/988.html</a></p></blockquote><h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><blockquote><p>宝塔面板：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p></blockquote><p>CentOS的安装代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="显示宝塔面板的登陆网址"><a href="#显示宝塔面板的登陆网址" class="headerlink" title="显示宝塔面板的登陆网址"></a>显示宝塔面板的登陆网址</h2><p>这边一般会给一个国外访问链接和国内访问两个链接，哪个点的开就选哪个</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/c56237a158382e8be971ccbfc29b3118.png"></div><p>这边如果后续不小心关闭了，使用以下代码就可以再次显现链接，以及账号密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt default</span><br></pre></td></tr></table></figure><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>后续如果忘记账号密码，密码就会不显示（显示为***），此时就需要更改密码，可以通过输入以下指令修改密码（把命令最后面的 “testpasswd” 替换成你要改的新密码。如果你直接复制这条命令那默认的密码就是 “testpasswd”！）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server/panel &amp;&amp; python tools.pyc panel testpasswd</span><br></pre></td></tr></table></figure><p>也可以通过输入bt调出菜单，可以看到修改密码的选项：</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bt.png"></div><h1 id="安装Docker和Halo博客"><a href="#安装Docker和Halo博客" class="headerlink" title="安装Docker和Halo博客"></a>安装Docker和Halo博客</h1><p>跟着视频一步一步装就好。</p><blockquote><p>Docker install on CentOS：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br>使用Docker安装Halo博客：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></p></blockquote><p>这里其实也可以在宝塔面板中安装Docker，但是面板中的版本可能不是最新版，因此不推荐这种方法。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/docker_.png"></div><p>这边就要注意端口的一致性，不然无法准确映射。</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>由于英语不是很好，加上视频里完全没有细细说DNS解析这方面，在这里确实卡了很久。简单来说，当你拿到域名到代理商那里去解析的时候，代理商会显示两个值，需要把这两个值添加到我们购买域名的网站对应域名的Manage DNS Records里，目的是为了让这个域名知道是谁来管理他。<br>如果你是namesoil买的域名，那么这样按这个顺序点击：主页的MyCount → ，domain link manager，然会会出现以下界面。</p><div align="center">  <img src="https://z4a.net/images/2023/03/15/domain-link-manager.png"><img src="https://z4a.net/images/2023/03/15/Domain-L-ink-Manager.png"></div><p>勾选域名，点击上面的Change Nameservers，然后把开头的全部删除，把代理商给你的两个值填进去就好。<br>提交之后需要等待审核（非常快），然后按照视频的流程即可。</p><h1 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h1><p>申请的SLL证书（不申请你的网站进入时便会又不安全警告）<strong>是有时间期限的，一般是90天，之后还需要重新申请。</strong><br>反向代理的代码在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8090/;</span><br><span class="line">  rewrite ^/(.*)$ /$1 break;</span><br><span class="line">  proxy_redirect off;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header Upgrade-Insecure-Requests 1;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加之后就可以使用域名访问我们的博客。</p><h1 id="主题的选择"><a href="#主题的选择" class="headerlink" title="主题的选择"></a>主题的选择</h1><p>拿到博客一开始的主题算非常简陋的，可以去Halo的<strong>主题仓库</strong>更换自己喜欢的主题。如果你和我选择的一样，都是<strong>一核1G，那么还是不要安装太花里胡哨的主题，因为这样你的博客日常访问都会非常卡顿，这会严重影响博客的体验。</strong></p><blockquote><p>Halo主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Halo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> 服务器 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("/font/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/loading-bar.css"/>
      <url>/css/loading-bar.css</url>
      
        <content type="html"><![CDATA[.pace {-webkit-pointer-events: none;pointer-events: none;-webkit-user-select: none;-moz-user-select: none;user-select: none;-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 10px;-moz-border-radius: 10px;border-radius: 10px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;z-index: 2000;position: fixed;margin: auto;top: 12px;left: 0;right: 0;bottom: 0;width: 200px;height: 50px;overflow: hidden;}.pace .pace-progress {-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;-webkit-transform: translate3d(0, 0, 0);transform: translate3d(0, 0, 0);display: block;position: absolute;right: 100%;margin-right: -7px;width: 93%;top: 7px;height: 14px;font-size: 12px;background: #29d;color: #29d;line-height: 60px;font-weight: bold;font-family: Helvetica, Arial, "Lucida Grande", sans-serif;-webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;-ms-box-shadow: 120px 0 #fff, 240px 0 #fff;box-shadow: 120px 0 #fff, 240px 0 #fff;}.pace .pace-progress:after {content: attr(data-progress-text);display: inline-block;position: fixed;width: 45px;text-align: right;right: 0;padding-right: 16px;top: 4px;}.pace .pace-progress[data-progress-text="0%"]:after { right: -200px }.pace .pace-progress[data-progress-text="1%"]:after { right: -198.14px }.pace .pace-progress[data-progress-text="2%"]:after { right: -196.28px }.pace .pace-progress[data-progress-text="3%"]:after { right: -194.42px }.pace .pace-progress[data-progress-text="4%"]:after { right: -192.56px }.pace .pace-progress[data-progress-text="5%"]:after { right: -190.7px }.pace .pace-progress[data-progress-text="6%"]:after { right: -188.84px }.pace .pace-progress[data-progress-text="7%"]:after { right: -186.98px }.pace .pace-progress[data-progress-text="8%"]:after { right: -185.12px }.pace .pace-progress[data-progress-text="9%"]:after { right: -183.26px }.pace .pace-progress[data-progress-text="10%"]:after { right: -181.4px }.pace .pace-progress[data-progress-text="11%"]:after { right: -179.54px }.pace .pace-progress[data-progress-text="12%"]:after { right: -177.68px }.pace .pace-progress[data-progress-text="13%"]:after { right: -175.82px }.pace .pace-progress[data-progress-text="14%"]:after { right: -173.96px }.pace .pace-progress[data-progress-text="15%"]:after { right: -172.1px }.pace .pace-progress[data-progress-text="16%"]:after { right: -170.24px }.pace .pace-progress[data-progress-text="17%"]:after { right: -168.38px }.pace .pace-progress[data-progress-text="18%"]:after { right: -166.52px }.pace .pace-progress[data-progress-text="19%"]:after { right: -164.66px }.pace .pace-progress[data-progress-text="20%"]:after { right: -162.8px }.pace .pace-progress[data-progress-text="21%"]:after { right: -160.94px }.pace .pace-progress[data-progress-text="22%"]:after { right: -159.08px }.pace .pace-progress[data-progress-text="23%"]:after { right: -157.22px }.pace .pace-progress[data-progress-text="24%"]:after { right: -155.36px }.pace .pace-progress[data-progress-text="25%"]:after { right: -153.5px }.pace .pace-progress[data-progress-text="26%"]:after { right: -151.64px }.pace .pace-progress[data-progress-text="27%"]:after { right: -149.78px }.pace .pace-progress[data-progress-text="28%"]:after { right: -147.92px }.pace .pace-progress[data-progress-text="29%"]:after { right: -146.06px }.pace .pace-progress[data-progress-text="30%"]:after { right: -144.2px }.pace .pace-progress[data-progress-text="31%"]:after { right: -142.34px }.pace .pace-progress[data-progress-text="32%"]:after { right: -140.48px }.pace .pace-progress[data-progress-text="33%"]:after { right: -138.62px }.pace .pace-progress[data-progress-text="34%"]:after { right: -136.76px }.pace .pace-progress[data-progress-text="35%"]:after { right: -134.9px }.pace .pace-progress[data-progress-text="36%"]:after { right: -133.04px }.pace .pace-progress[data-progress-text="37%"]:after { right: -131.18px }.pace .pace-progress[data-progress-text="38%"]:after { right: -129.32px }.pace .pace-progress[data-progress-text="39%"]:after { right: -127.46px }.pace .pace-progress[data-progress-text="40%"]:after { right: -125.6px }.pace .pace-progress[data-progress-text="41%"]:after { right: -123.74px }.pace .pace-progress[data-progress-text="42%"]:after { right: -121.88px }.pace .pace-progress[data-progress-text="43%"]:after { right: -120.02px }.pace .pace-progress[data-progress-text="44%"]:after { right: -118.16px }.pace .pace-progress[data-progress-text="45%"]:after { right: -116.3px }.pace .pace-progress[data-progress-text="46%"]:after { right: -114.44px }.pace .pace-progress[data-progress-text="47%"]:after { right: -112.58px }.pace .pace-progress[data-progress-text="48%"]:after { right: -110.72px }.pace .pace-progress[data-progress-text="49%"]:after { right: -108.86px }.pace .pace-progress[data-progress-text="50%"]:after { right: -107px }.pace .pace-progress[data-progress-text="51%"]:after { right: -105.14px }.pace .pace-progress[data-progress-text="52%"]:after { right: -103.28px }.pace .pace-progress[data-progress-text="53%"]:after { right: -101.42px }.pace .pace-progress[data-progress-text="54%"]:after { right: -99.56px }.pace .pace-progress[data-progress-text="55%"]:after { right: -97.7px }.pace .pace-progress[data-progress-text="56%"]:after { right: -95.84px }.pace .pace-progress[data-progress-text="57%"]:after { right: -93.98px }.pace .pace-progress[data-progress-text="58%"]:after { right: -92.12px }.pace .pace-progress[data-progress-text="59%"]:after { right: -90.26px }.pace .pace-progress[data-progress-text="60%"]:after { right: -88.4px }.pace .pace-progress[data-progress-text="61%"]:after { right: -86.53999999999999px }.pace .pace-progress[data-progress-text="62%"]:after { right: -84.68px }.pace .pace-progress[data-progress-text="63%"]:after { right: -82.82px }.pace .pace-progress[data-progress-text="64%"]:after { right: -80.96000000000001px }.pace .pace-progress[data-progress-text="65%"]:after { right: -79.1px }.pace .pace-progress[data-progress-text="66%"]:after { right: -77.24px }.pace .pace-progress[data-progress-text="67%"]:after { right: -75.38px }.pace .pace-progress[data-progress-text="68%"]:after { right: -73.52px }.pace .pace-progress[data-progress-text="69%"]:after { right: -71.66px }.pace .pace-progress[data-progress-text="70%"]:after { right: -69.8px }.pace .pace-progress[data-progress-text="71%"]:after { right: -67.94px }.pace .pace-progress[data-progress-text="72%"]:after { right: -66.08px }.pace .pace-progress[data-progress-text="73%"]:after { right: -64.22px }.pace .pace-progress[data-progress-text="74%"]:after { right: -62.36px }.pace .pace-progress[data-progress-text="75%"]:after { right: -60.5px }.pace .pace-progress[data-progress-text="76%"]:after { right: -58.64px }.pace .pace-progress[data-progress-text="77%"]:after { right: -56.78px }.pace .pace-progress[data-progress-text="78%"]:after { right: -54.92px }.pace .pace-progress[data-progress-text="79%"]:after { right: -53.06px }.pace .pace-progress[data-progress-text="80%"]:after { right: -51.2px }.pace .pace-progress[data-progress-text="81%"]:after { right: -49.34px }.pace .pace-progress[data-progress-text="82%"]:after { right: -47.480000000000004px }.pace .pace-progress[data-progress-text="83%"]:after { right: -45.62px }.pace .pace-progress[data-progress-text="84%"]:after { right: -43.76px }.pace .pace-progress[data-progress-text="85%"]:after { right: -41.9px }.pace .pace-progress[data-progress-text="86%"]:after { right: -40.04px }.pace .pace-progress[data-progress-text="87%"]:after { right: -38.18px }.pace .pace-progress[data-progress-text="88%"]:after { right: -36.32px }.pace .pace-progress[data-progress-text="89%"]:after { right: -34.46px }.pace .pace-progress[data-progress-text="90%"]:after { right: -32.6px }.pace .pace-progress[data-progress-text="91%"]:after { right: -30.740000000000002px }.pace .pace-progress[data-progress-text="92%"]:after { right: -28.880000000000003px }.pace .pace-progress[data-progress-text="93%"]:after { right: -27.02px }.pace .pace-progress[data-progress-text="94%"]:after { right: -25.16px }.pace .pace-progress[data-progress-text="95%"]:after { right: -23.3px }.pace .pace-progress[data-progress-text="96%"]:after { right: -21.439999999999998px }.pace .pace-progress[data-progress-text="97%"]:after { right: -19.58px }.pace .pace-progress[data-progress-text="98%"]:after { right: -17.72px }.pace .pace-progress[data-progress-text="99%"]:after { right: -15.86px }.pace .pace-progress[data-progress-text="100%"]:after { right: -14px }.pace .pace-activity {position: absolute;width: 100%;height: 28px;z-index: 2001;box-shadow: inset 0 0 0 2px #29d, inset 0 0 0 7px #FFF;border-radius: 10px;}.pace.pace-inactive {display: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/set_font.css"/>
      <url>/css/set_font.css</url>
      
        <content type="html"><![CDATA[@font-face {    /* 为载入的字体取名字(随意) */    font-family: 'OPPOSans-R';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/HarmonyOS_Sans_SC_Regular.ttf);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/yemian.css"/>
      <url>/css/yemian.css</url>
      
        <content type="html"><![CDATA[:root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  /* 波浪css */.main-hero-waves-area {    width: 100%;    position: absolute;    left: 0;    bottom: -11px;    z-index: 5;  }  .waves-area .waves-svg {    width: 100%;    height: 5rem;  }  /* Animation */    .parallax > use {    animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;  }  .parallax > use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #f7f9febd;  }  .parallax > use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #f7f9fe82;  }  .parallax > use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #f7f9fe36;  }  .parallax > use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #f7f9fe;  }  /* 黑色模式背景 */  [data-theme="dark"] .parallax > use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #18171dc8;  }  [data-theme="dark"] .parallax > use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #18171d80;  }  [data-theme="dark"] .parallax > use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #18171d3e;  }  [data-theme="dark"] .parallax > use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #18171d;  }    @keyframes move-forever {    0% {      transform: translate3d(-90px, 0, 0);    }    100% {      transform: translate3d(85px, 0, 0);    }  }  /*Shrinking for mobile*/  @media (max-width: 768px) {    .waves-area .waves-svg {      height: 40px;      min-height: 40px;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>这里是gcnanmu，一个普通的大学生，喜欢鼓捣一些奇怪的事，建立博客的初衷是记录与分享，所以所有文章都尽量写的详细且易懂，希望对访问的你有所帮助。本站的话主要是为了备份使用，以防服务器出现问题或者续不了费用导致的文章丢失。</p><p>另外一个是由Halo搭建的博客：<a href="http://www.gcnanmu3125.xyz/">www.gcnanmu3125.xyz</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>journals</title>
      <link href="/journals/index.html"/>
      <url>/journals/index.html</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-25</p></div></div><div class='timeline-item-content'><p>试了试<code>HarmonyOS Sans</code>与<code>OPPO Sans</code>,感觉鸿蒙的字体更加圆润一点，现已将博客字体更换为<code>HarmonyOS Sans</code></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-19</p></div></div><div class='timeline-item-content'><p>又一次把Hexo给搭回来了，好在在固态坏掉之前又搭建了Halo博客，所以文章的话还在，可以说是不幸中的万幸。而且有了第一次的经验，这一次搭建Hexo可以说相当快了，前前后后就花了3小时左右（包括文章的编写，CSS的设定），也不弄的太花哨了，还是以实用为主。发现我没什么博客封面啊，只能拿点老图凑合一下了。</p><p>本站为博客的副站，也欢迎大家访问我的另一个博客：<a href="http://www.gcnanmu3125.xyz/">www.gcnanmu3125.xyz</a></p></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                // 这里可以换为你喜欢的图片，例如我就换为了雪人，但是要抠图                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）        /*        $("#myscoll").nekoScroll({            nekoname:'neko1', //nekoname，相当于id            nekoImg:'img/猫咪.png', //neko的背景图片            scImg:"img/绳1.png", //绳子的背景图片            bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效            zoom:0.9, //绳子长度的缩放值            hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息            right:'100px', //距离页面右边的距离            fontFamily:'楷体', //对话框字体            fontSize:'14px', //对话框字体的大小            color:'#1e90ff', //对话框字体颜色            scroWidth:'8px', //绳子的宽度            z_index:100, //不用解释了吧            during:1200, //从顶部到底部滑动的时长        });        */    })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-02-21 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-休息了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">友链</div><div class="flink-desc">一些优秀的人</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://gcnanmu.gitee.io" title="gcnanmuの博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://docimg10.docs.qq.com/image/AgAAC6u-TVPtJ_LI7f5GYqFzs7WIvgcg.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="gcnanmuの博客" />              </div>              <div class="flink-item-name">gcnanmuの博客</div>               <div class="flink-item-desc" title="Hexo博客">Hexo博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zfe.space/" title="小冰博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://zfe.space/images/headimage.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="小冰博客" />              </div>              <div class="flink-item-name">小冰博客</div>               <div class="flink-item-desc" title="做个有梦想的人！">做个有梦想的人！</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://noionion.top/" title="贰猹の小窝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="贰猹の小窝" />              </div>              <div class="flink-item-name">贰猹の小窝</div>               <div class="flink-item-desc" title="用这生命的每一秒，给自己一个不后悔的未来">用这生命的每一秒，给自己一个不后悔的未来</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://forever97.top/" title="未央的童话镇" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="未央的童话镇" />              </div>              <div class="flink-item-name">未央的童话镇</div>               <div class="flink-item-desc" title="在人海里梦游">在人海里梦游</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.fomal.cn/" title="Fomalhaut🥝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Fomalhaut🥝" />              </div>              <div class="flink-item-name">Fomalhaut🥝</div>               <div class="flink-item-desc" title="优秀魔改博主">优秀魔改博主</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://anzhiyu-c-github-io.vercel.app/page/2/" title="安知鱼" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼" />              </div>              <div class="flink-item-name">安知鱼</div>               <div class="flink-item-desc" title="生活明朗，万物可爱。">生活明朗，万物可爱。</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://tzy1997.com/" title="唐志远の博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="唐志远の博客" />              </div>              <div class="flink-item-name">唐志远の博客</div>               <div class="flink-item-desc" title="2023年的理想开始实现了吗？">2023年的理想开始实现了吗？</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://butterfly.js.org/" title="Butterfly官方" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Butterfly官方" />              </div>              <div class="flink-item-name">Butterfly官方</div>               <div class="flink-item-desc" title="Butterfly主题官方博客">Butterfly主题官方博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://shields.io/" title="Github小卡片" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="http://www.w3.org/2000/svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Github小卡片" />              </div>              <div class="flink-item-name">Github小卡片</div>               <div class="flink-item-desc" title="生成有趣的卡片">生成有趣的卡片</div>            </a>          </div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
