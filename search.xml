<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FFmpeg——一些简单的视频处理</title>
      <link href="/2023/05/22/ffmpeg-yi-xie-jian-dan-de-shi-pin-chu-li/"/>
      <url>/2023/05/22/ffmpeg-yi-xie-jian-dan-de-shi-pin-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给自己的作业留个档，方便日后查看，毕竟人最不靠谱的就是记忆。</p><blockquote><p>此博文使用的图片和视频与输出结果可前往<a href="http://alist.gcnanmu3125.xyz:5244/pikpak/%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/%E4%BD%9C%E4%B8%9A6">gcnanmuの小屋</a>查看。</p></blockquote><h2 id="视频缩放滤波器"><a href="#视频缩放滤波器" class="headerlink" title="视频缩放滤波器"></a>视频缩放滤波器</h2><p>用ffmpeg实现视频宽高放大2倍，宽高缩小2倍。(参考：视频的滤波器通常使用-VF来设置滤波器，也可以使用-filter_complex。） </p><p>展示视频像素用到的<code>ffmpeg</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -show_entries stream=width,height -of csv=s=x:p=0 input_video.mp4</span><br></pre></td></tr></table></figure><p>因此可以使用以下命令得到<strong>输入视频</strong>的分辨率：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -show_entries stream=width,height -of csv=s=x:p=0 <span class="string">&quot;F:\test6_video\input.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size2.png" alt="input_video" width="67%" /></div><p>需要了解的<code>ffmpeg</code>参数：</p><ol><li>待处理的视频。</li><li>变换后高与宽的数值，使用<code>iw</code>和<code>ih</code>分别表示原来视频的宽度和高度。vf表示视频过滤器(video filter)，该操作中由于宽高比和原来的视频不同，会造成像素的宽高比不同。<strong>如果想要保持原来的宽高比，可以传递-1作为参数。</strong></li></ol><p>视频像素分辨率<strong>放大为原来的两倍</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf scale=w=<span class="string">&#x27;iw*2&#x27;</span>:h=-1  <span class="string">&quot;F:\input_video\resize_double.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size1.png" alt="resize_double" width="67%" /></div><p>视频分辨率<strong>缩小为原来的两倍</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf scale=w=<span class="string">&#x27;iw*0.5&#x27;</span>:h=-1  <span class="string">&quot;F:\input_video\resize_half.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size3.png" alt="resize_half" width="67%" /></div><h2 id="视频水印添加滤波器"><a href="#视频水印添加滤波器" class="headerlink" title="视频水印添加滤波器"></a>视频水印添加滤波器</h2><p>将一个水印图片叠加到视频的左上角。（模仿cctv） </p><p>三个输入：</p><ol><li><p>要添加水印的视频</p></li><li><p>要添加的水印图片（需要去除背景，不然很难看）</p><p>本次输入的水印图片为：</p></li></ol><div align="center">  <img src="https://z4a.net/images/2023/05/22/CCTV.png" alt="CCTV" /></div><ol start="3"><li>水印要添加的坐标</li></ol><p>使用坐标（0,0）可以将水印添加到视频左上角，使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\CCTV.png&quot;</span> -filter_complex <span class="string">&quot;overlay=x=0:y=0&quot;</span> <span class="string">&quot;F:\test6_video\add_watermark.mp4&quot;</span> -y</span><br></pre></td></tr></table></figure><p>为了最快的找到视频的四个边缘，需要了解四个参数：</p><ul><li>main_w(W)：主画面的宽度</li><li>main_h(H)：主画面的高度</li><li>overlay_w(w)：水印宽度</li><li>overlay_h(h)：水印高度</li></ul><p>这样就可以将右上角的视频坐标<code>(W-w,0)</code>替换为<code>(main_w-overlay_w,0)</code>。</p><p>用以下命令可以将<strong>“CCTV”字样的水印</strong>添加到<strong>视频右上角</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\CCTV.png&quot;</span> -filter_complex <span class="string">&quot;overlay=x=main_w-overlay_w:y=0&quot;</span> <span class="string">&quot;F:\test6_video\add_watermark.mp4&quot;</span> -y</span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/c0e63da04a1dbc3d26954bff6830cb51.png" alt="add_watermark" width="67%" /></div><h2 id="视频文字叠加"><a href="#视频文字叠加" class="headerlink" title="视频文字叠加"></a>视频文字叠加</h2><p>叠加文字到视频上。（参考通过-vf使用drawtext的滤波器） </p><p>两个输入：</p><ol><li><p>要处理的视频</p></li><li><p>添加的文字以及属性（大小，颜色，位置，字体路径），<strong>一定要添加字体路径，否则会出现以下报错，提示字体不存在</strong>：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fontconfig error: Cannot load default config file: No such file: (null)</span><br></pre></td></tr></table></figure><p>将大小为30px的红色字样“CCTV”添加到视频的左上角,使用字体为宋体:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf drawtext=fontcolor=red:fontfile=C\\:/Windows/fonts/simhei.ttf:fontsize=30:text=<span class="string">&quot;CCTV&quot;</span>:x=0:y=0 -y <span class="string">&quot;F:\test6_video\add_txt.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>只需要变换坐标将文字添加到视频右上角：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf drawtext=fontcolor=red:fontfile=C\\:/Windows/fonts/simhei.ttf:fontsize=30:text=<span class="string">&quot;CCTV&quot;</span>:x=900:y=0+10 -y <span class="string">&quot;F:\test6_video\add_txt.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/4f29c2f2af8deed055b90b7c2e0b5955.png" alt="add_watermark" width="67%" /></div><h2 id="视频纹理增强"><a href="#视频纹理增强" class="headerlink" title="视频纹理增强"></a>视频纹理增强</h2><p>对视频做锐化操作。 </p><p>三个参数：</p><ul><li>x：领域的宽度 </li><li>y：领域的高度 </li><li>amount：-2 ~ 5。负值时进行模糊操作，正值进行锐化，0时无影响</li></ul><p>默认值的锐化(5x5大小的矩阵，其影响因子为1.0)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp <span class="string">&quot;F:\test6_video\sharpen.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>以上命令等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp=5:5:1 <span class="string">&quot;F:\test6_video\sharpen.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/3bfb324d7e5be82f4453f806e2a72268.png" alt="sharpen" width="67%" /></div><h2 id="视频画面模糊"><a href="#视频画面模糊" class="headerlink" title="视频画面模糊"></a>视频画面模糊</h2><ol><li>使用<code>boxblur</code>进行模糊</li></ol><p>将视频画面进行模糊处理。</p><p>输入参数：</p><ul><li><p>r ：<code>radius</code>表示模糊操作时的邻域半径大小，值越大表示模糊程度越高</p></li><li><p>p：<code>power</code>表示模糊运算的运算次数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf boxblur=10:1 <span class="string">&quot;F:\test6_video\boxblur.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/35f6ffd5cc0f671d01621d3edf1ecc99.png" alt="boxblur" width="67%" /></div><ol start="2"><li>使用<code>unsharp filer</code>进行模糊</li></ol><p>在上述[视频画面模糊](# 视频画面模糊)中我们使用了大于零的<code>amount</code>进行锐化，我们也可以使用小于零的<code>amount</code>进行模糊操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp=5:5:-2 <span class="string">&quot;F:\test6_video\ubsharp_blur.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/2.png" alt="unsharp_blur" width="67%" /></div><ol start="3"><li>使用<code>smartblur</code>进行模糊</li></ol><p>参数信息：</p><ul><li><p>r：<code>radius</code> 半径，颜色空间或亮度空间中进行高斯模糊时的半径，取值为 0.1 ~ 5.0</p></li><li><p>s：<code>strength</code> 强度，取值 -1 ~ 1，0 时原图输出，-1 ~ 0 进行锐化操作，0 ~ 1 进行模糊操作</p></li><li><p>t：<code>treshold</code> 阀值，取值 -30 ~ 30，0 时对整个图像进行过滤，-30 ~ 0 对平滑区域过滤，0~ 30 对边缘进行过滤。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf smartblur=5:0.8:0 <span class="string">&quot;F:\test6_video\smartblur.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/smartblur.png" alt="smartblur" width="67%" /></div><h2 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h2><p>截取原视频中部分区域视频。（参考使用crop进行视频画面的裁剪） </p><p>参数（<strong>严格按照顺序</strong>）：</p><ul><li>裁剪后宽度</li><li>裁剪后高度</li><li>起始位(宽)</li><li>起始位置(高)</li></ul><p>截取输入视频的四分之一的左上位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf crop=480:200:0:0 <span class="string">&quot;F:\test6_video\crop.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>使用命令查看分辨率，<strong>发现大小变为原来的二分之一</strong>。</p><div align="center"><img src="https://z4a.net/images/2023/05/22/display_size4.png" alt="image-20230519220351452" width="67%" /></div><p>以下为结果展示，<strong>红款框出为裁剪后的视频</strong>。</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/55ff5ecaf40d58c952a28a4c31a41947.png" alt="crop" width="67%" /></div><h2 id="视频画中画"><a href="#视频画中画" class="headerlink" title="视频画中画"></a>视频画中画</h2><p>将视频2作为小窗口叠加到视频1的右上角。（参考通过overlay和scale实现）。</p><p>三个参数：</p><ol><li>背景视频</li><li>嵌入视频</li><li>嵌入视频位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\back.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -filter_complex <span class="string">&quot;[0:v][1:v]overlay=main_w-overlay_w-10:10[v]&quot;</span> -map <span class="string">&quot;[v]&quot;</span> <span class="string">&quot;F:\test6_video\PIP.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li><p><code>[0:v]</code> : 第一个视频流；</p><p><code>[1:v]</code> : 第二个视频流；</p></li><li><p><code>main_w-overlay_w-10:10</code> ： 表示视频位置为<strong>（main_w-overlay_w-10，10）</strong></p></li><li><p><code>[v]</code> : 输出视频流的标签；</p></li><li><p><code>-map &quot;[v]&quot;</code> : 将带有标签为<code>&quot;[v]&quot;</code>的输出视频流映射到输出文件。</p></li></ol><div align="center"><img src="https://z4a.net/images/2023/05/22/picture_in_picture1.png" alt="PIP1" width="67%" /></div><p>保持原尺寸感觉还是太小还是太小，需要增大嵌入视频的分辨率大小，于是做出如下改进：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\back.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -filter_complex <span class="string">&quot;[1:v]scale=1500:h=-1[scaled];[0:v][scaled]overlay=main_w-overlay_w-10:10[v]&quot;</span> -map <span class="string">&quot;[v]&quot;</span> <span class="string">&quot;F:\test6_video\PIP2.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/picture_in_picture2.png" alt="PIP2" width="67%" /></div><p>其中：</p><ol><li><p><code>[1:v]scale=200:100[scaled]</code>  :  将视频分辨率改变为<strong>长1500px，宽按照原始比例缩放</strong>。</p></li><li><p><code>[scaled]</code>  : 视频标签，方便后续引用。</p></li><li><p><code>[0:v][scaled]overlay=main_w-overlay_w-10:10</code>  : 将标签为<code>[scaled]</code>的视频嵌入到第一个视频流的<strong>右上角偏离10px的位置</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 音视频处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频处理 </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频处理——G711A-law编码</title>
      <link href="/2023/05/08/yin-pin-chu-li-g711a-lu-bian-ma/"/>
      <url>/2023/05/08/yin-pin-chu-li-g711a-lu-bian-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本学期有一门音视频处理的课程，虽然老师上课上得确实过于粗糙了，但是确实激起了我的兴趣，课后在不断解决自己的疑惑的过程中还学到了很多有用但冷门的知识。日后应该也会写一篇笔记来记录学习的过程。</p><p>本次实践主题为G711 A律编码，是一种在通信领域应用广泛的编解码标准之一，是非均匀PCM编码的一种，具有良好的压缩效果和兼容性，因此广泛运用在通信领域，且主要在欧洲和亚洲地区广泛运用，我国也广泛采用此编码标准。</p><h2 id="G711A律编码原理"><a href="#G711A律编码原理" class="headerlink" title="G711A律编码原理"></a>G711A律编码原理</h2><h3 id="非均匀PCM"><a href="#非均匀PCM" class="headerlink" title="非均匀PCM"></a>非均匀PCM</h3><p>对于输入的音频信号，每个时刻的信号幅值是完全不同的，最为直观的感受就是在音频播放器中，播放音乐时打开示波器，可以看到音频信号幅值随着播放起起伏伏。变化速度快，且幅值变化没有规律，此时采用均匀PCM编码处理，将输入信号的幅度范围进行等间隔划分的量化，会导致高频部分失真，也无法捕捉到音频信号频繁的动态变化。</p><p><img src="https://www.z4a.net/images/2023/05/08/f2fd610d881cb72475ef1e17d6f7587f.gif" alt="音频波形"></p><p>这时候就可以考虑非均匀变换，根据不同的幅值情况采用非均匀的间隔量化，可以在达到压缩目的的同时获得更高的精度，尽可能不让关键信息丢失。G711A律编码就是非均匀PCM编码的一种。</p><p>对于G711 A律编码，也分为连续信号与离散信号的两种情况。</p><h3 id="连续信号"><a href="#连续信号" class="headerlink" title="连续信号"></a>连续信号</h3><p>对于连续的信号，A律编码采用了两段近似的方法，其表达式为：</p><div align="center"><svg xmlns="http://www.w3.org/2000/svg" width="46.972ex" height="7.738ex" viewBox="0 -1960.1 20761.6 3420.2" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-408-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-408-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-408-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-408-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-408-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-408-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-408-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-408-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-408-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-408-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-408-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-408-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-408-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-408-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-408-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-408-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-408-TEX-N-2061" d=""></path><path id="MJX-408-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-408-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-408-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-408-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-408-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-408-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1511, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2177.8, 0)"><use xlink:href="#MJX-408-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(3233.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-S4-23A7" transform="translate(0, 1061.1)"></use><use xlink:href="#MJX-408-TEX-S4-23A9" transform="translate(0, -561.1)"></use><use xlink:href="#MJX-408-TEX-S4-23A8" transform="translate(0, 0)"></use><svg width="889" height="91.1" y="1060" x="0" viewBox="0 16.1 889 91.1"><use xlink:href="#MJX-408-TEX-S4-23AA" transform="scale(1, 0.448)"></use></svg><svg width="889" height="91.1" y="-651.1" x="0" viewBox="0 16.1 889 91.1"><use xlink:href="#MJX-408-TEX-S4-23AA" transform="scale(1, 0.448)"></use></svg></g><g data-mml-node="mtable" transform="translate(889, 0)"><g data-mml-node="mtr" transform="translate(0, 913.7)"><g data-mml-node="mtd" transform="translate(1520, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(644.5, 516.4) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><g data-mml-node="mrow" transform="translate(1153.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2902.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(3371.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(3848.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4448.3, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4837.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(5409.3, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g></g><g data-mml-node="mtd" transform="translate(10880, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1405.8, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2461.6, 0)"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(16639.1, 0)"></g></g><g data-mml-node="mtr" transform="translate(0, -996.8)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(750, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(1139, 0)"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1639, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2417, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(3301, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3467.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><g data-mml-node="mrow" transform="translate(1153.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2281.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-2F"></use></g></g><g data-mml-node="mi" transform="translate(2781.6, 0)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g></g><g data-mml-node="mo" transform="translate(6999.2, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g></g><g data-mml-node="mrow" transform="translate(1601, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g></g></g><rect width="5424.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(5664.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(6133.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(6610.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7210.3, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(7599.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(8171.3, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8560.3, 0)"><use xlink:href="#MJX-408-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(9838.3, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1533.5, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mrow" transform="translate(2589.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(3995, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(5050.8, 0)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g></g></g></g><g data-mml-node="mo" transform="translate(17528.1, 0)"></g></g></g></g></svg></div><p>其中，A为峰值幅度。A<del>0</del>为控制压缩度的常数，常取A<del>0</del> &#x3D; 87.6。当 |x| ≤ (A&#x2F;A<del>0</del>)，我们将其视为幅值小的信号，当 A ≥ |x| ≥ (A&#x2F;A<del>0</del>)时，我们将其视为幅值大的信号。</p><p>根据表达式，可以得到如下的函数图像：</p><img src="https://www.z4a.net/images/2023/05/08/G711A.png" alt="连续G711A律编码" style="zoom: 50%;" /><p>从上图我们可以看出：</p><ul><li><p>对于幅值大的信号，幅值越高，变化得越平缓，压缩精度较高；</p></li><li><p>对于幅值小的信号，幅值越高，变化得越陡峭，压缩精度较低；</p></li></ul><p>有了编码压缩的过程，那自然就有解码的过程，也就是对编码函数取逆函数，其表达式如下：</p><div align="center"><svg xmlns="http://www.w3.org/2000/svg" width="54.463ex" height="7.361ex" viewBox="0 -1876.7 24072.7 3253.4" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-828-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-828-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-828-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-828-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-828-TEX-S4-7B" d="M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z"></path><path id="MJX-828-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-828-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-828-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-828-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-828-TEX-N-2061" d=""></path><path id="MJX-828-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-828-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-828-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-828-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-828-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-828-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-828-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-828-TEX-N-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path><path id="MJX-828-TEX-N-70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z"></path><path id="MJX-828-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-828-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-828-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-828-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-828-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D453"></use></g><g data-mml-node="TeXAtom" transform="translate(603, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-828-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(1834.5, 0)"><use xlink:href="#MJX-828-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(2890.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-S4-7B"></use></g><g data-mml-node="mtable" transform="translate(806, 0)"><g data-mml-node="mtr" transform="translate(0, 913.4)"><g data-mml-node="mtd" transform="translate(4198.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(389, 0)"><g data-mml-node="mrow" transform="translate(220, 457.1) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="msub" transform="translate(1043.3, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3291.3, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(3680.3, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g></g><g data-mml-node="mtd" transform="translate(14330.9, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(768, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1323.8, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2379.6, 0)"><g data-mml-node="mi" transform="translate(1186, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, -913.4)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(1255.7, 0)"><use xlink:href="#MJX-828-TEX-N-65"></use><use xlink:href="#MJX-828-TEX-N-78" transform="translate(444, 0)"></use><use xlink:href="#MJX-828-TEX-N-70" transform="translate(972, 0)"></use></g><g data-mml-node="mo" transform="translate(2783.7, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="mo" transform="translate(2783.7, 0)"><use xlink:href="#MJX-828-TEX-N-5B"></use></g><g data-mml-node="mo" transform="translate(3061.7, 0)"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(3450.7, 0)"><g data-mml-node="mrow" transform="translate(220, 457.1) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1278, 0)"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="mo" transform="translate(2112, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2278.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="mi" transform="translate(1168.3, -346.3) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><rect width="2626.9" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6317.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mi" transform="translate(6595.6, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7085.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(7585.9, 0)"><use xlink:href="#MJX-828-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8586.1, 0)"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9086.1, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9475.1, 0)"><use xlink:href="#MJX-828-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(9753.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(10222.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(10699.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(11299.1, 0)"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(11688.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(12178.1, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g></g><g data-mml-node="mtd" transform="translate(13567.1, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(1186, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3180.1, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(4235.9, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(5003.6, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(6059.4, 0)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g></g></g></g><g data-mml-node="mo" transform="translate(21182.5, 0)"></g></g></g></g></svg></div><h3 id="离散信号"><a href="#离散信号" class="headerlink" title="离散信号"></a>离散信号</h3><p>使用连续的方法对信号进行G711A律编码显然计算量很大，而且对于计算机中的音频数据，读取后都是离散的信号集合，因此我们需要一个迫近的连续处理图像的离散函数，此时就有了接下来的13段折线压扩，也就是离散化的方式，此过程也被称为量化。</p><p>13段折现法的量化方式为：</p><ol><li><p>将输入信号的幅度范围归一化为(-1,1);</p></li><li><p>对x正半轴的区间(0,1)，以1&#x2F;2递减规律将该区间不均匀地分成8段：</p><p>以（0，1）的中点1&#x2F;2为界将该区间等分两段；</p><p>以（0，1&#x2F;2）的中点1&#x2F;4为界将该区间等分两段；</p><p>以（0，1&#x2F;4）的中点1&#x2F;8为界将该区间等分两段；</p><p>以（0，1&#x2F;8）的中点1&#x2F;16为界将该区间等分两段；</p><p>以（0，1&#x2F;16）的中点1&#x2F;32为界将该区间等分两段；</p><p>以（0，1&#x2F;32）的中点1&#x2F;64为界将该区间等分两段；</p><p>以 （0，1&#x2F;64）的中点1&#x2F;128为界将该区间等分两段，共计8段；</p></li><li><p>对于上述的8段区间，每个区间再均匀分成16段；那么，最终整个(0,1)区间被分成128段。</p><img src="https://www.z4a.net/images/2023/05/08/x_13.png" style="zoom: 33%;" /></li><li><p>对x负半轴(-1,0)区间，采用上述 2,3的操作将该区间分成128段；这样，最终x轴的（-1，1）区间被分成256个区间。</p></li><li><p>将y轴（-1,1）区间均匀分成256段 ，共256个量化级。</p></li><li><p>把x轴和y轴的相应交点连接起来，得到13折线（其中正负轴的第一段和第二段折线斜率相同，合并为一条线段）。</p></li></ol><p>按照步骤可以绘制出以下函数图像：</p><img src="https://www.z4a.net/images/2023/05/08/xy_13.png" style="zoom:67%;" /><p>可以看出，与连续信号编码函数图像十分接近。</p><p>解码过程就是编码过程的反操作，因此不再赘述。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一般来说，G711 A律编码的输入音频信号的位深为16bit，编码后的位深为8bit，因此接下来都以16bit的音频作为例子。</p><p>其中，测试用的音频数据我使用的是如下三段音频：</p><ul><li>单声道：<code>wav5.wav</code></li><li>双声道：<code>wav6.wav</code>,<code>youjianchuiyan.wav</code></li></ul><h3 id="使用audioop库进行实现"><a href="#使用audioop库进行实现" class="headerlink" title="使用audioop库进行实现"></a>使用audioop库进行实现</h3><p>在Python中，可以直接使用第三方库<code>audioop</code>直接进行G711 A律的编解码操作。在编解码操作之前，需要打开和读取音频，可以使用Python内置的<code>wave</code>库进行读取。</p><ul><li><p>打开音频：<code>wav_in = wave.open(文件路径,&quot;rb&quot;)</code>，<strong>“rb”是以2进制进行读取。</strong></p></li><li><p>获取音频信息：<code>nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</code></p><table><thead><tr><th align="left">参数</th><th align="left">翻译</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">nchannels</td><td align="left">声道数</td><td align="left">1为单声道，2为双声道</td></tr><tr><td align="left">sampwidth</td><td align="left">采样位宽</td><td align="left">每个采样点用多少位，常见为16bit</td></tr><tr><td align="left">framerate</td><td align="left">比特率</td><td align="left">每秒所包含的数据大小</td></tr><tr><td align="left">nframes</td><td align="left">总采样点</td><td align="left">离散信号的总采样点（x的个数）</td></tr><tr><td align="left">comptype</td><td align="left">压缩类型</td><td align="left">指音频采用的压缩标准，如“MPEG”，如没有则显示“None”</td></tr><tr><td align="left">compname</td><td align="left">压缩方法</td><td align="left">压缩算法或压缩格式，如未压缩显示“not compressed”</td></tr></tbody></table></li><li><p>读取音频：<code>wav_in.readframes(nframes)</code></p></li><li><p>G711 A律编码：<code>audioop.lin2alaw(音频数据，sampwidth)</code></p><ul><li>sampwidth &#x3D; 1 -&gt; 8 bit的采样位宽，在此过程中就是编码后音频的位宽。</li><li>sampwidth &#x3D; 2 -&gt; 16 bit的采样位宽，在此过程中就是输入音频与解码音频的采样位宽。</li></ul></li><li><p>保存音频：</p><ol><li>设置保存音频的参数：<code>nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</code></li><li>写入：<code>wav_out.writeframes(audio_data)</code>，其中audio_data为bit数据流。</li></ol></li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> audioop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_G711</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="comment"># 打开 WAV 文件</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取采样参数</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对采样值进行 A 律压缩编码</span></span><br><span class="line">        compressed_data = audioop.lin2alaw(frames, sampwidth)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新的 WAV 文件并写入压缩后的数据</span></span><br><span class="line">        <span class="keyword">with</span> wave.<span class="built_in">open</span>(<span class="string">&#x27;./output/encode.wav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">            <span class="comment"># 设置参数</span></span><br><span class="line">            wav_out.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            wav_out.writeframes(compressed_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;G.711 A-law encoding is done&#x27;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_G711</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="comment"># 打开 WAV 文件</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取采样参数</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对采样值进行 A 律压缩解码</span></span><br><span class="line">        compressed_data = audioop.lin2alaw(frames, sampwidth)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新的 WAV 文件并写入压缩后的数据</span></span><br><span class="line">        <span class="keyword">with</span> wave.<span class="built_in">open</span>(<span class="string">&#x27;./output/encode.wav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">            <span class="comment"># 设置参数</span></span><br><span class="line">            wav_out.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            wav_out.writeframes(compressed_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;G.711 A-law encoding is done&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_path = <span class="string">&quot;./input/wav6.wav&quot;</span></span><br><span class="line">    encode_G711(input_path)</span><br><span class="line">    input_path = <span class="string">&quot;./output/encode.wav&quot;</span></span><br><span class="line">    decode_G711(input_path)</span><br></pre></td></tr></table></figure><p>因为处理的结果与自行编程实现的处理结果一样，因此我只展示自行编程实现的过程，处理结果在[量化——编码](# 量化——编码)与[量化——解码](# 量化——解码)部分有展示。</p><h3 id="原理编程实现"><a href="#原理编程实现" class="headerlink" title="原理编程实现"></a>原理编程实现</h3><p>根据G711 A律编码的原理，要实现编码需要经过采样、量化、编码三个过程。</p><ul><li>采样：将连续的音频数据进行离散化，此步骤还需要将音频bit流转化为整数。</li><li>量化：将离散化的数据按照13折现法的量化范围映射到一个固定数量的量化级别上。</li><li>编码：将整数转化为bit流，并将其转换为一个8位或者16位二进制数据。</li></ul><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p><code>audioop</code>库中的<code>linear2alaw</code>与<code>alaw2linear</code>函数，采样与转化bit流的过程并没有体现。所以，不能像调用<code>audioop</code>库一样简单使用<code>wave</code>读取音频数据，将bit流转化为整数的过程也需要单独实现，且需要根据不同的音频格式采取不同的转化策略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_audio</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取音频数据</span></span><br><span class="line"><span class="string">    :param input_path: 音频路径</span></span><br><span class="line"><span class="string">    :return: 读取出的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取音频格式信息</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;音频格式信息：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;声道数：<span class="subst">&#123;nchannels&#125;</span>,样本大小：<span class="subst">&#123;sampwidth&#125;</span> ,采样率：<span class="subst">&#123;framerate&#125;</span> ,采样点数：<span class="subst">&#123;nframes&#125;</span>,&quot;</span></span><br><span class="line">              <span class="string">f&quot;压缩类型：<span class="subst">&#123;comptype&#125;</span>，compname：<span class="subst">&#123;compname&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据不同的sampwidth采取不同的读取策略</span></span><br><span class="line">        <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为1的音频，采取一个一个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int8).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line">        <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为2的音频，采取两个两个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int16).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(audio_data.shape)</span></span><br><span class="line">        <span class="comment"># 如果音频为双声道，需要将其分为左右声道</span></span><br><span class="line">        <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">            left_channel = audio_data[:, <span class="number">0</span>]</span><br><span class="line">            right_channel = audio_data[:, <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 将左右声道数据装入一个list中</span></span><br><span class="line">            left_right_data = [left_channel, right_channel]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_right_data = [audio_data[:, <span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> left_right_data, nchannels, sampwidth, framerate, nframes</span><br></pre></td></tr></table></figure><p>对于不同的sampwidth，使用<code>np.frombuffer</code>读取时，读取后的返回值为整数列表，对于不同的采样宽度：</p><ul><li>sampwidth &#x3D; 1 时，<code>dtype=np.int8</code>采取一个一个字节读入的方式</li><li>sampwidth &#x3D; 2 时，<code>dtype=np.int16</code>采取两个两个字节读入的方式</li></ul><p>当输入音频的声道数为2时，不能直接像单声道那样直接处理，而是应该将左右声道分开处理，后续对其分别进行编码与解码的操作。<code>reshape(-1, nchannels)</code>是为了方便将采样数据分离。</p><ul><li>nchannels &#x3D; 2 时，将采样数据分为<code>audio_data[:, 0]</code>和<code>audio_data[:, 1]</code></li><li>nchannels &#x3D; 1 时，不进行分开处理，但为了格式与<code>nchannels = 2</code>保持一致，还是使用<code>[audio_data[:, 0]]</code>作为最后的读取结果。</li></ul><h4 id="量化——编码"><a href="#量化——编码" class="headerlink" title="量化——编码"></a>量化——编码</h4><p>对转化为整数的数据列表，根据13折现法进行编码量化，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号位掩码</span></span><br><span class="line">SIGN_BIT = <span class="number">128</span></span><br><span class="line"><span class="comment"># 量化位掩码</span></span><br><span class="line">QUANT_MASK = <span class="number">15</span></span><br><span class="line"><span class="comment"># 段偏移码</span></span><br><span class="line">SEG_SHIFT = <span class="number">4</span></span><br><span class="line"><span class="comment"># 段掩码</span></span><br><span class="line">SEG_MASK = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编码的划分点</span></span><br><span class="line">seg_aend = [<span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear2alaw</span>(<span class="params">audio_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频数据进行G711A律编码</span></span><br><span class="line"><span class="string">    :param audio_data: 待编码音频数据</span></span><br><span class="line"><span class="string">    :return: 编码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存编码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law encoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(audio_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> pcm_val <span class="keyword">in</span> audio_data:</span><br><span class="line">            <span class="comment"># 右移 3 位相当于除以 8</span></span><br><span class="line">            pcm_val = pcm_val &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置掩码值</span></span><br><span class="line">            <span class="keyword">if</span> pcm_val &gt;= <span class="number">0</span>:</span><br><span class="line">                mask = <span class="number">213</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask = <span class="number">85</span></span><br><span class="line">                pcm_val = -pcm_val - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定pcm_val所属的段</span></span><br><span class="line">            seg = search(pcm_val, seg_aend, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 超出预期线性段范围</span></span><br><span class="line">            <span class="keyword">if</span> seg &gt;= <span class="number">8</span>:</span><br><span class="line">                result.append(<span class="number">127</span> ^ mask)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 计算编码值的高 3 位</span></span><br><span class="line">                aval = seg &lt;&lt; SEG_SHIFT</span><br><span class="line">                <span class="keyword">if</span> seg &lt; <span class="number">2</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; <span class="number">1</span>) &amp; QUANT_MASK</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; seg) &amp; QUANT_MASK</span><br><span class="line">                <span class="comment"># 计算完整 A-law 编码值并添加到result中</span></span><br><span class="line">                result.append(aval ^ mask)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="量化——解码"><a href="#量化——解码" class="headerlink" title="量化——解码"></a>量化——解码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">alaw2linear</span>(<span class="params">encode_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    G711 a律解码</span></span><br><span class="line"><span class="string">    :param encode_data: 经过编码的音频数据</span></span><br><span class="line"><span class="string">    :return: 解码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存解码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law decoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(encode_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> a_val <span class="keyword">in</span> encode_data:</span><br><span class="line">            <span class="comment"># 将正负分离</span></span><br><span class="line">            a_val ^= <span class="number">85</span></span><br><span class="line">            <span class="comment"># 计算 t 的低 12 位</span></span><br><span class="line">            t = (a_val &amp; QUANT_MASK) &lt;&lt; <span class="number">4</span></span><br><span class="line">            <span class="comment"># 计算线性段索引</span></span><br><span class="line">            seg = (a_val &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算解码值</span></span><br><span class="line">            <span class="keyword">if</span> seg == <span class="number">0</span>:</span><br><span class="line">                t += <span class="number">8</span></span><br><span class="line">            <span class="keyword">elif</span> seg == <span class="number">1</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">                t &lt;&lt;= seg - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定符号并将结果加入result</span></span><br><span class="line">            <span class="keyword">if</span> a_val &amp; SIGN_BIT:</span><br><span class="line">                result.append(t)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(-t)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>因为在<code>read_audio</code>函数（音频读取部分）我们对<code>nchannels = 2</code>的音频进行了分开处理，所以我们保存音频的部分需要将分开的后的音频数据合并，这边我使用<code>np.column_stack</code>将分离后的数据合并。</p><p>对于<code>nchannels = 1的音频数据，因为在</code>read_audio<code>函数中保持了相同的格式，所以另一个声道数据为</code>[]&#96;。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_audio</span>(<span class="params">output_path, data, nchannels, sampwidth, framerate, nframes, processbar=<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment"># 将所有通道的数据组合</span></span><br><span class="line">    recovered_audio_data = np.column_stack(<span class="built_in">tuple</span>(data))</span><br><span class="line">    data = recovered_audio_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(sampwidth)</span></span><br><span class="line">    <span class="comment"># 获取进度条的总进度</span></span><br><span class="line">    <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">        processbar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将整数数组转换为字节流</span></span><br><span class="line">    byte_stream = io.BytesIO()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Audio is being synthesized---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;B&#x27;：无符号整数，将整数转换为一个长度为1字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, sample))</span><br><span class="line">                bar()</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;h&#x27; 有符号短整型，将整数转换为一个长度为2字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;h&#x27;</span>, <span class="built_in">int</span>(sample)))</span><br><span class="line">                bar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将字节流写入</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">        <span class="comment"># 设置音频参数</span></span><br><span class="line">        wav_out.setnchannels(nchannels)</span><br><span class="line">        wav_out.setsampwidth(sampwidth)</span><br><span class="line">        wav_out.setframerate(framerate)</span><br><span class="line">        wav_out.setnframes(nframes)</span><br><span class="line">        <span class="comment"># 按照参数将字节流写入</span></span><br><span class="line">        wav_out.writeframes(byte_stream.getvalue())</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---G.711 A-law encoding is done---&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---G.711 A-law decoding is done---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The audio is saved in &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>对于整数数组转换为字节流的过程中，对于不同的<code>sampwidth</code>，我们需要采取不同二进制打包策略，不然无法正确输出音频文件。</p><ul><li>sampwidth &#x3D; 1 时，数据经过<code>linear2alaw</code>函数的编码，因此我们需要将整数转换为一个长度为1字节的字符串，使用<code>&#39;B&#39;：无符号整数</code>的打包格式</li><li>sampwidth &#x3D; 1 时，数据经过<code>alaw2linear</code>函数的解码，因此我们需要将整数转换为一个长度为2字节的字符串，使用<code>&#39;h&#39;：有符号短整型</code>的打包格式</li></ul><p>在最后使用<code>wav</code>进行音频文件的输出时，根据目的不同使用不同的<code>sampwidth </code>取值。</p><ul><li>编码后的数据，采样位深一般由 2 → 1。</li><li>解码后的数据，采样位深一般由 1 → 2。</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>由于在<code>read_audio</code>函数中将左右声道数据分开后打包装入<code>left_right_data</code>列表中，所以需要使用循环将其取出。处理后将其打包装入<code>data</code>列表中，方便后续<code>save_audio</code>函数处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_g711</span>(<span class="params">audio_data, <span class="built_in">type</span>=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频进行编码与解码操作</span></span><br><span class="line"><span class="string">    :param audio_data:待处理的音频数据</span></span><br><span class="line"><span class="string">    :param type:处理类型：1-编码 2-解码</span></span><br><span class="line"><span class="string">    :return:处理后的数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 读取所有通道的音频信息</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> audio_data:</span><br><span class="line">        <span class="comment"># 编码操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">            encoded_channel = linear2alaw(channel)</span><br><span class="line">            data.append(encoded_channel)</span><br><span class="line">        <span class="comment"># 解码操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decoded_channel = alaw2linear(channel)</span><br><span class="line">            data.append(decoded_channel)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h5 id="G711A律编码结果"><a href="#G711A律编码结果" class="headerlink" title="G711A律编码结果"></a>G711A律编码结果</h5><p>测试对象我选择了<code>wav5.wav</code>、<code>wav6.wav</code>作为处理对象，分别对应音频单声道与双声道的情况。下面只展示<code>linear2alaw</code>函数处理的结果。</p><p>结果及分析：</p><ul><li><p><code>wav5.wav</code></p><p>程序输出结果：</p><img src="https://z4a.net/images/2023/05/05/wav5_en.png" alt="image-20230505164211005" style="zoom: 67%;" /><p>使用<code>ffprobe -i wav5_encode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav5_or_en.png" alt="image-20230505164602673" style="zoom: 80%;" /></li><li><p><code>wav6.wav</code></p><p>程序输出结果：</p><img src="https://z4a.net/images/2023/05/05/wav6_en.png" alt="image-20230505164329917" style="zoom:67%;" /><p>使用<code>ffprobe -i wav6_encode.wav -show_format</code>命令查看格式信息：</p></li></ul><img src="https://z4a.net/images/2023/05/05/wav6_or_en.png" alt="image-20230505164758748" style="zoom:80%;" /><p><strong>从格式上可以看出，<code>size</code>与<code>bit_rate</code>都相比原音频减少了约1&#x2F;2</strong>。其他参数并没有明显变化。播放编码后的音频<code>wav5_encode.wav</code>和<code>wav6_encode.wav</code>，<strong>可以听出有非常明显的杂音，类似于老电视机的沙沙声，但是人声得以保留，有一部分语音确实有些损坏，只有仔细才能听出说话的内容。</strong></p><h5 id="G711A律解码结果"><a href="#G711A律解码结果" class="headerlink" title="G711A律解码结果"></a>G711A律解码结果</h5><p>测试对象使用编码后的<code>wav5_encode.wav</code>、<code>wav6_encode.wav</code>，分别对应音频单声道与双声道的情况。下面只展示<code>alaw2linear</code>函数处理的结果，使用<code>audioop</code>库的处理结果相同。</p><p>结果及分析：</p><ul><li><p><code>wav5_encode.wav</code></p><img src="https://z4a.net/images/2023/05/05/wav5_de.png" alt="image-20230505165948766" style="zoom:67%;" /><p>使用<code>ffprobe -i wav5_decode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav5_en_de.png" alt="image-20230505170215701" style="zoom: 67%;" /></li><li><p><code>wav6_encode.wav</code></p><img src="https://z4a.net/images/2023/05/05/wav6_de.png" alt="image-20230505170017115" style="zoom:67%;" /><p>使用<code>ffprobe -i wav6_decode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav6_en_de.png" alt="image-20230505170339724" style="zoom:67%;" /></li></ul><p>从格式上可以看出<code>wav5_decode.wav</code>与<code>wav6_decode.wav</code>的<code>size</code>与<code>bit_rate</code>分别是<code>wav5_encode.wav</code>与<code>wav6_encode.wav</code>的两倍，也就是这两项指数回到了原音频的水准。</p><p>使用播放器播放<code>wav5_decode.wav</code>与<code>wav6_decode.wav</code>，与原音频<code>wav5.wav</code>、<code>wav6.wav</code>听起来几乎没有差别。</p><h5 id="效率与进度条"><a href="#效率与进度条" class="headerlink" title="效率与进度条"></a>效率与进度条</h5><p>如果输出的是老师准备的<code>youjianchuiyan.wav</code>（时长：3分15秒），那么处理时长会有点长（2分半左右）。因为运行效率不高，所以为了更加直观查看到处理的过程，我采用<code>alive_bar</code>库对编码、解码、转换为字节流的部分添加上了进度条，这在编解码与结果展示部分也有体现。</p><img src="https://z4a.net/images/2023/05/05/youjian_en_de.png" alt="image-20230505190307758" style="zoom: 67%;" /><p>这是因为编码函数<code>linear2alaw</code>与解码函数<code>alaw2linear</code>使用的是for循环对值进行一个个的处理，因此处理效率较为低下。但是编码与解码的过程可以完美的实现，且可以满足大部分音频的G711A律压扩的要求。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号位掩码</span></span><br><span class="line">SIGN_BIT = <span class="number">128</span></span><br><span class="line"><span class="comment"># 量化位掩码</span></span><br><span class="line">QUANT_MASK = <span class="number">15</span></span><br><span class="line"><span class="comment"># 段偏移码</span></span><br><span class="line">SEG_SHIFT = <span class="number">4</span></span><br><span class="line"><span class="comment"># 段掩码</span></span><br><span class="line">SEG_MASK = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编码的划分点</span></span><br><span class="line">seg_aend = [<span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">val, array, size</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在给定数组中查找 val小于等于的元素，并返回索引</span></span><br><span class="line"><span class="string">    :param val: 输入值</span></span><br><span class="line"><span class="string">    :param array: 划分点列表</span></span><br><span class="line"><span class="string">    :param size: 线性段的数目</span></span><br><span class="line"><span class="string">    :return: 返回线性段索引</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        <span class="keyword">if</span> val &lt;= array[i]:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear2alaw</span>(<span class="params">audio_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频数据进行G711A律编码</span></span><br><span class="line"><span class="string">    :param audio_data: 待编码音频数据</span></span><br><span class="line"><span class="string">    :return: 编码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存编码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law encoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(audio_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> pcm_val <span class="keyword">in</span> audio_data:</span><br><span class="line">            <span class="comment"># 右移 3 位相当于除以 8</span></span><br><span class="line">            pcm_val = pcm_val &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置掩码值</span></span><br><span class="line">            <span class="keyword">if</span> pcm_val &gt;= <span class="number">0</span>:</span><br><span class="line">                mask = <span class="number">213</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask = <span class="number">85</span></span><br><span class="line">                pcm_val = -pcm_val - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定pcm_val所属的段</span></span><br><span class="line">            seg = search(pcm_val, seg_aend, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 超出预期线性段范围</span></span><br><span class="line">            <span class="keyword">if</span> seg &gt;= <span class="number">8</span>:</span><br><span class="line">                result.append(<span class="number">127</span> ^ mask)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 计算编码值的高 3 位</span></span><br><span class="line">                aval = seg &lt;&lt; SEG_SHIFT</span><br><span class="line">                <span class="keyword">if</span> seg &lt; <span class="number">2</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; <span class="number">1</span>) &amp; QUANT_MASK</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; seg) &amp; QUANT_MASK</span><br><span class="line">                <span class="comment"># 计算完整 A-law 编码值并添加到result中</span></span><br><span class="line">                result.append(aval ^ mask)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alaw2linear</span>(<span class="params">encode_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    G711 a律解码</span></span><br><span class="line"><span class="string">    :param encode_data: 经过编码的音频数据</span></span><br><span class="line"><span class="string">    :return: 解码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存解码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law decoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(encode_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> a_val <span class="keyword">in</span> encode_data:</span><br><span class="line">            <span class="comment"># 将正负分离</span></span><br><span class="line">            a_val ^= <span class="number">85</span></span><br><span class="line">            <span class="comment"># 计算 t 的低 12 位</span></span><br><span class="line">            t = (a_val &amp; QUANT_MASK) &lt;&lt; <span class="number">4</span></span><br><span class="line">            <span class="comment"># 计算线性段索引</span></span><br><span class="line">            seg = (a_val &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算解码值</span></span><br><span class="line">            <span class="keyword">if</span> seg == <span class="number">0</span>:</span><br><span class="line">                t += <span class="number">8</span></span><br><span class="line">            <span class="keyword">elif</span> seg == <span class="number">1</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">                t &lt;&lt;= seg - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定符号并将结果加入result</span></span><br><span class="line">            <span class="keyword">if</span> a_val &amp; SIGN_BIT:</span><br><span class="line">                result.append(t)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(-t)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_audio</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取音频数据</span></span><br><span class="line"><span class="string">    :param input_path: 音频路径</span></span><br><span class="line"><span class="string">    :return: 读取出的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取音频格式信息</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;音频格式信息：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;声道数：<span class="subst">&#123;nchannels&#125;</span>,样本大小：<span class="subst">&#123;sampwidth&#125;</span> ,采样率：<span class="subst">&#123;framerate&#125;</span> ,采样点数：<span class="subst">&#123;nframes&#125;</span>,&quot;</span></span><br><span class="line">              <span class="string">f&quot;压缩类型：<span class="subst">&#123;comptype&#125;</span>，compname：<span class="subst">&#123;compname&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据不同的sampwidth采取不同的读取策略</span></span><br><span class="line">        <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为1的音频，采取一个一个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int8).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line">        <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为2的音频，采取两个两个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int16).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(audio_data.shape)</span></span><br><span class="line">        <span class="comment"># 如果音频为双声道，需要将其分为左右声道</span></span><br><span class="line">        <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">            left_channel = audio_data[:, <span class="number">0</span>]</span><br><span class="line">            right_channel = audio_data[:, <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 将左右声道数据装入一个list中</span></span><br><span class="line">            left_right_data = [left_channel, right_channel]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_right_data = [audio_data[:, <span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> left_right_data, nchannels, sampwidth, framerate, nframes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_audio</span>(<span class="params">output_path, data, nchannels, sampwidth, framerate, nframes, processbar=<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment"># 将所有通道的数据组合</span></span><br><span class="line">    recovered_audio_data = np.column_stack(<span class="built_in">tuple</span>(data))</span><br><span class="line">    data = recovered_audio_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(sampwidth)</span></span><br><span class="line">    <span class="comment"># 获取进度条的总进度</span></span><br><span class="line">    <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">        processbar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将元组转换为字节流</span></span><br><span class="line">    byte_stream = io.BytesIO()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Audio is being synthesized---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;B&#x27;：无符号整数，将整数转换为一个长度为1字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, sample))</span><br><span class="line">                bar()</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;h&#x27; 表示有符号短整型，将整数转换为一个长度为2字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;h&#x27;</span>, <span class="built_in">int</span>(sample)))</span><br><span class="line">                bar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将字节流写入</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">        <span class="comment"># 设置音频参数</span></span><br><span class="line">        wav_out.setnchannels(nchannels)</span><br><span class="line">        wav_out.setsampwidth(sampwidth)</span><br><span class="line">        wav_out.setframerate(framerate)</span><br><span class="line">        wav_out.setnframes(nframes)</span><br><span class="line">        <span class="comment"># 按照参数将字节流写入</span></span><br><span class="line">        wav_out.writeframes(byte_stream.getvalue())</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---G.711 A-law encoding is done---&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---G.711 A-law decoding is done---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The audio is saved in &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_g711</span>(<span class="params">audio_data, <span class="built_in">type</span>=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频进行编码与解码操作</span></span><br><span class="line"><span class="string">    :param audio_data:待处理的音频数据</span></span><br><span class="line"><span class="string">    :param type:处理类型：1-编码 2-解码</span></span><br><span class="line"><span class="string">    :return:处理后的数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 读取所有通道的音频信息</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> audio_data:</span><br><span class="line">        <span class="comment"># 编码操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">            encoded_channel = linear2alaw(channel)</span><br><span class="line">            data.append(encoded_channel)</span><br><span class="line">        <span class="comment"># 解码操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decoded_channel = alaw2linear(channel)</span><br><span class="line">            data.append(decoded_channel)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 编码</span></span><br><span class="line">    input_path = <span class="string">&quot;./input/wav6.wav&quot;</span></span><br><span class="line">    audio_data, nchannels, sampwidth, framerate, nframes = read_audio(input_path)</span><br><span class="line">    encoded_data = test_g711(audio_data, <span class="built_in">type</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(encoded_data)</span></span><br><span class="line">    save_audio(output_path=<span class="string">&quot;./output/encode_demo.wav&quot;</span>, data=encoded_data, nchannels=nchannels, sampwidth=<span class="number">1</span>,</span><br><span class="line">               framerate=framerate, nframes=nframes)</span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    encode_path = <span class="string">&quot;./output/encode_demo.wav&quot;</span></span><br><span class="line">    audio_data, nchannels, sampwidth, framerate, nframes = read_audio(encode_path)</span><br><span class="line">    decoded_data = test_g711(audio_data, <span class="built_in">type</span>=<span class="number">2</span>)</span><br><span class="line">    save_audio(output_path=<span class="string">&quot;./output/decode_demo.wav&quot;</span>, data=decoded_data, nchannels=nchannels, sampwidth=<span class="number">2</span>,</span><br><span class="line">               framerate=framerate, nframes=nframes)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 音视频信号处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 音视频信号处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器视觉-生成高斯金字塔</title>
      <link href="/2023/04/23/ji-qi-shi-jue-sheng-cheng-gao-si-jin-zi-ta/"/>
      <url>/2023/04/23/ji-qi-shi-jue-sheng-cheng-gao-si-jin-zi-ta/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机器视觉是本学期的专业课，上了几节课感觉和数字图像处理有很多知识点是相同的，毕竟机器视觉方面的研究底子都很厚，硬件软件方面都有涉及，实验一就是相机的几何标定，获得相机的内部参数什么的，虽然完成了，但事后总感觉有点意义不明，毕竟课堂上学到的东西一点没用到，以后也不需要这样测定几何参数。还在课堂上得知神经网络的小趣闻，那说实话，科学界普遍不看好神经网络也不是没有原因，这东西本质就是“映射”，但是没有什么理论基础，没人知道为什么会这样，出乎意料就是效果不错，在识别领域反超了传统计算机视觉。但是由于不清楚底层原理，整个模型出来了就不能再改，改了就得重新训练，创新基本就是几个构成部分增删重组，给人的感觉就是碰运气，时间成本相当高。相反的，机器视觉在基础研究领域有着深厚的根基，所以相对有迹可循。</p><p>本次实验是生成图像的高斯金字塔，本质也就是生成在不同远近程度下的缩略图。本实验运用到<code>OpenCV</code>、<code>Matplotlib</code>和<code>numpy</code>三个库，但不会直接调用<code>OpenCV</code>中的<code>pyrDown</code>函数，而是尽量从原理出发进行编程实现。</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><p>高斯滤波器是一种线性平滑卷积滤波器，通常用于图像处理中的平滑滤波操作。该滤波器将每个像素点周围的像素点按照权重进行平均，用以实现图像的平滑效果。</p><p>高斯滤波器的核心思想是对图像进行加权平均处理，在这个过程中使用高斯函数来确定权重值。高斯函数是一种常见的连续分布函数，其形式为:</p><div align="center">    <svg xmlns="http://www.w3.org/2000/svg" width="23.348ex" height="5.94ex" viewBox="0 -1405.5 10319.8 2625.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-104-TEX-I-1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path><path id="MJX-104-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-104-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-104-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-104-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-104-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-104-TEX-SO-221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path><path id="MJX-104-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-104-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-104-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D43A"></use></g><g data-mml-node="mo" transform="translate(786, 0)"><use xlink:href="#MJX-104-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1175, 0)"><use xlink:href="#MJX-104-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1747, 0)"><use xlink:href="#MJX-104-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2413.8, 0)"><use xlink:href="#MJX-104-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3469.6, 0)"><g data-mml-node="mn" transform="translate(2003, 676)"><use xlink:href="#MJX-104-TEX-N-31"></use></g><g data-mml-node="mrow" transform="translate(220, -962.5)"><g data-mml-node="mo"><use xlink:href="#MJX-104-TEX-N-28"></use></g><g data-mml-node="msqrt" transform="translate(389, 0)"><g transform="translate(1020, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-104-TEX-N-32"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">π</text></g></g></g><g data-mml-node="mo" transform="translate(0, 92.5)"><use xlink:href="#MJX-104-TEX-SO-221A"></use></g><rect width="1384" height="60" x="1020" y="882.5"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2793, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">σ</text></g></g><g data-mml-node="mo" transform="translate(3677, 0)"><use xlink:href="#MJX-104-TEX-N-29"></use></g></g><rect width="4266" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(7975.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" transform="translate(466, 612.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-104-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="msup" transform="translate(507.1, 394) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 363)"><use xlink:href="#MJX-104-TEX-N-32"></use></g></g><g data-mml-node="mrow" transform="translate(220, -568.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-104-TEX-N-32"></use></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">σ</text></g></g><g data-mml-node="mn" transform="translate(884, 364)"><use xlink:href="#MJX-104-TEX-N-32"></use></g></g></g><rect width="1567.5" height="60" x="120" y="220"></rect></g></g></g></g></g></svg></div><p>其中，x表示距离中心像素的偏移量，σ表示高斯函数的标准差。应用高斯函数可以得到一个呈钟形的权重函数，并且越靠近中心点的权重越高，越远离中心点的权重越低。</p><p>在高斯滤波中，我们采用一个大小为<code>n*n</code>的滤波器核对图像进行卷积操作。核中的每项权重使用高斯函数计算而成，因此每个像素点都会受到周围像素点的影响。中心点的权重最大，越靠近中心点的像素的权重越高，而越靠远离中心点的像素的权重越低。通过这种方式，我们就能够非常有效地去除图像中的噪声、平滑图像等。</p><h3 id="高斯图像金字塔"><a href="#高斯图像金字塔" class="headerlink" title="高斯图像金字塔"></a>高斯图像金字塔</h3><p>图像高斯金字塔是一种在图像处理中常用的方法，用于对图像进行多尺度分解和降采样。该方法通过对图像进行平滑和下采样操作，生成图像的不同分辨率的版本，从而实现多尺度图像处理。</p><p>生成过程为：</p><ol><li>首先将原图像作为最底层图像 level0（高斯金字塔的第0层）</li><li>利用高斯核对其进行卷积</li><li>对卷积后的图像进行下采样（去除偶数行和列）得到上一层图像G1</li><li>将此图像作为输入，重复2与3的操作得到更上一层的图像，反复迭代多次</li><li>最后形成形成一个金字塔形的图像数据结构，即高斯金字塔。</li></ol><img src="https://z4a.net/images/2023/04/23/guass_pyramid.jpg" alt="高斯金字塔" style="zoom:80%;" /><h2 id="算法实现及结果分析"><a href="#算法实现及结果分析" class="headerlink" title="算法实现及结果分析"></a>算法实现及结果分析</h2><h3 id="高斯滤波函数"><a href="#高斯滤波函数" class="headerlink" title="高斯滤波函数"></a>高斯滤波函数</h3><p>本次实验我采用Python语言，素材为冈萨雷斯图片素材，为实验方便裁剪为正方体。</p><img src="https://z4a.net/images/2023/04/23/input.png" alt="image-20230423145614779" style="zoom:80%;" /><p>本实验运用到<code>OpenCV</code>、<code>Matplotlib</code>和<code>numpy</code>三个库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>根据高斯滤波的原理编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gaussian_blur</span>(<span class="params">img, K_size=<span class="number">3</span>, sigma=<span class="number">1.3</span></span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    高斯滤波器 </span></span><br><span class="line"><span class="string">    :param img: 输入图像 </span></span><br><span class="line"><span class="string">    :param K_size: 核函数大小 </span></span><br><span class="line"><span class="string">    :param sigma: σ </span></span><br><span class="line"><span class="string">    :return: 滤波后的图像 </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>  </span><br><span class="line">    H, W, C = img.shape  </span><br><span class="line">    <span class="comment"># Zero padding  </span></span><br><span class="line">    pad = K_size // <span class="number">2</span>  </span><br><span class="line">    <span class="comment"># 黑边填充后会出现大黑边  </span></span><br><span class="line">    <span class="comment"># out = np.pad(img, ((pad, pad), (pad, pad), (0, 0)),&#x27;constant&#x27;, constant_values=0)  </span></span><br><span class="line">    <span class="comment"># 用图像边缘像素进行填充  </span></span><br><span class="line">    out = cv2.copyMakeBorder(img, pad, pad, pad, pad, borderType=cv2.BORDER_REPLICATE)  </span><br><span class="line">    <span class="comment"># 创建和函数  </span></span><br><span class="line">    K = np.zeros((K_size, K_size), dtype=<span class="built_in">float</span>)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(-pad, -pad + K_size):  </span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(-pad, -pad + K_size):  </span><br><span class="line">            K[y + pad, x + pad] = np.exp(-(x ** <span class="number">2</span> + y ** <span class="number">2</span>) / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))  </span><br><span class="line">    K /= (<span class="number">2</span> * np.pi * sigma * sigma)  </span><br><span class="line">    K /= K.<span class="built_in">sum</span>()  </span><br><span class="line">    tmp = out.copy()  </span><br><span class="line">    <span class="comment"># 滤波  </span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(H):  </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(W):  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(C):  </span><br><span class="line">                out[pad + y, pad + x, c] = np.<span class="built_in">sum</span>(K * tmp[y: y + K_size, x: x + K_size, c])  </span><br><span class="line">    <span class="comment"># 将数值转化为RGB限制范围  </span></span><br><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)  </span><br><span class="line">    <span class="comment"># 转化格式：unit8  </span></span><br><span class="line">    out = out[pad: pad + H, pad: pad + W].astype(<span class="string">&quot;uint8&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> out  </span><br></pre></td></tr></table></figure><p>这边有一个注意点，在滤波之前的，为了减小边缘处像素对计算的影响，一般来说我们需要给图像填充边缘，边缘大小一般为(模板大小&#x2F;&#x2F; 2)。这时候有两种方案填充方案。第一种方案是采用常数填充，第二种方案是直接采用图像边缘像素填充。我选择第二种方案，具体原因在[测试与结果分析](# 测试与结果分析)部分说明。 </p><p>使用以下代码测试滤波效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高斯滤波 </span></span><br><span class="line">GaussianBlur_imag1 = gaussian_blur(img, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">GaussianBlur_imag2 = gaussian_blur(img, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">GaussianBlur_imag3 = gaussian_blur(img, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">title_list = [<span class="string">&quot;Original&quot;</span>, <span class="string">&quot;size=(3,3)\n σ=1&quot;</span>, <span class="string">&quot;size=(5,5)\n σ=1&quot;</span>, <span class="string">&quot;size=(5,5)\n σ=3&quot;</span>]</span><br><span class="line">img_list = [img, GaussianBlur_imag1, GaussianBlur_imag2, GaussianBlur_imag3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像 </span></span><br><span class="line">plt.figure(dpi=<span class="number">100</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i)</span><br><span class="line">    plt.title(title_list[i - <span class="number">1</span>])</span><br><span class="line">    plt.imshow(img_list[i - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>高斯滤波器滤波效果如下所示：</p><img src="https://z4a.net/images/2023/04/23/guass_blur.png" alt="image-20230423145655763" style="zoom:80%;" /><p>从结果可以看出，平滑效果随着<code>kernel</code>与<code>σ</code>的增大而增强。高斯滤波后有明显的模糊现象。</p><h3 id="生成高斯金字塔"><a href="#生成高斯金字塔" class="headerlink" title="生成高斯金字塔"></a>生成高斯金字塔</h3><p>图像高斯金字塔有两个过程，一是向下采样，二是高斯滤波。</p><p>向下采样本质就是缩小图像尺寸来达到降低分辨率的目的，以生成图像的缩略图。缩小的过程可以采用<code>OpenCV</code>自带的<code>resize</code>函数来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">img, scale=<span class="number">0.5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    下采样 </span></span><br><span class="line"><span class="string">    :param img: 输入图像 </span></span><br><span class="line"><span class="string">    :param scale: 缩放比例，默认为0.5 </span></span><br><span class="line"><span class="string">    :return: 下采样后的图像 </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w = img.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    new_h = <span class="built_in">int</span>(h * scale)</span><br><span class="line">    new_w = <span class="built_in">int</span>(w * scale)</span><br><span class="line">    <span class="comment"># 采用双线性的方法 </span></span><br><span class="line">    result = cv2.resize(img, (new_h, new_w), interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在更改大小时，插值方式我采用了最常用且效果不错的双线性插值。<strong>默认按照缩放倍率0.5进行缩放</strong>。</p><p>在高斯滤波和下采样实现的基础上，可以按照原理实现高斯金字塔函数的编写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pyramid</span>(<span class="params">imag, floors, guass_kernel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    生成图像高斯金字塔 </span></span><br><span class="line"><span class="string">    :param imag: 输入图像 </span></span><br><span class="line"><span class="string">    :param floors: 输入高斯金字塔层数 </span></span><br><span class="line"><span class="string">    :param guass_kernel: 高斯滤波核大小 </span></span><br><span class="line"><span class="string">    :return: None </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 打印当前金字塔层数 </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total Gaussian pyramid <span class="subst">&#123;floors&#125;</span> levels&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> floors == <span class="number">1</span>:</span><br><span class="line">        plt.figure(dpi=<span class="number">150</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">        <span class="comment"># 得到第零层 </span></span><br><span class="line">        plt.title(<span class="string">&quot;Gaussian pyramid\n 0 level&quot;</span>)</span><br><span class="line">        plt.imshow(img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y = factor(floors)[<span class="number">0</span>:]</span><br><span class="line">        <span class="comment"># 保持x&gt;y </span></span><br><span class="line">        x, y = swap(x, y)</span><br><span class="line">        <span class="comment"># 打印布局大小 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Sub-map layout: row-<span class="subst">&#123;x&#125;</span> column-<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 绘制图像 </span></span><br><span class="line">        plt.figure(dpi=<span class="number">150</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">        plt.subplot(x, y, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 得到第零层  </span></span><br><span class="line">        plt.title(<span class="string">&quot;Gaussian pyramid\n 0 level&quot;</span>)</span><br><span class="line">        plt.imshow(img)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, floors + <span class="number">1</span>):</span><br><span class="line">            imag = downsample(imag)</span><br><span class="line">            imag = gaussian_blur(imag, K_size=guass_kernel, sigma=<span class="number">1.3</span>)</span><br><span class="line">            plt.subplot(x, y, i)</span><br><span class="line">            plt.title(<span class="string">f&quot;Gaussian pyramid\n <span class="subst">&#123;i - <span class="number">1</span>&#125;</span> level&quot;</span>)</span><br><span class="line">            plt.imshow(imag)</span><br><span class="line">        <span class="comment"># 设置子图间的水平和垂直间距 </span></span><br><span class="line">        plt.subplots_adjust(wspace=<span class="number">0.5</span>, hspace=<span class="number">0.35</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Image created successfully&quot;</span>)</span><br></pre></td></tr></table></figure><p>由原图像作为高斯金字塔的第0层，之后的层数按照采样和滤波的过程循环进行。<strong>需要注意的是，因为下采样是按照0.5倍率进行缩放，为了避免报错，因此输入图像最好为正方形尺寸</strong>。在代码第22行出现了一个名为<code>factor()</code>的函数，下面我们会讲到这个函数的作用。</p><h3 id="输出图像排布设置"><a href="#输出图像排布设置" class="headerlink" title="输出图像排布设置"></a>输出图像排布设置</h3><p>为了更好展示每次缩放后的图像细节，我采用<code>matplotlib</code>对图像进行展示。但是根据使用者每次输入的floors的不同，所生成的子图数量是不一样的。举几个例子：</p><ul><li>输入5时，排布可以为<code>subplot(1,5,i)</code>或者<code>subplot(5,1,i)</code></li><li>输入8时，排布可以为<code>subplot(2,4,i)</code>或者<code>subplot(4,2,i)</code></li><li>输入6时，排布可以为<code>subplot(6,1,i)</code>、<code>subplot(1,6,i)</code>、<code>subplot(2,3,i)</code>、<code>subplot(3,2,i)</code></li></ul><p>输出图的数量总是随着输入在改变，这时候就需要考虑如何排布。</p><p>最为简单的思路就是进行因式分解，而且需要保证行数大于列数，这样输出的图像更加美观。按照分析编写出以下函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得子图的排布</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据获得子图排布</span></span><br><span class="line"><span class="string">    :param num: 金字塔层数</span></span><br><span class="line"><span class="string">    :return: 子图排布</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">        temp = <span class="built_in">int</span>(num / i)</span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= <span class="number">1</span>) &amp; (temp * i == num):</span><br><span class="line">            list1.append(i)</span><br><span class="line">            list1.append(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># list1.append(1) if len(list1) == 1 else None</span></span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><p>输入示例：</p><ul><li>输入6：[2,3]</li><li>输入5：[5,1]</li></ul><p>假设输出结果为[a,b]，那么根据示例1，很可能会出现<code>a&lt;b</code>的情况，<strong>这样就会出现行数大于列数，这样排布是不美观的</strong>，所以我们需要在设当场合将他们交换，使之在任何情况都保持<code>a&gt;b</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">a, b</span>): <span class="keyword">return</span> (b, a) <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> (a, b)</span><br></pre></td></tr></table></figure><h3 id="测试与结果分析"><a href="#测试与结果分析" class="headerlink" title="测试与结果分析"></a>测试与结果分析</h3><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv2.imread(<span class="string">&quot;./input/test.png&quot;</span>)</span><br><span class="line">    floors = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter the floors of the pyramid\n（The input number is between 1 and 8）：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> (floors &lt; <span class="number">1</span>) | (floors &gt; <span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The floors must be between 1 and 8 &quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    pyramid(img, floors=floors, guass_kernel=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>当<code>floors=8</code>时，得到的图像高斯金字塔每层图像和输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/floor8.png" style="zoom: 50%;" /><p>当<code>floors=5</code>时，图像与输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/floor5.png" alt="image-20230423151858533" style="zoom:50%;" /><p>可以看到生成的结果没有出现很大的差错，排布的结果也是比较美观的，当然不好的地方就是能看到非常明显的白边，这是由于<code>figsize</code>的限定大小所决定的，因为<code>figsize</code>无法根据<code>floors</code>的变换自适应图像(典型的就是标题重叠)，尝试使用<code>subplots_adjust</code>调整子图间距也不是很好，迫不得已使用了<code>figsize=(12,8)</code>的大小设定。</p><p>有一个注意点，在高斯滤波时，有两种填充方案。</p><ul><li>第一种：直接用常数0进行填充。</li><li>第二种：拿图像的边缘像素进行填充。</li></ul><p>如果采用第一种方案进行填充，可以达到平滑图像边缘像素的目的，但是在生成高斯金字塔这个需要多次平滑的过程中，很容易出现图像黑边的情况，直接影响了高斯金字塔的生成效果，因此不能使用这种方案。</p><p>展示一下用第一种方案的<code>floors=8</code>的输出结果：</p><img src="https://z4a.net/images/2023/04/23/floor8_black.png" alt="image-20230423155735686" style="zoom:80%;" /><p>可以看到黑白的影响随着金字塔层数的增加是逐渐加剧的,第7层甚至出现完全黑图的情况，这严重影响了生成的结果。因此最终我选择第二种填充方案。</p><h3 id="金字塔效果"><a href="#金字塔效果" class="headerlink" title="金字塔效果"></a>金字塔效果</h3><p>因为老师想要我们观察图像的细节变化，所以我采用了<code>Matplotlib</code>一张一张拼接展示，为了美观，自己也按照老师课件上的金字塔效果编写了一个程序，总体的处理流程还是一样，只是多了拼接图像的过程，这次就直接使用<code>pyrDown</code>进行实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./input/test.png&quot;</span>)</span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Original: width-<span class="subst">&#123;img.shape[<span class="number">0</span>]&#125;</span> height-<span class="subst">&#123;img.shape[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Extended_Image</span>(<span class="params">img1, img2, model=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> model == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> img1.shape[<span class="number">1</span>] &lt; img2.shape[<span class="number">1</span>]:</span><br><span class="line">            temp = img1.copy()</span><br><span class="line">            img1 = img2.copy()</span><br><span class="line">            img2 = temp</span><br><span class="line"></span><br><span class="line">        add_height = img1.shape[<span class="number">0</span>] - img2.shape[<span class="number">0</span>]</span><br><span class="line">        add_img = np.zeros((add_height, img2.shape[<span class="number">1</span>], <span class="number">3</span>), np.uint8) + <span class="number">255</span></span><br><span class="line">        result = np.vstack((img2, add_img))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> img1.shape[<span class="number">0</span>] &lt; img2.shape[<span class="number">0</span>]:</span><br><span class="line">            temp = img1.copy()</span><br><span class="line">            img1 = img2.copy()</span><br><span class="line">            img2 = temp</span><br><span class="line">        add_width = img1.shape[<span class="number">1</span>] - img2.shape[<span class="number">1</span>]</span><br><span class="line">        add_img = np.zeros((img2.shape[<span class="number">0</span>], add_width, <span class="number">3</span>), np.uint8) + <span class="number">255</span></span><br><span class="line">        result = np.hstack((img2, add_img))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">img, scale=<span class="number">2</span></span>):</span><br><span class="line">    h, w = img.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    new_h = <span class="built_in">int</span>(h / scale)</span><br><span class="line">    new_w = <span class="built_in">int</span>(w / scale)</span><br><span class="line">    result = cv2.resize(img, (new_h, new_w), interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_guass</span>(<span class="params">img, kernel=(<span class="params"><span class="number">3</span>, <span class="number">3</span></span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> cv2.GaussianBlur(img, kernel, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">floors = <span class="built_in">int</span>(<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter the floors of the pyramid：&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> floors == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前输出的金字塔的层数为：<span class="subst">&#123;floors&#125;</span>&quot;</span>)</span><br><span class="line">    result = init_guass(img, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> floors &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;floors只能为大于0的整数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> floors &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total Gaussian pyramid <span class="subst">&#123;floors&#125;</span> levels&quot;</span>)</span><br><span class="line">    img_1 = cv2.pyrDown(img)</span><br><span class="line">    result = init_guass(img_1, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    img_1 = result.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(floors - <span class="number">1</span>):</span><br><span class="line">        img_2 = downsample(img_1)</span><br><span class="line">        img_2 = init_guass(img_2, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">        temp_img = Extended_Image(img1=result, img2=img_2, model=<span class="number">2</span>)</span><br><span class="line">        result = np.vstack((result, temp_img))</span><br><span class="line">        img_1 = img_2.copy()</span><br><span class="line"></span><br><span class="line">    temp_img = Extended_Image(img1=img, img2=result, model=<span class="number">1</span>)</span><br><span class="line">    result = np.hstack((img, temp_img))</span><br><span class="line"></span><br><span class="line">plt.figure(dpi=<span class="number">150</span>)</span><br><span class="line">plt.title(<span class="string">f&quot;Gaussian pyramid\n(floors:<span class="subst">&#123;floors&#125;</span>)&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.imshow(result)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>当输入<code>floors=8</code>时，输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/pyramid.png" alt="image-20230423160056789" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 机器视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Mermaid绘图</title>
      <link href="/2023/04/18/shi-yong-mermaid-hui-tu/"/>
      <url>/2023/04/18/shi-yong-mermaid-hui-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在B站给我推荐了一个绘制流程图的视频，其中提到了开源项目terrastruct，本来想尝试来着，结果评论区居然一直在推荐使用mermaid与xmind（哭笑）。我记得Typora是支持mermaid的，只是我一直没有绘图需求来着，看评论区说语法简单，想着以后写文章如果用到，那就可以直接使用mermaid绘制一些图像，省掉了上传图像的麻烦，于是就有了学习mermaid绘图的想法。</p><p>看了下官方文档，感觉自己常用到的基本就只有三种图：流程图、饼图、时间轴。</p><blockquote><p>官方文档:<a href="https://mermaid.js.org/syntax/flowchart.html">Flowcharts Syntax | Mermaid</a></p></blockquote><h2 id="FlowChart（流程图）"><a href="#FlowChart（流程图）" class="headerlink" title="FlowChart（流程图）"></a>FlowChart（流程图）</h2><p>关键字：<code>flowchart</code></p><h3 id="图的方向"><a href="#图的方向" class="headerlink" title="图的方向"></a>图的方向</h3><ul><li>TB - top to buttom</li><li>TD - top-down</li><li>BT - buttom to top</li><li>RL - right to left</li><li>LR - left to right</li></ul><p>例子1 TB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">a --&gt; b &amp; c --&gt; d</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBa --&gt; b &amp; c --&gt; d  </pre></div><p>例子2 LR：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">a --&gt; b &amp; c --&gt; d</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa --&gt; b &amp; c --&gt; d  </pre></div><h3 id="图的样式"><a href="#图的样式" class="headerlink" title="图的样式"></a>图的样式</h3><ul><li>round edges - <code>()</code></li><li>shaped node(胶囊) - <code>([])</code></li><li>subroutine shape - <code>[[]]</code></li><li>cyclinderical shape(圆柱) - <code>[()]</code></li><li>cicle - <code>(())</code></li><li>asymmetric shape(旗帜) - <code>&gt;]</code></li><li>rhombus(菱形) - <code>&#123;&#125;</code> </li><li>hexagon(六边形) - <code>&#123;&#123;&#125;&#125;</code></li><li>parallelogram(平行四边形) - <code>[//]</code> <code>[\\]</code></li><li>traoezoid(梯形) - <code>[/\]</code> <code>[\/]</code></li><li>double circle - <code>((()))</code></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">A([one]) --&gt; B&#123;&#123;two&#125;&#125; &amp; c[(three)] --&gt; d[/hello/]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBA([one]) --&gt; B &amp; c[(three)] --&gt; d[&#x2F;hello&#x2F;]  </pre></div><h3 id="连线样式"><a href="#连线样式" class="headerlink" title="连线样式"></a>连线样式</h3><ul><li>arrow head - <code>--&gt;</code></li><li>open link - <code>---</code></li><li>text on links - <code>--This is a text!--</code> <code>---|This is the text|</code></li><li>dotted links - <code>-.-&gt;</code></li><li>thick link - <code>==&gt;</code></li><li>invisible link - <code>~~~</code></li><li>new arrow types - <code>--o</code> <code>--x</code></li><li>multi directional arrows(双向箭头) - <code>o--o</code> <code>&lt;--&gt;</code> <code>x--x</code></li><li>延长方式 - <code>----&gt;</code></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">a[start] --&gt; b&#123;Is it?&#125;</span><br><span class="line">b --&gt;|Yes| c[OK]</span><br><span class="line">c --&gt; d[Rethink] --&gt; b</span><br><span class="line">b ----&gt;|No| e[End]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBa[start] --&gt; b{Is it?}b --&gt;|Yes| c[OK]c --&gt; d[Rethink] --&gt; bb ----&gt;|No| e[End]  </pre></div><h3 id="特殊符号显示"><a href="#特殊符号显示" class="headerlink" title="特殊符号显示"></a>特殊符号显示</h3><p>用引号包含住内容，一般可以表示括号内容，如果有更加复杂的需求，可以使用<code>:# ;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">a[&quot;This is a text(#3556;)&quot;] --&gt; b[&quot;A dec char:#9829;&quot;]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa[&quot;This is a text(#3556;)&quot;] --&gt; b[&quot;A dec char:#9829;&quot;]  </pre></div><h3 id="多图（Subgraphs）"><a href="#多图（Subgraphs）" class="headerlink" title="多图（Subgraphs）"></a>多图（Subgraphs）</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line">graph definition</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">subgraph one</span><br><span class="line">a1 --&gt; a2</span><br><span class="line">end</span><br><span class="line">subgraph two </span><br><span class="line">b1 --&gt; b2</span><br><span class="line">end</span><br><span class="line">subgraph three</span><br><span class="line">c1 --&gt; c2</span><br><span class="line">end</span><br><span class="line">c1 --&gt; a2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBsubgraph onea1 --&gt; a2endsubgraph two b1 --&gt; b2endsubgraph threec1 --&gt; c2endc1 --&gt; a2  </pre></div><p>多图的情况下可以使用图到图的连接,也可以实现图外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line">    q[&quot;你干嘛&quot;] --&gt; one</span><br><span class="line">    one --&gt; two &amp; e[&quot;哎呦&quot;]</span><br><span class="line">    three --&gt; two</span><br><span class="line">    two --&gt; c2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    q[&quot;你干嘛&quot;] --&gt; one    one --&gt; two &amp; e[&quot;哎呦&quot;]    three --&gt; two    two --&gt; c2  </pre></div><p>也可以用<code>direction</code>来规定子图的方向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">  subgraph TOP</span><br><span class="line">    direction TB</span><br><span class="line">    subgraph B1</span><br><span class="line">        direction RL</span><br><span class="line">        i1 --&gt;f1</span><br><span class="line">    end</span><br><span class="line">    subgraph B2</span><br><span class="line">        direction BT</span><br><span class="line">        i2 --&gt;f2</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">  A --&gt; TOP --&gt; B</span><br><span class="line">  B1 --&gt; B2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 --&gt;f1    end    subgraph B2        direction BT        i2 --&gt;f2    end  end  A --&gt; TOP --&gt; B  B1 --&gt; B2  </pre></div><h3 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h3><p>可以将单击事件绑定到节点，单击可能导致 javascript 回调或将在新的浏览器选项卡中打开的链接。其实就是实现类似按钮的功能，其中回调功能不做概述。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">click 对象 “网址” “注释”</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A--&gt;B</span><br><span class="line">    B--&gt;C</span><br><span class="line">    C--&gt;D</span><br><span class="line">    click A callback &quot;Tooltip for a callback&quot;</span><br><span class="line">    click B &quot;https://www.gcnanmu3125.xyz&quot; &quot;我的博客地址&quot;</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    A--&gt;B    B--&gt;C    C--&gt;D    click A callback &quot;Tooltip for a callback&quot;    click B &quot;https:&#x2F;&#x2F;www.gcnanmu3125.xyz&quot; &quot;我的博客地址&quot;  </pre></div><h3 id="对fontawesome的基本支持"><a href="#对fontawesome的基本支持" class="headerlink" title="对fontawesome的基本支持"></a>对fontawesome的基本支持</h3><p>可以从字体添加图标。这些图标可通过语法 <code>fa:icon</code>类名访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    B[&quot;fab:fa-twitter for peace&quot;]</span><br><span class="line">    B--&gt;C[fa:fa-ban forbidden]</span><br><span class="line">    B--&gt;D(fa:fa-spinner)</span><br><span class="line">    B--&gt;E(A fa:fa-camera-retro perhaps?)</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    B[&quot;fab:fa-twitter for peace&quot;]    B--&gt;C[fa:fa-ban forbidden]    B--&gt;D(fa:fa-spinner)    B--&gt;E(A fa:fa-camera-retro perhaps?)  </pre></div><h2 id="Pie（饼图）"><a href="#Pie（饼图）" class="headerlink" title="Pie（饼图）"></a>Pie（饼图）</h2><p>关键字:<code>pie</code></p><p>属性：</p><ul><li>title</li><li>元素</li><li>元素值（如果不是比例，会根据数量直接生成比例）</li></ul><p>简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pie title Pets adopted by volunteers</span><br><span class="line">    &quot;Dogs&quot; : 386</span><br><span class="line">    &quot;Cats&quot; : 85</span><br><span class="line">    &quot;Rats&quot; : 15</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie title Pets adopted by volunteers    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 15  </pre></div><p>如果想显示数据，可以通过<code>showdata</code>关键字在图例显示具体值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie showData</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  6</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie showData    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  6  </pre></div><h2 id="Timeline（时间轴）"><a href="#Timeline（时间轴）" class="headerlink" title="Timeline（时间轴）"></a>Timeline（时间轴）</h2><p>关键字: <code>timeline</code></p><p>基本写法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timeline </span><br><span class="line">title XXX</span><br><span class="line">&#123;time period&#125; : &#123;event&#125;</span><br></pre></td></tr></table></figure><p>简单演示：</p><blockquote><p>发现Typora只支持到mermaid 9.1.2，所以无法绘制时间轴，因此不展示后续。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">timeline</span><br><span class="line">    title History of Social Media Platform</span><br><span class="line">    2002 : LinkedIn</span><br><span class="line">    2004 : Facebook</span><br><span class="line">         : Google</span><br><span class="line">    2005 : Youtube</span><br><span class="line">    2006 : Twitter</span><br></pre></td></tr></table></figure><h2 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践</h2><p>流程图：<a href="https://blog.csdn.net/cc920095705/article/details/113769741">https://blog.csdn.net/cc920095705/article/details/113769741</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">a[Start] --- b[Your Operation]</span><br><span class="line">b --- c&#123;Yes or No?&#125; ---|Yes| d([End])</span><br><span class="line">a ---|No| c</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDa[Start] --- b[Your Operation]b --- c{Yes or No?} ---|Yes| d([End])a ---|No| c  </pre></div><p>饼图</p><p>数据来源：<a href="http://www.xinhuanet.com/2023-01/17/c_1129292204.htm">国家统计局：2022年居民收入和消费支出情况-新华网 (xinhuanet.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pie showdata</span><br><span class="line">title 2022年居民人均消费基础及构成(单位：元)</span><br><span class="line">&quot;其他用品及服务&quot; : 595</span><br><span class="line">&quot;食品烟酒&quot; : 7481</span><br><span class="line">&quot;衣着&quot; : 1365</span><br><span class="line">&quot;居住&quot; : 5882</span><br><span class="line">&quot;生活用品及服务&quot; : 1432</span><br><span class="line">&quot;交通通信&quot; : 3195</span><br><span class="line">&quot;教育文化娱乐&quot; : 2469</span><br><span class="line">&quot;医疗保健&quot; : 2120</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie showdatatitle 2022年居民人均消费基础及构成(单位：元)&quot;其他用品及服务&quot; : 595&quot;食品烟酒&quot; : 7481&quot;衣着&quot; : 1365&quot;居住&quot; : 5882&quot;生活用品及服务&quot; : 1432&quot;交通通信&quot; : 3195&quot;教育文化娱乐&quot; : 2469&quot;医疗保健&quot; : 2120  </pre></div><p>学习下来感觉使用起来还是很方便的，语法也非常简单，适合简单作图与思路分析的场合，但是大多数软件及网站无法及时跟进Mermaid的更新速度，不像LaTex公式一样随处可用，这一点也制约着它的发展。</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mermaid </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda的基础使用总结</title>
      <link href="/2023/03/25/anaconda-de-ji-chu-shi-yong/"/>
      <url>/2023/03/25/anaconda-de-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个小小的硬盘崩溃，给我带来了相当大的麻烦，重置了系统之后，注册表与c盘除了用户文件夹的东西都没了，导致一些应用根本打不开，也无法被控制面板检测到。这次实验需要写代码，打开VsCode才发现Anaconda也出问题了，没办法，只好重装了:sob:。重装之后，一些设置又差点记不起来了，于是就想着写一篇博客记录一下。</p><p>Conda环境其实就是虚拟环境。如果把Python的包比喻成螺丝刀，扳手等工具，那么虚拟环境就像是把螺丝刀，扳手等工具装起来的容器（如下图）。用虚拟环境的好处是方便处理各种需求不同的开发环境而不会造成臃肿，不需要的时候可以通过直接删除对应的虚拟环境来删除对应的包。对于Python，可以使用<code>virtualenv</code>、<code>virtualenvwrapper</code>和<code>pipenv</code>等包来管理虚拟环境。Conda环境比起安装其他虚拟环境更加方便。</p><img src="https://z4a.net/images/2023/03/25/conda_and_pakages.png" style="zoom:67%;" /><h2 id="Conda基础指令"><a href="#Conda基础指令" class="headerlink" title="Conda基础指令"></a>Conda基础指令</h2><ol><li><p>创建Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -name 环境名 python=版本号</span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n test python=3.7</span><br></pre></td></tr></table></figure><p><code>-n</code>其实是<code>-name</code>的缩写，这边还需要提醒的是，对于网上大部分的项目，你都需要提前注意Python的版本是否合适。截至2023年3月25日为止，Python最高的版本号为<code>Python 3.11.2</code>，<strong>通常来说，我们不会使用最新版本，一方面是最新版本总会出现一些问题，而出了问题你无法在社区中找到解决方法，另一方面就是很多项目都不是基于最新版的Python。如果没有特殊原因，个人推荐使用<code>Python3.7</code></strong></p><img src="https://z4a.net/images/2023/03/25/create_envs.png" style="zoom: 67%;" /></li><li><p>激活（切换）Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>激活了环境之后，你就可以进行查看、安装、删除包等操作。</p><p><img src="https://z4a.net/images/2023/03/25/activate_envs.png"></p></li><li><p>删除Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure><p>尾巴上的<code>--all</code>是环境中所有包的意思。</p><img src="https://z4a.net/images/2023/03/25/remove_envs.png" style="zoom:67%;" /></li><li><p>查看当前的所有的Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_envs_info.png"></p><p>注：Conda自带一个名为<code>base</code>的虚拟环境。</p></li><li><p>修改环境名</p><p>conda没有直接重命名环境的指令，但是它提供了克隆指令，你可以先使用克隆指令克隆将要修改名字的环境到新建的环境中，然后用删除指令删除原有的环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name B --clone A</span><br><span class="line">conda remove --name A --all</span><br></pre></td></tr></table></figure></li></ol><h2 id="包与下载源的切换"><a href="#包与下载源的切换" class="headerlink" title="包与下载源的切换"></a>包与下载源的切换</h2><h3 id="Python包的基础操作"><a href="#Python包的基础操作" class="headerlink" title="Python包的基础操作"></a>Python包的基础操作</h3><p>激活了Conda环境后，我们就可以在环境中对包进行查看、安装、删除等操作。在环境中，我们就可以使用Python自带的<code>pip指令</code>进行下载，pip指令默认的下载地址为:</p><blockquote><p><a href="https://pypi.python.org/simple">https://pypi.python.org/simple</a></p></blockquote><ol><li><p>查看包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></li><li><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名</span><br></pre></td></tr></table></figure><p>下面是一个下载<code>OpenCV</code>的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><ul><li>注：如果你想更换下载源，可以加上<code>-c 链接</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -c 下载源链接 包名</span><br></pre></td></tr></table></figure></li><li><p>删除包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 包名</span><br></pre></td></tr></table></figure></li><li><p>更新指定包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade 包名</span><br></pre></td></tr></table></figure><ul><li>注：这个指令也可以用来更新<code>pip</code>本身：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></li></ol><h3 id="切换下载源"><a href="#切换下载源" class="headerlink" title="切换下载源"></a>切换下载源</h3><p>上面提到了<code>pip指令</code>默认的下载地址，这是个外国网站，国内的访问速度可想而知，有时一个一兆的文件都要30秒，如果像是<code>PyTorch</code>、<code>OpenCV</code>这种包，根本下不动，有时甚至是断开连接。这时候就需要切换下载的地址，推荐使用<strong>清华源、中科大、阿里这三个镜像网站，清华源不是很稳定，优先推荐中科大。</strong></p><p>这里先展示一些下载源：</p><blockquote><p>中科大：</p><p>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/free/">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/">https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</a></p><p>清华源：</p><p>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</a></p></blockquote><ol><li><p>展示所有下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/all_chanels.png"></p></li><li><p>添加下载源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels 镜像源链接</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --append channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>去除镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>删除所有下载源（恢复默认下载源）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>此项操作后，除了<code>default</code>外，所有的后期添加的下载源都将被删除。</p></li><li><p>设置全局默认下载源</p><p>如果你想直接设置一个默认的下载源，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url 下载源</span><br></pre></td></tr></table></figure><img src="https://z4a.net/images/2023/03/25/set_init_config.png" style="zoom: 80%;" /><p>这样的作用是直接改变了<code>pip指令</code>的下载地址，将默认下载地址<code>default</code>换成设置后的下载源，此时进入提示路径（<code>C:\Users\用户名\AppData\Roaming\pip</code>）可以看到一个文件<code>pip.ini</code>,如果要回复默认的下载地址，那么将这个<code>pip.ini</code>文件删除即可。</p><img src="https://z4a.net/images/2023/03/25/install_url.png" style="zoom:67%;" /></li><li><p>从channel中安装包时显示channel的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_chanels.png"></p></li><li><p>演示（方便复制）</p><ul><li>添加中科大镜像源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><ul><li>添加清华源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ol><h2 id="conda-install与pip-install"><a href="#conda-install与pip-install" class="headerlink" title="conda install与pip install"></a>conda install与pip install</h2><p>其实自己在日常使用时有时也使用过<code>conda install 包名</code>,安装后貌似也可以正常使用，这时候我有点好奇<code>conda install</code>与<code>pip install</code>到底有什么区别，巧的是，这个问题官方文档也有解释。</p><blockquote><p>Anaconda | Understanding Conda and Pip: <a href="https://www.anaconda.com/blog/understanding-conda-and-pip">https://www.anaconda.com/blog/understanding-conda-and-pip</a>)</p></blockquote><p>总的来说就是你用哪个安装包都可以正常使用，<strong>但是切忌重复安装相同的包！！</strong></p><p>最明显的区别是，<code>pip</code>是Python专门用来安装其他包的一个下载功能包，**<code>pip</code>只能下载支持Python语言编写的包和源码**，而<code>conda install</code>中可能还有 C 或 C++ 库、R 包或任何其他软件，如<code>mkl cuda</code>这种C、C++写的包；以及在文章开头创建<code>conda环境</code>时，它还可以安装Python环境。</p><p>另外一点，<code>pip</code>进行安装、升级时，他并不会去检查安装列表，即使你装过，他还是会再下载一边，<code>到安装的时候它才会去检查该包是否安装过</code>。而<code>conda</code>是会去检查安装列表的，如果你安装过了，它并不会再给你安装一次。例子就是上面我创建<code>test</code>这个<code>conda环境</code>时，它并没有在帮我把依赖文件下一遍，它检测到我安装过后，直接进行了安装。</p><p>官方最后给出的总结表是：</p><table><thead><tr><th align="left"></th><th align="left">conda</th><th align="left">pip</th></tr></thead><tbody><tr><td align="left">manages</td><td align="left">binaries</td><td align="left">wheel or source</td></tr><tr><td align="left">can require compilers</td><td align="left">no</td><td align="left">yes</td></tr><tr><td align="left">create environment</td><td align="left">yes ,built-in</td><td align="left">Python-only</td></tr><tr><td align="left">dependency checks</td><td align="left">yes</td><td align="left">no</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo与Halo的使用后的感受</title>
      <link href="/2023/03/13/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/"/>
      <url>/2023/03/13/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这已经是我第三次安装Halo博客系统，每次都是出于不同的原因，这边可以先做个总结。</p><table><thead><tr><th>序号</th><th>使用系统</th><th>说明</th><th>搭载</th><th>费用</th></tr></thead><tbody><tr><td>1</td><td>Halo 1.6</td><td>第一个博客网站</td><td>vulter</td><td>￥42</td></tr><tr><td>2</td><td>Halo 2.2</td><td>因为付不起服务器费用，导火索：升级主题导致博客出错</td><td>秋叶云</td><td>￥30</td></tr><tr><td>3</td><td>Hexo  4.3</td><td>出于对Halo  2.2 的不满意以及秋叶云管理层的不靠谱</td><td>Github</td><td>0</td></tr><tr><td>4</td><td>Halo 1.6</td><td>搭载于Github，隐私性不够，数据不安全</td><td>星辰云</td><td>￥28.99</td></tr></tbody></table><p>我使用过Hexo之后，先是感受到了Hexo博客的强大之处，同时也体会道了Halo使用起来的便利性，这也是我为什么选择再次创建一个Halo博客的原因。</p><h2 id="Halo与Hexo的对比"><a href="#Halo与Hexo的对比" class="headerlink" title="Halo与Hexo的对比"></a>Halo与Hexo的对比</h2><p>Halo和Hexo都是非常优秀的博客系统，他们<strong>各有优缺点</strong>。下面我根据我多次搭建的经历来谈谈。</p><h3 id="Hexo-——-高度自由，复杂但强大"><a href="#Hexo-——-高度自由，复杂但强大" class="headerlink" title="Hexo —— 高度自由，复杂但强大"></a>Hexo —— 高度自由，复杂但强大</h3><hr><div align="center"><p><img src="https://z4a.net/images/2023/02/21/Hexo.md.jpg" alt="hexo"></p></div><blockquote><p>Hexo官方文档：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><p>Hexo可以说是很出名的博客系统，它最早发布于2012年，发售至今已达11年，可以说是老前辈了，它可能是最早静态博客系统。<strong>它所有的网页都是静态html文件，这也导致它可以直接在GitHub上进行静态托管，不需要自己租赁服务器（零成本）</strong>，这一点应该是它广泛受到使用的重要原因。</p><blockquote><p>我的Hexo博客：<a href="https://ldm0715.github.io/">https://ldm0715.github.io/</a></p></blockquote><p>由于Hexo的所有页面都是静态页面，因此文章需要在本地写作并生成，最后上传到服务器或者&#x3D;&#x3D;静态托管网站&#x3D;&#x3D;。<strong>当然其余的所有操作也只能在本地进行</strong>，这也导致它没有及时性，<strong>如果储存有博客系统的电脑不在身边，那么你将什么都做不了。</strong></p><p>随着版本的不断更新，Hexo的功能也越来越强大，自定义性与便捷性也越来越高。对于我这种非专业性的使用者来说，我如果想要为我的博客添加一些功能，这时候就可以直接安装相应的&#x3D;&#x3D;插件&#x3D;&#x3D;来实现。可以快捷的更换自己喜欢的&#x3D;&#x3D;主题&#x3D;&#x3D;。通过简单的指令快速创建文章或者网页，通过在YAML中给文章设置各种属性（包括标题、封面、tag、分类等，++这个只要支持MarkDown语法都能用++），<strong>上手难度很低</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YAML的写法：</span><br><span class="line">---</span><br><span class="line">title: Hello Hexo</span><br><span class="line">date: 2023-02-21 11:27:44</span><br><span class="line">tags:</span><br><span class="line">- hello world</span><br><span class="line">- hexo</span><br><span class="line">categories:</span><br><span class="line">- 与Hexo的初见</span><br><span class="line">description: 由于复杂原因搭建起Hexo博客，搭建起来确实有点费力，但是加载速度很快，也不怎么吃性能，各种插件也很自由，感觉不错</span><br><span class="line">cover: https://z4a.net/images/2023/02/21/Hexo.md.jpg</span><br><span class="line">swiper_index: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>由于使用者与开发者越来越多，这就造成Hexo社区的不断壮大。它拥有大量插件与主题，<strong>各种教程和错误记录都非常的详细</strong>，可以少踩很多坑。<strong>如果你不去魔改，后期的几乎不需要维护。</strong></p><blockquote><p>Hexo主题仓库：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><p>对于一些有网页基础的使用者来说，他们可以在Hexo博客系统的基础上修改，得到更加炫酷与个性的网页效果，<strong>个人不是很推荐未学习过网页（CSS，JavaScript）的使用者进行大量魔改，不了解其中的语法规则可能会直接导致博客系统的奔溃，如果你还是想要尝试，建议&#x3D;&#x3D;在修改前进行备份。&#x3D;&#x3D;</strong><br>以上都是++Hexo++的&#x3D;&#x3D;优点&#x3D;&#x3D;，简单总结如下：</p><ol><li>可以进行静态页面托管，实现零成本建站</li><li>可以通过插件增加功能</li><li>社区内容详细，有自己的插件仓库与主题仓库</li><li>支持MarkDown格式，可使用YAML设置文章属性</li><li>自定义性较高</li></ol><p>当然++Hexo++也有&#x3D;&#x3D;缺点&#x3D;&#x3D;，其实上文也有提到过一些，这里就简单列举一下：</p><ol><li>如果文章很多，生成速率让人担忧</li><li>静态搭载于Github时，由于仓库是公开的，数据的安全性没有保障</li><li>部分插件已过时，但它们任然储存在插件仓库中，如果安装可能会导致问题</li><li>一些设置过于繁杂，不利于后期的修改</li><li>无法在线编辑</li></ol><h3 id="Halo-——-实时编辑，封闭但易用"><a href="#Halo-——-实时编辑，封闭但易用" class="headerlink" title="Halo —— 实时编辑，封闭但易用"></a>Halo —— 实时编辑，封闭但易用</h3><hr><div align="center">    <img src="https://z4a.net/images/2023/02/21/halo.png" alt="halo.png" alt="后台展示" style="zoom:85%;" /></div><blockquote><p>Halo官方文档：<a href="https://docs.halo.run/">https://docs.halo.run/</a></p></blockquote><p>Halo是纯Java编写的博客系统，最早发布于2018年，虽然发布事件较晚，但是非常易用，是<strong>相当强大易用的开源建站工具</strong>。</p><p>与Hexo相比，Halo最大的缺点就是社区内容较少。因为发布时间较晚，大家可能都已经习惯使用Hexo，WordPress等建站工具，因此Halo受到的关注较少。社区内容较少，就导致它没有像Hexo一样拥有非常丰富的社区内容，最主观的就是主题较少，而且搜索引擎也搜索不到大量相关内容（当然这个有其他原因，下面会详细说说）。<strong>而且Halo 1.×版本不支持插件，因此可玩性较低</strong>。（++Halo 2.×版本已经开始支持插件系统++）</p><p><strong>虽然在个性化方面Halo没有任何优势，但是Halo最大的优点便在于它的&#x3D;&#x3D;易用性&#x3D;&#x3D;<strong>。 Hexo最让人感觉不便的就是它无法在线编辑，但</strong>Halo完美解决了这一点。</strong></p><p><strong>Halo系统是可以直接在线编辑的，可实时预览</strong>。系统有着一个博客后台，在这里，你可以非常轻松设置与管理博客，而不是Hexo那样需要去配置文件中修改代码！！！</p><div class="box" align="center">            <img src="https://z4a.net/images/2023/03/13/halo.png" alt="halo.png" alt="后台展示" style="zoom:30%;" />          <p>博客后台展示</p></div><div align="center">            <img src="https://z4a.net/images/2023/03/13/f7fe18c1b99caf7fd57e64744c0331b7.png" alt="在线编辑" alt="" style="zoom:50%;" />  <p>在线编辑</p></div><p>另一方面Halo没有Hexo那么方便魔改，**但是Halo本身就携带了博客网站的一些基本网页（如：日志、归档、分类、友链、相册），&#x3D;&#x3D;这对于大部分人来说已经够用了&#x3D;&#x3D;**。</p><div align="center"><img src="https://z4a.net/images/2023/03/13/ae474befa541c22b277ff1c74edf7325.png" alt="页面" border="0" style="zoom:50%;">  <p>页面</p></div><p>前面说到Halo没有丰富的社区内容，这不仅说明Halo的可玩性较低，<strong>这也说明Halo的使用几乎不会遇到技术问题</strong>，后台已经展示出了所有的选项，规避了魔改的同时保证了安全性。</p><h2 id="关于Halo-2-×版本"><a href="#关于Halo-2-×版本" class="headerlink" title="关于Halo 2.×版本"></a>关于Halo 2.×版本</h2><p>截直至我写这篇文章的时候，Halo官方已经发布了2.3版本。在体验过Halo 2.2后，我感受到Halo 2.×的革命性，也看到了它待改进之处，因此我还是退回了Halo 1.6。下面我列出一些Halo 2.2的使用感受：<br>😊 优点：</p><ol><li>官方已开发插件系统</li><li>拥有全新后台，界面更加美观</li><li>文本编辑器增加，可自行选择</li></ol><p>🙃 缺点：</p><ol><li>官方并未开放出了文章以外的其他界面接口</li><li>目前适配Halo 2.×的主题很少，已经适配的也有待完善</li><li>将评论区、大图查看、代码高亮等都拆入插件中，这样反而不方便</li><li>目前系统还有着许多的Bug</li></ol><p>我个人非常不建议现在将数据搬迁至Halo 2.3，体验真的没有比Halo 1.6要好，++<strong>我个人建议等到Halo官方发布Halo 2.5及其以上版本再考虑搬迁问题。</strong>++</p>]]></content>
      
      
      <categories>
          
          <category> Halo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo！</title>
      <link href="/2023/02/21/hexo-bo-ke-da-jian-li-cheng/"/>
      <url>/2023/02/21/hexo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>关于我为什么使用 Hexo，其实还挺戏剧性的，一开始我使用的是 Halo 建站，相当傻瓜式，非常推荐大家使用，各种功能也非常全。但是最近服务器厂商应急把服务器关了，差点导致博客丢死，另一个租用的服务器也快到期了，于是我就产生了对文章存档的想法（虽然确实每几篇文章）, 因为其实当今市面上的开源博客系统其实也蛮多的，常见的有：Hexo，Hexo、Hugo、Typecho、Wordpress 等。其中最著名的就是 Hexo，而且他有个特点就是：可以直接搭建在 github 仓库中。等于不需要服务器就能直接访问，而且甚至非常稳定且终身不丢，于是就想着搭建一个 Hexo 博客作为副站使用。</p><p>本篇文章就谈一谈我建站的过程吧，把一些搭建细节给保留下来，如果有人想要搭建，希望能靠这篇帮到访问的你。更多还是方便日后自己解决问题，本人使用的是 Windows 10，Mac 与 Liunx 系统请另寻其他文章</p><p>关于搭建 Hexo 博客前需要知道的事：</p><ol><li>你需要有一个 github 账号</li><li>你需要大致明白 Markdown 的写法（一些语法）</li><li>Hexo 每个页面都是一个静态的网页</li><li>Hexo 不支持在线编写，只能在本地编写文章后上传</li></ol><blockquote><p>Hexo 官网：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><ol><li>安装<code>Node.js</code></li></ol><blockquote><p>Node.js: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></blockquote><ol start="2"><li>安装<code>git</code></li></ol><blockquote><p>git download for windows: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></blockquote><p> 默认下一步，安装后右键会出现:</p><ul><li>Git GUI Here</li><li>Git Bash Here</li></ul><p>初次使用需要设定用户名及绑定邮箱。</p><ul><li><p>设置用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure></li><li><p>绑定邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 邮箱地址</span><br></pre></td></tr></table></figure><p>这两个设置对于轻度使用的用户来说按照喜好填写就行，不会有什么后续影响。</p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 本身拥有的特点就是离线性，搭建的过程完全依赖于本地，后期就只是编写后上传仓库。所以我们需要先在本地搭建起 Hexo。</p><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><ol><li><p>打开<code>cmd</code>输入以下指令，全局安装<code>Hexo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>安装完全后，使用以下指令验证安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建本地Hexo项目"><a href="#创建本地Hexo项目" class="headerlink" title="创建本地Hexo项目"></a>创建本地Hexo项目</h3><p>在本地新建一个文件夹作为 Hexo 项目的地址。<strong>在项目文件夹得目录下打开 <code>cmd</code>：</strong></p><ol><li><p>初始化Hexo项目（得到博客系统文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexoblog</span><br></pre></td></tr></table></figure><p>初始化完成后会出现项目的基本结构，后续一些博客的基础设置修改根据根目录下的<code>_config.yml</code> 文件来实现。</p></li><li><p>安装npm（已安装可跳过）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>本地启动后的地址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><p>正常来说会出现以下画面:</p><img src="https://s2.loli.net/2023/04/24/1KBJ869HnwVWszf.png" style="zoom: 67%;" /></li></ol><h2 id="修改博客基础设置"><a href="#修改博客基础设置" class="headerlink" title="修改博客基础设置"></a>修改博客基础设置</h2><ol><li><p>site基础设置</p><p>进入Hexo项目文件夹（简称根目录），打开<code>_config.yml</code>（配置文件），找到如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &#x27;&#x27;</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords: &#x27;&#x27;</span><br><span class="line">author: &#x27;&#x27;</span><br><span class="line">language: &#x27;&#x27;</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这就是网站的基础设置项，这里只讲一些基础参数的修改：</p><ul><li>title：网站标题</li><li>subtitle：网站副标题</li><li>description：网站摘要</li><li>author：博主昵称</li><li>language：默认语言，默认是<code>en</code>（default）<ul><li>中文简体：<code>zh-CN</code></li><li>中文繁体为：<code>zh-TW</code></li></ul></li><li>timezone：时区</li></ul></li><li><p>主题修改</p><p>这个在下面[安装博客主题](# 安装博客主题)时再讲。</p></li></ol><h2 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h2><ol><li><p>下载主题文件</p><p>hexo 一开始是 default 主题。如果不满意的话，肯定需要自己更换主题，可以直接到Hexo官方的主题仓库选择。</p><blockquote><p>Hexo-theme：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>下载后的主题放入博客根目录的 themes 文件夹中，或者直接在 themes 文件中使用 git 的命令进行下载。</p></li><li><p>修改博客设置</p><p>修改博客根目录下<code>_config.yml </code>配置文件中的 theme 参数，修改为主题的名字（一般来说，如果出错可以直接去看各主题博主写的设置文章）</p><p>以下以<code>butterfly</code>主题为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>启动博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>可以缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><h2 id="将博客上传到Github或者Gitee"><a href="#将博客上传到Github或者Gitee" class="headerlink" title="将博客上传到Github或者Gitee"></a>将博客上传到Github或者Gitee</h2><p>将 hexo 博客上传到个人的 github 仓库后，可以直接通过仓库名来访问博客，这就等于白嫖了 github 仓库作为服务器，可以零成本搭建博客且文件不会丢失，小代价是有时可能无法正常访问，这时候可以考虑搭建<strong>全站 CDN（Content Delivery Network）提高访问的速度（网上都推荐 jsDelivr）</strong>，当然也不能保证 CDN 不会崩（jsDelivr 貌似崩了半年），所以看个人的需求吧。</p><p>放到 gitee 上也是一个好选择，访问速度有了保障，但是代价是 gitee 可能哪天就不支持静态页面托管了（有先例），<strong>因此还是首先推荐搭建到 github 仓库。</strong></p><h3 id="上传到Github仓库"><a href="#上传到Github仓库" class="headerlink" title="上传到Github仓库"></a>上传到Github仓库</h3><h4 id="生成SSH密匙"><a href="#生成SSH密匙" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>目录打开命令行，输入以下代码生成密匙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; </span><br></pre></td></tr></table></figure><p>其中<code>xxxxx@xxxxx.com</code>输入你GitHub的邮箱，实际上这只是一个名称，不是最关键的。接下来的选项一路回车即可。</p><p>然后到<code>C:\Users\用户名\.ssh</code>，其中之后便会生成<code>id_rsa</code>和<code>id_rsa.pub</code>。其中 SSH 密匙在<code>id_rsa.pub</code>中。</p><p>登陆 github → 点击头像 → setting → SHH and GPG keys → New SSH key 把 id_rsa.pub 复制到其中即可。</p><p>输入一下代码进行确认绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>输入<code>yes</code>后就会收到绑定成功邮件。</p><h4 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p>登陆 github → <code>＋号</code>（头像旁边） → New repository</p><p>仓库名字命名必须为：<code>github用户名.github.io</code>, 然后<strong>将仓库设为Public</strong>，例如本网站的仓库名为：<code>ldm0715.github.io</code></p><h4 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>, 找到<code>deploy</code>, 格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github仓库地址  例如：https://github.com/OliverLoki/OliverLoki.github.io.git </span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h4 id="上传文件到github仓库"><a href="#上传文件到github仓库" class="headerlink" title="上传文件到github仓库"></a>上传文件到github仓库</h4><p>输入上传代码（需要安装插件，详见：[生成和上传页面指令](# 生成与上传页面指令)）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>刷新即可看到仓库中出现了博客文件（<strong>因为网络问题可能会失败，失败就多试几次</strong>）</p><h3 id="上传到Gitee仓库"><a href="#上传到Gitee仓库" class="headerlink" title="上传到Gitee仓库"></a>上传到Gitee仓库</h3><p>上传Gitee与上传Github只有一些不一样，下面只说说不一样的地方，具体流程和上传Github一样。</p><h4 id="生成SSH密匙-1"><a href="#生成SSH密匙-1" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>跟Github不同，我们需要输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/04/24/zIFfHcW1vUj25l4.png" style="zoom:67%;" /><p>输入<code>yes</code>即可。</p><h4 id="创建博客仓库-1"><a href="#创建博客仓库-1" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p>和github创建仓库的要点一样，<strong>要把仓库名设置为</strong><code>gitee用户名</code>，然后初次创建的时候是不能直接设置为<code>Public</code>的，需要在创建了仓库之后去“管理”中更改为”开源“。</p><h4 id="修改博客配置文件-1"><a href="#修改博客配置文件-1" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>在Gitee的仓库中，默认分支不再是main，而是master，因此修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: gitee仓库地址  例如：https://gitee.com/OliverLoki/OliverLoki.gitee.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="上传文件到gitee仓库"><a href="#上传文件到gitee仓库" class="headerlink" title="上传文件到gitee仓库"></a>上传文件到gitee仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="开启静态页面托管服务"><a href="#开启静态页面托管服务" class="headerlink" title="开启静态页面托管服务"></a>开启静态页面托管服务</h4><p>跟Github不同，Gitee没有默认使用静态托管页面，因此我们需要手动开启静态托管页面的功能（<strong>此功能需要实名认证</strong>）</p><img src="https://s2.loli.net/2023/04/24/W3kLSv8N7XQJ2YU.png" style="zoom: 67%;" /><p>之后<strong>勾选强制https</strong>，然后点击更新。</p><img src="https://s2.loli.net/2023/04/24/iEafAcpDy4zHnSe.png" style="zoom:67%;" /><hr><p>（2023.4.23）家人们，谁懂啊，还是老老实实用Github吧。</p><img src="https://s2.loli.net/2023/04/24/raW27ilf3JDOVBG.png" style="zoom:67%;" /><h2 id="Hexo系统基础命令"><a href="#Hexo系统基础命令" class="headerlink" title="Hexo系统基础命令"></a>Hexo系统基础命令</h2><p>建立好博客之后，还需要学会一些 <code>Hexo</code> 的一些日常操作指令，这样才能方面后续使用。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>文章默认生成在<code>.\source\_posts</code>文件夹下，且默认格式为 Markdown</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名字&quot;</span><br></pre></td></tr></table></figure><p>按照路径打开文章后内容如下：</p><p>这种方法不常用，不如直接右键生成<code>.md</code>文件</p><h3 id="生成和上传页面指令"><a href="#生成和上传页面指令" class="headerlink" title="生成和上传页面指令"></a>生成和上传页面指令</h3><p>因为 Hexo 是由一些静态的网页组成的，因此在编写完页面或者文章后，需要手动生成静态网页，也需要手动上传到指定的服务器。</p><p>生成静态页面和上传功能首先需要安装 <code>hexo-deployer-git</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li><p>清除页面缓存（有些设置需要清除缓存之后才能显示）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面（上传页面时才需要这么做）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>上传页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>一键部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g --d</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page “页面名”</span><br></pre></td></tr></table></figure><p>需要注意的是，生成的页面默认在项目的 source 文件夹下 (例如：<code>F:\Hexo\source</code>)，默认生成的网页地址为<code> 你的网址/页面名/</code>，所以页面名要与<code>_config.yml</code>文件中设置的页面名保持一致。</p><p>稍微总结一下<strong>生成的相关操作</strong>：</p><table><thead><tr><th>操作</th><th>路径</th><th>需要知道的</th></tr></thead><tbody><tr><td>hexo new “文章名”</td><td><code>.\source\_posts</code></td><td>这种方法不常用</td></tr><tr><td>hexo new page “页面名”</td><td><code>.\source\页面名</code></td><td>默认生成的网页地址为<code>网址/页面名/</code>，所以页面名要与<code>_config.yml</code> 文件中设置的页面名保持一致。</td></tr></tbody></table><h3 id="hexo三连"><a href="#hexo三连" class="headerlink" title="hexo三连"></a>hexo三连</h3><p>如果你觉得一条条写命令麻烦，你可以使用<code>&amp;&amp;</code>来连接这些命令，在更改了网页之后，我们一般要先清除缓存，生成界面，上传页面，一条一条敲的话很麻烦，这时候你就可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="文章属性快速设置"><a href="#文章属性快速设置" class="headerlink" title="文章属性快速设置"></a>文章属性快速设置</h2><p>文章拥有很多属性，如：标题，摘要，tags，类别等。那么就需要学会如何在 md 文件中编写<code>YAML格式</code>（文章头）让系统识别到这是设置的属性。</p><h3 id="文章基础属性设置"><a href="#文章基础属性设置" class="headerlink" title="文章基础属性设置"></a>文章基础属性设置</h3><p>在 md 文件开头写入如下格式（YAML）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">创建文章时间</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">类别1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">类别2</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">摘要</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">文章封面（图片地址）</span></span><br><span class="line"><span class="attr">top-img:</span> <span class="string">文章顶部图（图片地址）</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">是否开启评论(true</span> <span class="string">or</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>写入后在相应的主题中打开相应设置就能看见这些设置。</p><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>有些人可能会拿博客写日记、账号密码等私密内容，这些内容肯定不能直接公开，最直接的保密方法就是给文章加密（当然会不会给轻松破解就不清楚了）</p><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>加密<code>YAML</code>格式</p><p><code>YAML</code>写法为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">自己设置的密码</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">密码文本框提示</span> <span class="string">例如：您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">错误信息提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">校验失败提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个文章不能被校验</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>加密成功提示</p></li></ol><h3 id="文章置顶（Butterfly主题）"><a href="#文章置顶（Butterfly主题）" class="headerlink" title="文章置顶（Butterfly主题）"></a>文章置顶（Butterfly主题）</h3><p><code>hexo-generator-index </code>从 2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的 <code>front-matter </code>区域里添加 <code>sticky: 1 </code>属性来把这篇文章置顶。<strong>数值越大，置顶的优先级越大。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">sticky:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="添加版权提醒"><a href="#添加版权提醒" class="headerlink" title="添加版权提醒"></a>添加版权提醒</h3><p>自己写的文章有时候不太希望随便给人 copy，这时候就需要添加版权信息提示，一般来说主题都包含这项功能（去主题配置文件打开即可），但有时候我们不一定全局都开启版权声明（比如搬运文章），这时候就需要单独给一些文章添加版权信息。</p><p>可以在<code>YAML</code>中加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请注明来自原作者</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>另外，你可以在主题设置中打开复制附加版权信息，这样或许更有作用。</strong></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>Hexo拥有许多插件，并且有着自己的插件仓库，安装一些实用的插件可以让我们的体验大大提升。</p><blockquote><p>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><p>这个插件可以提供站内文章搜索功能，非常推荐安装</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>那么在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search: path: search.xml;</span><br><span class="line">field: post;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>这个插件能在文章的标题下面显示文章字数</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  date: true # 发布日期</span><br><span class="line">  update: true # 更新日期</span><br><span class="line">  wordCount: true # 文章字数统计</span><br><span class="line">  totalCount: true # 站点总文章字数</span><br><span class="line">  min2read: true # 文章阅读时长</span><br><span class="line">  readCount: true # 文章阅读次数</span><br></pre></td></tr></table></figure></li></ol><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>对于中文使用者来说，文章标题都是中文的，因为 hexo 会默认将文章标题作为网页链接的一部分，这就可能会出现一些不便。例如：</p><blockquote><p>修改前：<a href="http://localhost:4000/2022/11/19/python">http://localhost:4000/2022/11/19/python</a> 编程中遇到的一些问题 &#x2F;</p></blockquote><p><strong>你会发现链接无法正常被识别完整，这可能导致一些场合无法直接点击跳转</strong>，因此网页链接中最好不要出现中文，这时候就可以安装此插件。</p><p>这个插件安装配置好后会生成拼音和”-“来代替连接中的中文</p><blockquote><p>修改后：<a href="http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/">http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</a></p></blockquote><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: &#x27;-&#x27; # default: &#x27;-&#x27;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章加密插件"><a href="#文章加密插件" class="headerlink" title="文章加密插件"></a>文章加密插件</h3><p>顾名思义，可以给文章加密。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>具体可见上文内容[给文章加密](# 给文章加密)</p></li></ol><h3 id="文章隐藏插件"><a href="#文章隐藏插件" class="headerlink" title="文章隐藏插件"></a>文章隐藏插件</h3><p>顾名思义，可以将文章隐藏。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>在文章的<code>YAML</code>中加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h3><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>在博客根目录<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  enable: true</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line"> content:</span><br><span class="line"> content_limit: 140</span><br><span class="line"> content_limit_delim: &#x27; &#x27;</span><br><span class="line"> order_by: -date</span><br><span class="line"> icon: icon.png</span><br><span class="line"> autodiscovery: true</span><br><span class="line"> template:</span><br></pre></td></tr></table></figure><p>其实默认即可，但是如果想改的话建议查看官网：</p><blockquote><p><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p></blockquote></li><li><p>在主题的<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li><li><p>添加（或者修改）social处的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fas fa-rss: 你的博客地址/atom.xml</span><br></pre></td></tr></table></figure></li></ol><p>最终生成效果如下，地址为<code>博客地址 + /atom.xml</code>：</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/21/hello-world/"/>
      <url>/2023/02/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程中遇到的一些问题</title>
      <link href="/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  近期进行Python编程的问题汇总。</p><h2 id="需求文档的生成"><a href="#需求文档的生成" class="headerlink" title="需求文档的生成"></a>需求文档的生成</h2><hr><p>  需求文档，其实就是<code>requirements.txt</code>。</p><p>  对于一个项目来说，要能够运行，需要构建相应的运行环境，运行环境中需要包含项目运行的所有库。对于Python来说，它并没有向下兼容的特性，所以明确项目的运行环境就更加重要。对于同一个库，不同的版本可能会有所差异，因此一个对 项目运行库环境的说明就尤其重要。<code>requirements.txt</code>本质就是包含了项目所需要库的一个详细总结。<br>  生成requirements文件一般来说有两种方法。</p><h3 id="pip-freeze-gt-requirements-txt"><a href="#pip-freeze-gt-requirements-txt" class="headerlink" title="pip freeze &gt; requirements.txt"></a><code>pip freeze &gt; requirements.txt</code></h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><ul><li>按这种方式生成的话<strong>一定要在特定的环境下</strong>。</li><li>如果在命令行中运行指令，默认是在Anaconda（base）的环境下运行，会导致将<strong>base环境中所有的包全部导入</strong>，这样操作明显是错误的。会给后续的操作带来很大的麻烦。</li></ul><div align="center">  <img src="https://z4a.net/images/2022/11/19/requirements1.png" alt="直接在cmd生成" width=600></div><h3 id="pipreqs-encoding-utf8-force"><a href="#pipreqs-encoding-utf8-force" class="headerlink" title="pipreqs . --encoding=utf8 --force"></a><code>pipreqs . --encoding=utf8 --force</code></h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure><ul><li>此命令需要安装<code>pipreqs</code>，安装命令为：<code>pip install pipreqs</code> 。此方法最大的优点就是<strong>在任何情况都能正确导入项目需要的库</strong>，因此非常推荐使用。</li><li>注意–encoding&#x3D;utf8为使用utf8编码，不然可能会报<code>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xae in position 406: illegal multibyte sequence </code>的错误.</li><li><code>--force</code>强制执行， 生成目录下的<code>requirements.txt</code>，存在时会直接覆盖。</li></ul><div align="center">     <img src="https://z4a.net/images/2022/11/19/requirements2.png" alt="直接在cmd生成" width=600></div><h3 id="从requirements中安装相应的库。"><a href="#从requirements中安装相应的库。" class="headerlink" title="从requirements中安装相应的库。"></a>从requirements中安装相应的库。</h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>   这个也是非常常用的一个操作，在运行项目时经常需要通过<code>requirements.txt</code>来安装各种项目依赖库。</p><h2 id="PyInstall打包过于臃肿"><a href="#PyInstall打包过于臃肿" class="headerlink" title="PyInstall打包过于臃肿"></a>PyInstall打包过于臃肿</h2><hr><p>  这个问题其实跟上面<code>pip freeze &gt; requirements.txt</code>生成需求文档的问题一样，需要在特定的虚拟环境中进行打包。如果<strong>直接在命令行输入指令（命令行默认是base环境），就会导致直接将base环境中所有的包都纳入打包范围</strong>，结果生成大小不符合常理的打包文件。</p><h3 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h3><hr><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller1.png" alt="直接在cmd生成" width="500">    <img src="https://z4a.net/images/2022/11/19/pyinstaller2.png" alt="直接在cmd生成" width="500"></div><h3 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h3><hr><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller3.png" alt="直接在cmd生成" width="500">    <br>    <img src="https://z4a.net/images/2022/11/19/pyinstaller4.png" alt="直接在cmd生成" width="500"></div><h2 id="PyCharm连接Jupyter报错"><a href="#PyCharm连接Jupyter报错" class="headerlink" title="PyCharm连接Jupyter报错"></a>PyCharm连接Jupyter报错</h2><hr><p>  虽然VsCode作为代码编辑器足够优秀，但是并没有很好的编写项目的能力。<br>PyCharm其实是做项目更好的选择。但是我的PyCharm运行ipynb文件时会报如下的错误，这个问题真的困扰我很久了。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter5.png" alt="直接在cmd生成" width="600"></div><p>  解决方法今天找到：</p><h3 id="得到jupyter内核所在的路径。"><a href="#得到jupyter内核所在的路径。" class="headerlink" title="得到jupyter内核所在的路径。"></a>得到jupyter内核所在的路径。</h3><hr><p>  在cmd输入<code>jupyter kernelspec list</code>,得到jupyter内核所在的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter.png" alt="直接在cmd生成" width="600"></div>​<h3 id="查看Python编译器的路径是否正确。"><a href="#查看Python编译器的路径是否正确。" class="headerlink" title="查看Python编译器的路径是否正确。"></a>查看Python编译器的路径是否正确。</h3><hr><p>  进入安装内核目录打开<code>kernel.jason</code>文件，查看Python编译器的路径是否正确。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter2.png" alt="直接在cmd生成" width="600"></div><h3 id="修改kernel-jason中内核的路径"><a href="#修改kernel-jason中内核的路径" class="headerlink" title="修改kernel.jason中内核的路径"></a>修改<code>kernel.jason</code>中内核的路径</h3><hr><p>  按照自己能够启动jupyter的Python路径，修改<code>kernel.jason</code>中内核的路径。（基本情况是生成了错误的路径）</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter3.png" alt="直接在cmd生成" width="600"></div><h3 id="重启jupyter"><a href="#重启jupyter" class="headerlink" title="重启jupyter"></a>重启jupyter</h3><hr><h3 id="重启PyChram"><a href="#重启PyChram" class="headerlink" title="重启PyChram"></a>重启PyChram</h3><hr><p>  重启PyChram，问题解决。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter4.png" alt="直接在cmd生成" width="600"></div><blockquote><p>我也是生成了错误的内核路径，不知道啥情况，我连那个文件夹都没有，这个估计是PyCharm的bug，希望日后修复。</p></blockquote><h2 id="PyCharm中OpenCV无法得到提示"><a href="#PyCharm中OpenCV无法得到提示" class="headerlink" title="PyCharm中OpenCV无法得到提示"></a>PyCharm中OpenCV无法得到提示</h2><hr><p>在PyCharm中<code>import cv2</code>后，会出现调用cv2方法时没有任何补全提示，甚至输入<code>cv2.</code>时还会出现未知高亮，但是还是可以正常使用。PyCharm无法提供补全提示，说明PyCharm无法找到对应的索引，这时候就需要去找到cv2包所在的文件路径，然后将它加入到解释器路径中。</p><h3 id="寻找cv2所在路径"><a href="#寻找cv2所在路径" class="headerlink" title="寻找cv2所在路径"></a>寻找cv2所在路径</h3><hr><p>  如果是在conda环境中安装，以我的路径为例：</p><blockquote><p>D:\Anaconda\envs\digital_image\Lib\site-packages\cv2</p></blockquote><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv26a4b7efd79bb3fb0.png" alt="cv2所在路径" width=600></div><p>  如果不是在conda环境中安装，那么此时可以先写入<code>cv2.imread</code>，选中<code>imread</code>后右键，按照“转到→实现”的顺序就可以跳转到<code>_init_.py</code>文件中，鼠标悬停在标签上即可看到路径。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv2.png" alt="查找cv2所在路径" width=600></div><br><blockquote><p>小插曲：其实可以看到我的cv2路径已经被复制到c盘中，所以一开始我本来尝试删除进行错误展示，但是发现删除解释器中的cv2路径后还是能正常进行代码提示，原因就在这里，估计是PyCharm进行了备份。</p></blockquote><h3 id="将路径加入解释器路径中"><a href="#将路径加入解释器路径中" class="headerlink" title="将路径加入解释器路径中"></a>将路径加入解释器路径中</h3><hr><p>  找到路径后，按照“文件→设置→项目→Python解释器”的顺序，找到PyCharm解释器列表，之后的操作如下图所示。</p><div align="center"><img src="https://z4a.net/images/2023/02/08/d37934718875d1edba8d4243137c3b1a.png" alt="Python解释器" width="600"><img src="https://z4a.net/images/2023/02/08/cv22.png" alt="直接在cmd生成" width="600"><img src="https://z4a.net/images/2023/02/08/cv21.png" alt="直接在cmd生成" width="600"></div><h3 id="重启PyCharm"><a href="#重启PyCharm" class="headerlink" title="重启PyCharm"></a>重启PyCharm</h3><hr><p>  操作完成后，<strong>建议重启一下PyCharm</strong>，之后写入<code>import cv2</code>操作后，就可以直接看见代码提示，未知的高亮提示也不见了。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/e280accc813259725a0330982e12968f.png" alt="解决补全问题" width="600"></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyCharm </tag>
            
            <tag> Jupyter </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用whl文件快速安装PyTorch</title>
      <link href="/2022/11/16/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/"/>
      <url>/2022/11/16/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/PyTorch_office.png" alt="PyTorch_office" title="PyTorch主页" width="700"></div><br><blockquote><p>PyTorch官网：<a href="https://pytorch.org/">https://pytorch.org/</a></p></blockquote><p>在Windows环境下，PyTorch的安装由于网络问题，大部分人如果想直接通过官网的指令安装显然是非常困难的。因为torch这个库有2G左右的大小，服务器又在国外，这就出现了下载异常缓慢（能下一天）或者下载容易失败的问题（网络问题导致下载中断）。</p><p><strong>这时候有两种方法：</strong></p><ol><li>使用魔法，改善下载速度。</li><li>使用本地文件安装。</li></ol><p>这个博客主要记录如何使用本地压缩包（.whl）文件快速安装PyTorch。</p><h2 id="明确自己的使用需求"><a href="#明确自己的使用需求" class="headerlink" title="明确自己的使用需求"></a>明确自己的使用需求</h2><p>如果你需要使用GPU进行PyTorch实践，那么你就需要安装带CUDA的版本。如果你只是想要使用CPU进行实践，那么就选择CPU版本进行下载。各有优势，没有高低之分。<br><strong>这里有一些注意点</strong>：</p><ol><li>如果你想要下载CUDA版本的PyTorch，不要通过清华源下载，清华源已经没有CUDA版本的资源，下载多少次都是CPU版本的。</li><li>想使用<strong>GPU实践torch，必须安装NVIDIA CUDA</strong>。</li></ol><h2 id="查看自己的CUDA版本并安装CUDA支持"><a href="#查看自己的CUDA版本并安装CUDA支持" class="headerlink" title="查看自己的CUDA版本并安装CUDA支持"></a>查看自己的CUDA版本并安装CUDA支持</h2><ul><li>对于大多数NVIDIA显卡来说，都是支持CUDA的，<strong>如果你的显卡不支持CUDA，那即使装了CUDA版本，也只能使用CPU进行实践。</strong></li><li><strong>如果你的显卡不支持CUDA，那么建议下载CPU版本。</strong></li></ul><h3 id="查看CUDA版本"><a href="#查看CUDA版本" class="headerlink" title="查看CUDA版本"></a>查看CUDA版本</h3><p>如果下载CUDA版本的PyTorch，此时就需要对应自己电脑所支持的最高CUDA版本，然后同级或者向下兼容选择相应的CUDA安装指令。查看CUDA版本有两种方法。</p><ol><li>通过NVIDIA控制面板查看</li></ol><div align="center">  <img src="https://z4a.net/images/2022/11/16/cuda_1.png" alt="通过控制面板" width="500"><img src="https://z4a.net/images/2022/11/16/cuda_2.png" alt="通过控制面板查看" title="通过控制面板查看" width="500"></div><ol start="2"><li><p>通过指令</p><p>打开命令行，输入<code>nvidia-smi</code>，出现以下界面</p></li></ol><div align="center">   <img src="https://z4a.net/images/2022/11/16/cuda_3.png" alt="通过命令函查看" title="通过命令行查看" width="700"></div><h3 id="安装CUDA支持"><a href="#安装CUDA支持" class="headerlink" title="安装CUDA支持"></a>安装CUDA支持</h3><p>查询到自己电脑的CUDA版本后，你需要安装CUDA支持。</p><blockquote><p>各版本CUDA下载：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p></blockquote><div align="center">     <img src="https://z4a.net/images/2022/11/16/CUDA.png" alt="CUDA安装" title="CUDA安装" width="600"></div><p>建议选择电脑支持的<strong>最高CUDA版本</strong>安装即可。</p><h2 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h2><div align="center">     <img src="https://z4a.net/images/2022/11/16/install.png" alt="安装方式" title="安装方式" width="700"></div><p>如果你是Windows用户，一般情况下，官网提供了两种常用的安装方式：</p><ol><li>pip指令</li><li>Conda指令（需要Anaconda环境）</li></ol><p>这两个指令下载的东西都是一样的，只是安装的方式不同。<strong>建议在Anaconda环境中安装</strong>，方便管理。</p><h2 id="下载离线文件"><a href="#下载离线文件" class="headerlink" title="下载离线文件"></a>下载离线文件</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/whl_list.png" alt="PyTorch_office" title="PyTorch主页" width="400"></div><hr><p>.whl文件，实际就是torch的压缩文件。<br>当我们使用pip进行库的下载时候，会先拉取压缩包请求，然后在本地解压安装。这边有个注意点，如果当前拉取的压缩包已经存在，则会直接解压。所以我们提前准备好torch的压缩包，当使用pip指令下载时，会直接拉取本地的压缩包，跳过下载安装包的过程。从本地文件安装的原理就是如此。</p><ul><li>当然还有一个重要前提，单独下载.whl文件真的非常快。</li></ul><p>下载文件之前需要了解一些概念，以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>这个文件名为例。</p><blockquote><p>torch-1.12.0：代表torch版本</p><p>cu116：代表支持CUDA11.6</p><p>cp37：代表运行环境为Python3.7</p><p>win：指Windows平台</p><p>amd64：代表64位操作系统</p></blockquote><p>了解这些之后就可以按自己的需求下载自己需要的.whl压缩文件。</p><blockquote><p>下载地址：<a href="https://download.pytorch.org/whl/torch/">https://download.pytorch.org/whl/torch/</a></p></blockquote><ul><li>小提示：善用快捷搜索，Ctrl+F</li><li>下载后的文件最好放入<code>C:\Users\用户名</code>路径下，方便后续安装。</li></ul><h2 id="使用pip指令安装压缩文件"><a href="#使用pip指令安装压缩文件" class="headerlink" title="使用pip指令安装压缩文件"></a>使用pip指令安装压缩文件</h2><p>以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>为例。</p><p>进入要安装的环境命令行，进入.whl文件所在的路径，运行指令<code>pip install torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl </code> </p><p>如果没出现下载，就会自动显示要求满足，然后压缩安装。如果还是下载了，请自行关闭命令行再次尝试一遍。</p><div align="center">  <img src="https://z4a.net/images/2022/11/16/install_1.png" alt="安装压缩包" title="安装压缩包" width="600"></div><p>安装torch完成后，打开官网再次运行安装命令安装其他相适应的库即可，此时就会直接跳过torch的安装了。</p><div align="center"><img src="https://z4a.net/images/2022/11/16/install_2.png" alt="安装链接" title="安装链接" width="500"><img src="https://z4a.net/images/2022/11/16/install_3.png" alt="安装成功" title="安装成功" width="500"></div><ul><li>注意.whl文件与pip安装命令之间的对应关系。</li><li>如果输入pip您发现还在下载torch，那么您下载的.whl不满足对应要求，请按照pip出现的版本重新下载.whl文件。</li></ul><h2 id="一些检查指令"><a href="#一些检查指令" class="headerlink" title="一些检查指令"></a>一些检查指令</h2><ul><li>返回当前设备索引<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.current_device()</span><br></pre></td></tr></table></figure></li><li>返回GPU的数量  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.device_count()</span><br></pre></td></tr></table></figure></li><li>返回gpu名字，设备索引默认从0开始<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.get_device_name(0)</span><br></pre></td></tr></table></figure></li><li>cuda是否可用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>我的结果：<div align="center"><img src="https://z4a.net/images/2022/11/16/check.png" alt="PyTorch_office" title="PyTorch主页" width="350"></div><br></li></ul><blockquote><p>如果<code>torch.cuda.is_available()</code>返回的是False，那么很遗憾，你可能需要重新安装，重新检查问题所在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PyTorch实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halo博客搭建历程</title>
      <link href="/2022/11/11/halo-bo-ke-da-jian-li-cheng/"/>
      <url>/2022/11/11/halo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>首先要说明的是，这个博客的搭建是按照b站up主“我不是咕咕鸽”所发视频教程来的，大佬很强，真正做到了傻瓜式的教程，个人还是非常感谢的。<br>因为视频是2019年，所以在搭建过程中肯定会遇到的与视频有些出路的地方，我在这个文章中小小记录一下。<br>先这里放一下链接：</p><blockquote><p>如何用服务器优雅地搭建一个博客—Hello,Halo!：<a href="https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web">https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web</a></p></blockquote><h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p>服务器购买还是跟视频说的一样，还是推荐Vultr，当然你也可以选择国内的服务器厂商，但是我觉得Vultr的价格确实还算亲民（在这篇文章编写的时候是<strong>1＄：7.18￥</strong>）。</p><blockquote><p>Vultr官网：<a href="https://my.vultr.com/">https://my.vultr.com/</a></p></blockquote><p>明明后缀中有cn，但是还是可能需要魔法，不然可能会一直加载，注册流程就先跳过了。</p><h2 id="Server-Type"><a href="#Server-Type" class="headerlink" title="Server Type"></a><strong>Server Type</strong></h2><p>前面两个<strong>High Performance</strong>都可以。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/CPU.png"></div><h2 id="Server-Location"><a href="#Server-Location" class="headerlink" title="Server Location"></a><strong>Server Location</strong></h2><p>这个算比较关键，主要如果服务器离中国太远的话，很容易出现高Ping，所以这边先点到Asia，这边推荐选择Tokyo，当然可以选Tokyo之外的其他地区。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/location.png"></div><h2 id="Server-Image"><a href="#Server-Image" class="headerlink" title="Server Image"></a><strong>Server Image</strong></h2><p>按视频来是选择<strong>CentOS 7×64</strong>，其实只要是Decker支持安装的System都是可行的。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/operation-system.png"></div><h2 id="Server-Size"><a href="#Server-Size" class="headerlink" title="Server Size"></a><strong>Server Size</strong></h2><p>视频里也说了最好还是用一核2G的机子，不然的话你的博客就不能设计太多的其他东西，不然会很卡（我自己的一核1G已经卡爆了）</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bill.png"></div><p>把这个关掉然后创建即可</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/auto_save_to_cloud.png"></div><p>网站的链接延迟使用站长之家的Ping值检测即可。大量延迟太高的节点或者主机无响应的话，可能需要重新创建服务器。</p><blockquote><p>站长之家：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p></blockquote><h1 id="使用FinalShell操纵远程服务器"><a href="#使用FinalShell操纵远程服务器" class="headerlink" title="使用FinalShell操纵远程服务器"></a>使用FinalShell操纵远程服务器</h1><p>这边倒是没有出现问题，这边就直接贴一下链接。</p><blockquote><p>FinalShell：<a href="http://www.hostbuf.com/t/988.html">http://www.hostbuf.com/t/988.html</a></p></blockquote><h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><blockquote><p>宝塔面板：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p></blockquote><p>CentOS的安装代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="显示宝塔面板的登陆网址"><a href="#显示宝塔面板的登陆网址" class="headerlink" title="显示宝塔面板的登陆网址"></a>显示宝塔面板的登陆网址</h2><p>这边一般会给一个国外访问链接和国内访问两个链接，哪个点的开就选哪个</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/c56237a158382e8be971ccbfc29b3118.png"></div><p>这边如果后续不小心关闭了，使用以下代码就可以再次显现链接，以及账号密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt default</span><br></pre></td></tr></table></figure><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>后续如果忘记账号密码，密码就会不显示（显示为***），此时就需要更改密码，可以通过输入以下指令修改密码（把命令最后面的 “testpasswd” 替换成你要改的新密码。如果你直接复制这条命令那默认的密码就是 “testpasswd”！）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server/panel &amp;&amp; python tools.pyc panel testpasswd</span><br></pre></td></tr></table></figure><p>也可以通过输入bt调出菜单，可以看到修改密码的选项：</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bt.png"></div><h1 id="安装Docker和Halo博客"><a href="#安装Docker和Halo博客" class="headerlink" title="安装Docker和Halo博客"></a>安装Docker和Halo博客</h1><p>跟着视频一步一步装就好。</p><blockquote><p>Docker install on CentOS：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br>使用Docker安装Halo博客：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></p></blockquote><p>这里其实也可以在宝塔面板中安装Docker，但是面板中的版本可能不是最新版，因此不推荐这种方法。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/docker_.png"></div><p>这边就要注意端口的一致性，不然无法准确映射。</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>由于英语不是很好，加上视频里完全没有细细说DNS解析这方面，在这里确实卡了很久。简单来说，当你拿到域名到代理商那里去解析的时候，代理商会显示两个值，需要把这两个值添加到我们购买域名的网站对应域名的Manage DNS Records里，目的是为了让这个域名知道是谁来管理他。<br>如果你是namesoil买的域名，那么这样按这个顺序点击：主页的MyCount → ，domain link manager，然会会出现以下界面。</p><div align="center">  <img src="https://z4a.net/images/2023/03/15/domain-link-manager.png"><img src="https://z4a.net/images/2023/03/15/Domain-L-ink-Manager.png"></div><p>勾选域名，点击上面的Change Nameservers，然后把开头的全部删除，把代理商给你的两个值填进去就好。<br>提交之后需要等待审核（非常快），然后按照视频的流程即可。</p><h1 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h1><p>申请的SLL证书（不申请你的网站进入时便会又不安全警告）<strong>是有时间期限的，一般是90天，之后还需要重新申请。</strong><br>反向代理的代码在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8090/;</span><br><span class="line">  rewrite ^/(.*)$ /$1 break;</span><br><span class="line">  proxy_redirect off;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header Upgrade-Insecure-Requests 1;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加之后就可以使用域名访问我们的博客。</p><h1 id="主题的选择"><a href="#主题的选择" class="headerlink" title="主题的选择"></a>主题的选择</h1><p>拿到博客一开始的主题算非常简陋的，可以去Halo的<strong>主题仓库</strong>更换自己喜欢的主题。如果你和我选择的一样，都是<strong>一核1G，那么还是不要安装太花里胡哨的主题，因为这样你的博客日常访问都会非常卡顿，这会严重影响博客的体验。</strong></p><blockquote><p>Halo主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Halo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> 服务器 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>归档</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>这里是gcnanmu，一个普通的大学生，喜欢鼓捣一些奇怪的事，建立博客的初衷是记录与分享，所以所有文章都尽量写的详细且易懂，希望对访问的你有所帮助。本站的话主要是为了备份使用，以防服务器出现问题或者续不了费用导致的文章丢失。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("/font/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/loading-bar.css"/>
      <url>/css/loading-bar.css</url>
      
        <content type="html"><![CDATA[.pace {-webkit-pointer-events: none;pointer-events: none;-webkit-user-select: none;-moz-user-select: none;user-select: none;-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 10px;-moz-border-radius: 10px;border-radius: 10px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;z-index: 2000;position: fixed;margin: auto;top: 12px;left: 0;right: 0;bottom: 0;width: 200px;height: 50px;overflow: hidden;}.pace .pace-progress {-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;-webkit-transform: translate3d(0, 0, 0);transform: translate3d(0, 0, 0);display: block;position: absolute;right: 100%;margin-right: -7px;width: 93%;top: 7px;height: 14px;font-size: 12px;background: #29d;color: #29d;line-height: 60px;font-weight: bold;font-family: Helvetica, Arial, "Lucida Grande", sans-serif;-webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;-ms-box-shadow: 120px 0 #fff, 240px 0 #fff;box-shadow: 120px 0 #fff, 240px 0 #fff;}.pace .pace-progress:after {content: attr(data-progress-text);display: inline-block;position: fixed;width: 45px;text-align: right;right: 0;padding-right: 16px;top: 4px;}.pace .pace-progress[data-progress-text="0%"]:after { right: -200px }.pace .pace-progress[data-progress-text="1%"]:after { right: -198.14px }.pace .pace-progress[data-progress-text="2%"]:after { right: -196.28px }.pace .pace-progress[data-progress-text="3%"]:after { right: -194.42px }.pace .pace-progress[data-progress-text="4%"]:after { right: -192.56px }.pace .pace-progress[data-progress-text="5%"]:after { right: -190.7px }.pace .pace-progress[data-progress-text="6%"]:after { right: -188.84px }.pace .pace-progress[data-progress-text="7%"]:after { right: -186.98px }.pace .pace-progress[data-progress-text="8%"]:after { right: -185.12px }.pace .pace-progress[data-progress-text="9%"]:after { right: -183.26px }.pace .pace-progress[data-progress-text="10%"]:after { right: -181.4px }.pace .pace-progress[data-progress-text="11%"]:after { right: -179.54px }.pace .pace-progress[data-progress-text="12%"]:after { right: -177.68px }.pace .pace-progress[data-progress-text="13%"]:after { right: -175.82px }.pace .pace-progress[data-progress-text="14%"]:after { right: -173.96px }.pace .pace-progress[data-progress-text="15%"]:after { right: -172.1px }.pace .pace-progress[data-progress-text="16%"]:after { right: -170.24px }.pace .pace-progress[data-progress-text="17%"]:after { right: -168.38px }.pace .pace-progress[data-progress-text="18%"]:after { right: -166.52px }.pace .pace-progress[data-progress-text="19%"]:after { right: -164.66px }.pace .pace-progress[data-progress-text="20%"]:after { right: -162.8px }.pace .pace-progress[data-progress-text="21%"]:after { right: -160.94px }.pace .pace-progress[data-progress-text="22%"]:after { right: -159.08px }.pace .pace-progress[data-progress-text="23%"]:after { right: -157.22px }.pace .pace-progress[data-progress-text="24%"]:after { right: -155.36px }.pace .pace-progress[data-progress-text="25%"]:after { right: -153.5px }.pace .pace-progress[data-progress-text="26%"]:after { right: -151.64px }.pace .pace-progress[data-progress-text="27%"]:after { right: -149.78px }.pace .pace-progress[data-progress-text="28%"]:after { right: -147.92px }.pace .pace-progress[data-progress-text="29%"]:after { right: -146.06px }.pace .pace-progress[data-progress-text="30%"]:after { right: -144.2px }.pace .pace-progress[data-progress-text="31%"]:after { right: -142.34px }.pace .pace-progress[data-progress-text="32%"]:after { right: -140.48px }.pace .pace-progress[data-progress-text="33%"]:after { right: -138.62px }.pace .pace-progress[data-progress-text="34%"]:after { right: -136.76px }.pace .pace-progress[data-progress-text="35%"]:after { right: -134.9px }.pace .pace-progress[data-progress-text="36%"]:after { right: -133.04px }.pace .pace-progress[data-progress-text="37%"]:after { right: -131.18px }.pace .pace-progress[data-progress-text="38%"]:after { right: -129.32px }.pace .pace-progress[data-progress-text="39%"]:after { right: -127.46px }.pace .pace-progress[data-progress-text="40%"]:after { right: -125.6px }.pace .pace-progress[data-progress-text="41%"]:after { right: -123.74px }.pace .pace-progress[data-progress-text="42%"]:after { right: -121.88px }.pace .pace-progress[data-progress-text="43%"]:after { right: -120.02px }.pace .pace-progress[data-progress-text="44%"]:after { right: -118.16px }.pace .pace-progress[data-progress-text="45%"]:after { right: -116.3px }.pace .pace-progress[data-progress-text="46%"]:after { right: -114.44px }.pace .pace-progress[data-progress-text="47%"]:after { right: -112.58px }.pace .pace-progress[data-progress-text="48%"]:after { right: -110.72px }.pace .pace-progress[data-progress-text="49%"]:after { right: -108.86px }.pace .pace-progress[data-progress-text="50%"]:after { right: -107px }.pace .pace-progress[data-progress-text="51%"]:after { right: -105.14px }.pace .pace-progress[data-progress-text="52%"]:after { right: -103.28px }.pace .pace-progress[data-progress-text="53%"]:after { right: -101.42px }.pace .pace-progress[data-progress-text="54%"]:after { right: -99.56px }.pace .pace-progress[data-progress-text="55%"]:after { right: -97.7px }.pace .pace-progress[data-progress-text="56%"]:after { right: -95.84px }.pace .pace-progress[data-progress-text="57%"]:after { right: -93.98px }.pace .pace-progress[data-progress-text="58%"]:after { right: -92.12px }.pace .pace-progress[data-progress-text="59%"]:after { right: -90.26px }.pace .pace-progress[data-progress-text="60%"]:after { right: -88.4px }.pace .pace-progress[data-progress-text="61%"]:after { right: -86.53999999999999px }.pace .pace-progress[data-progress-text="62%"]:after { right: -84.68px }.pace .pace-progress[data-progress-text="63%"]:after { right: -82.82px }.pace .pace-progress[data-progress-text="64%"]:after { right: -80.96000000000001px }.pace .pace-progress[data-progress-text="65%"]:after { right: -79.1px }.pace .pace-progress[data-progress-text="66%"]:after { right: -77.24px }.pace .pace-progress[data-progress-text="67%"]:after { right: -75.38px }.pace .pace-progress[data-progress-text="68%"]:after { right: -73.52px }.pace .pace-progress[data-progress-text="69%"]:after { right: -71.66px }.pace .pace-progress[data-progress-text="70%"]:after { right: -69.8px }.pace .pace-progress[data-progress-text="71%"]:after { right: -67.94px }.pace .pace-progress[data-progress-text="72%"]:after { right: -66.08px }.pace .pace-progress[data-progress-text="73%"]:after { right: -64.22px }.pace .pace-progress[data-progress-text="74%"]:after { right: -62.36px }.pace .pace-progress[data-progress-text="75%"]:after { right: -60.5px }.pace .pace-progress[data-progress-text="76%"]:after { right: -58.64px }.pace .pace-progress[data-progress-text="77%"]:after { right: -56.78px }.pace .pace-progress[data-progress-text="78%"]:after { right: -54.92px }.pace .pace-progress[data-progress-text="79%"]:after { right: -53.06px }.pace .pace-progress[data-progress-text="80%"]:after { right: -51.2px }.pace .pace-progress[data-progress-text="81%"]:after { right: -49.34px }.pace .pace-progress[data-progress-text="82%"]:after { right: -47.480000000000004px }.pace .pace-progress[data-progress-text="83%"]:after { right: -45.62px }.pace .pace-progress[data-progress-text="84%"]:after { right: -43.76px }.pace .pace-progress[data-progress-text="85%"]:after { right: -41.9px }.pace .pace-progress[data-progress-text="86%"]:after { right: -40.04px }.pace .pace-progress[data-progress-text="87%"]:after { right: -38.18px }.pace .pace-progress[data-progress-text="88%"]:after { right: -36.32px }.pace .pace-progress[data-progress-text="89%"]:after { right: -34.46px }.pace .pace-progress[data-progress-text="90%"]:after { right: -32.6px }.pace .pace-progress[data-progress-text="91%"]:after { right: -30.740000000000002px }.pace .pace-progress[data-progress-text="92%"]:after { right: -28.880000000000003px }.pace .pace-progress[data-progress-text="93%"]:after { right: -27.02px }.pace .pace-progress[data-progress-text="94%"]:after { right: -25.16px }.pace .pace-progress[data-progress-text="95%"]:after { right: -23.3px }.pace .pace-progress[data-progress-text="96%"]:after { right: -21.439999999999998px }.pace .pace-progress[data-progress-text="97%"]:after { right: -19.58px }.pace .pace-progress[data-progress-text="98%"]:after { right: -17.72px }.pace .pace-progress[data-progress-text="99%"]:after { right: -15.86px }.pace .pace-progress[data-progress-text="100%"]:after { right: -14px }.pace .pace-activity {position: absolute;width: 100%;height: 28px;z-index: 2001;box-shadow: inset 0 0 0 2px #29d, inset 0 0 0 7px #FFF;border-radius: 10px;}.pace.pace-inactive {display: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/set_font.css"/>
      <url>/css/set_font.css</url>
      
        <content type="html"><![CDATA[@font-face {    /* 为载入的字体取名字(随意) */    font-family: 'OPPOSans-R';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/HarmonyOS_Sans_SC_Regular.woff);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/yemian.css"/>
      <url>/css/yemian.css</url>
      
        <content type="html"><![CDATA[:root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  /* 波浪css */.main-hero-waves-area {    width: 100%;    position: absolute;    left: 0;    bottom: -11px;    z-index: 5;  }  .waves-area .waves-svg {    width: 100%;    height: 5rem;  }  /* Animation */    .parallax > use {    animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;  }  .parallax > use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #f7f9febd;  }  .parallax > use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #f7f9fe82;  }  .parallax > use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #f7f9fe36;  }  .parallax > use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #f7f9fe;  }  /* 黑色模式背景 */  [data-theme="dark"] .parallax > use:nth-child(1) {    animation-delay: -2s;    animation-duration: 7s;    fill: #18171dc8;  }  [data-theme="dark"] .parallax > use:nth-child(2) {    animation-delay: -3s;    animation-duration: 10s;    fill: #18171d80;  }  [data-theme="dark"] .parallax > use:nth-child(3) {    animation-delay: -4s;    animation-duration: 13s;    fill: #18171d3e;  }  [data-theme="dark"] .parallax > use:nth-child(4) {    animation-delay: -5s;    animation-duration: 20s;    fill: #18171d;  }    @keyframes move-forever {    0% {      transform: translate3d(-90px, 0, 0);    }    100% {      transform: translate3d(85px, 0, 0);    }  }  /*Shrinking for mobile*/  @media (max-width: 768px) {    .waves-area .waves-svg {      height: 40px;      min-height: 40px;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                // 这里可以换为你喜欢的图片，例如我就换为了雪人，但是要抠图                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）        /*        $("#myscoll").nekoScroll({            nekoname:'neko1', //nekoname，相当于id            nekoImg:'img/猫咪.png', //neko的背景图片            scImg:"img/绳1.png", //绳子的背景图片            bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效            zoom:0.9, //绳子长度的缩放值            hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息            right:'100px', //距离页面右边的距离            fontFamily:'楷体', //对话框字体            fontSize:'14px', //对话框字体的大小            color:'#1e90ff', //对话框字体颜色            scroWidth:'8px', //绳子的宽度            z_index:100, //不用解释了吧            during:1200, //从顶部到底部滑动的时长        });        */    })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-02-21 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-休息了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">友链</div><div class="flink-desc">一些优秀的人</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://gcnanmu.gitee.io" title="gcnanmuの博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://docimg10.docs.qq.com/image/AgAAC6u-TVPtJ_LI7f5GYqFzs7WIvgcg.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="gcnanmuの博客" />              </div>              <div class="flink-item-name">gcnanmuの博客</div>               <div class="flink-item-desc" title="Hexo博客">Hexo博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zfe.space/" title="小冰博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://zfe.space/images/headimage.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="小冰博客" />              </div>              <div class="flink-item-name">小冰博客</div>               <div class="flink-item-desc" title="做个有梦想的人！">做个有梦想的人！</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://noionion.top/" title="贰猹の小窝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="贰猹の小窝" />              </div>              <div class="flink-item-name">贰猹の小窝</div>               <div class="flink-item-desc" title="用这生命的每一秒，给自己一个不后悔的未来">用这生命的每一秒，给自己一个不后悔的未来</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://forever97.top/" title="未央的童话镇" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="未央的童话镇" />              </div>              <div class="flink-item-name">未央的童话镇</div>               <div class="flink-item-desc" title="在人海里梦游">在人海里梦游</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.fomal.cn/" title="Fomalhaut🥝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Fomalhaut🥝" />              </div>              <div class="flink-item-name">Fomalhaut🥝</div>               <div class="flink-item-desc" title="优秀魔改博主">优秀魔改博主</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://anzhiyu-c-github-io.vercel.app/page/2/" title="安知鱼" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼" />              </div>              <div class="flink-item-name">安知鱼</div>               <div class="flink-item-desc" title="生活明朗，万物可爱。">生活明朗，万物可爱。</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://tzy1997.com/" title="唐志远の博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="唐志远の博客" />              </div>              <div class="flink-item-name">唐志远の博客</div>               <div class="flink-item-desc" title="2023年的理想开始实现了吗？">2023年的理想开始实现了吗？</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://guole.fun/" title="Guo Le" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Guo Le" />              </div>              <div class="flink-item-name">Guo Le</div>               <div class="flink-item-desc" title="null">null</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://butterfly.js.org/" title="Butterfly官方" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Butterfly官方" />              </div>              <div class="flink-item-name">Butterfly官方</div>               <div class="flink-item-desc" title="Butterfly主题官方博客">Butterfly主题官方博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://shields.io/" title="Github小卡片" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="http://www.w3.org/2000/svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Github小卡片" />              </div>              <div class="flink-item-name">Github小卡片</div>               <div class="flink-item-desc" title="生成有趣的卡片">生成有趣的卡片</div>            </a>          </div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/journals/index.html"/>
      <url>/journals/index.html</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-25</p></div></div><div class='timeline-item-content'><p>试了试<code>HarmonyOS Sans</code>与<code>OPPO Sans</code>,感觉鸿蒙的字体更加圆润一点，现已将博客字体更换为<code>HarmonyOS Sans</code></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-19</p></div></div><div class='timeline-item-content'><p>又一次把Hexo给搭回来了，好在在固态坏掉之前又搭建了Halo博客，所以文章的话还在，可以说是不幸中的万幸。而且有了第一次的经验，这一次搭建Hexo可以说相当快了，前前后后就花了3小时左右（包括文章的编写，CSS的设定），也不弄的太花哨了，还是以实用为主。发现我没什么博客封面啊，只能拿点老图凑合一下了。</p></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
