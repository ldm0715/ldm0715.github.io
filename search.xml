<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Electron API-快速上手</title>
      <link href="/post/electronapi-kuai-su-shang-shou/"/>
      <url>/post/electronapi-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是electron"><a href="#什么是electron" class="headerlink" title="什么是electron"></a>什么是electron</h2><p>简单来说，electron是使用html，css，js，nodejs，Native Api构建的跨平台的软件开发框架</p><blockquote><p><a href="https://www.electronjs.org/zh/docs/latest/">简介 | Electron (electronjs.org)</a></p></blockquote><p>要点：</p><ul><li>应用广泛的跨平台的桌面应用开发框架</li><li>electron的本质是结合了Chromium与Nodejs</li><li>使用HTML，CSS，JS等Web技术构建桌面应用程序</li></ul><blockquote><p>Chromium可以简单理解为一个简洁版的浏览器</p></blockquote><h2 id="electron的技术架构"><a href="#electron的技术架构" class="headerlink" title="electron的技术架构"></a>electron的技术架构</h2><p>electron可以简单理解为如下组合</p><img src="https://www.z4a.net/images/2024/08/27/electron_002.png" alt="image-20240827190853419" style="zoom: 67%;" /><p>具体架构如下图所示：</p><img src="https://www.z4a.net/images/2024/08/27/electron_001.png" alt="image-20240827185249210" style="zoom:50%;" /><ul><li>主进程是整个程序的入口，渲染进程由主进程进行管理。</li><li>主进程和渲染进程原则上是相互隔离的，只能通过IPC的方式进行通信。</li><li>Native API是一套通用的操作系统API，这是实现跨平台重要的原因。</li><li>主进程使用的是Nodejs环境，渲染进程使用的是Chromium（Web环境）,需要注意区分。</li></ul><p>程序运行在主进程上，每当打开一个页面就会产生一个渲染进程，渲染进程需要由主进程管理。在主进程中，可以使用Nodejs的所有语法，在渲染进程中，可以使用JS语法，进程与进程之间相互隔离。进程与进程之间可以使用IPC的方式进行通信，主进程与各渲染进程只需直接通过IPC的方式，对于渲染进程和渲染进程之间，需要通过主进程间接实现通信。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>确保安装了Nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>初始化Node项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中，<code>author</code>和<code>description</code>对于打包来说是必填项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcnanmu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a electron demo app&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>安装electron</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron</span><br><span class="line">或者</span><br><span class="line">npm install electron -D</span><br></pre></td></tr></table></figure><p><code>package.json</code>，添加<code>main</code>和<code>start</code>字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcnanmu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a electron demo app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^32.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>main</code>字段指明了主进程所在js的位置</li><li><code>start</code>设置了运行程序的命令，也可以直接使用<code>electron .</code>命令启动程序</li></ul><p>在根目录创建<code>main.js</code>，创建app并渲染一个窗口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听程序 准备好了就创建一个窗口</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="comment">// 设置窗口大小</span></span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>app</code>表示程序对象</li><li><code>BrowserWindow</code>表示渲染窗口，可传入多个配置项</li></ul><p>在终端运行<code>npm start</code>，未出现报错且跳出一个窗口则运行成功。</p><img src="https://www.z4a.net/images/2024/08/27/electron_003.png" alt="image-20240827194028571" style="zoom: 67%;" /><h3 id="从URL加载页面"><a href="#从URL加载页面" class="headerlink" title="从URL加载页面"></a>从URL加载页面</h3><p>修改<code>main.js</code>，为渲染窗口指定b站的URL进行加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 去除默认菜单栏</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.<span class="title function_">loadURL</span>(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/27/electron_004.png" alt="image-20240827194330052" style="zoom: 67%;" /><blockquote><p>打开开发者模式后，在终端可以看到如下的警告信息，这个警告不会影响程序的正常运行，不用理会。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[28648:0827*/*201847.314:ERROR:CONSOLE(1)] &quot;Request Autofill.enable failed. &#123;&quot;code&quot;:-32601,&quot;message&quot;:&quot;&#x27;Autofill.enable&#x27; wasn&#x27;t found&quot;&#125;&quot;, source: devtools://devtools/bundled/core/protocol_client/protocol_client.js (1*)*</span><br><span class="line"></span><br><span class="line">[28648:0827*/*201847.314:ERROR:CONSOLE(1)] &quot;Request Autofill.setAddresses failed. &#123;&quot;code&quot;:-32601,&quot;message&quot;:&quot;&#x27;Autofill.setAddresses&#x27; wasn&#x27;t found&quot;&#125;&quot;, source: devtools://devtools/bundled/core/protocol_client/protocol_client.js (1)  </span><br></pre></td></tr></table></figure><p>github相关的issue： <a href="https://github.com/electron/electron/issues/41614">议题 #41614 · electron&#x2F;electron (github.com)</a></p></blockquote><h3 id="加载本地页面"><a href="#加载本地页面" class="headerlink" title="加载本地页面"></a>加载本地页面</h3><p>在根目录创建一个名为<code>render</code>文件夹来存放渲染的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├─ node_modules</span><br><span class="line">├─ package-lock.json</span><br><span class="line">├─ package.json</span><br><span class="line">├─ main.js</span><br><span class="line">└─ render</span><br><span class="line">       └─ index</span><br><span class="line">              ├─ index.html</span><br><span class="line">              └─ index.js</span><br></pre></td></tr></table></figure><p><code>index.html</code>写入我们想要展示的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron_Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>electron学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.js</code>中实现相应的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中加载<code>index.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 去除默认菜单栏</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// win.loadURL(&quot;https://www.bilibili.com&quot;)</span></span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&quot;./render/index/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/27/electron_005.png" alt="image-20240827204214669" style="zoom:67%;" /><p>在启动的electron应用中，可以使用<code>Ctrl + Shift + I</code>打开开发者工具，在<code>Console</code>中会出现如下的安全警告信息</p><blockquote><p>VM4 sandbox_bundle:2 Electron Security Warning (Insecure Content-Security-Policy) This renderer process has either no Content Security<br>  Policy set or a policy with “unsafe-eval” enabled. This exposes users of<br>  this app to unnecessary security risks.</p><p>VM4 sandbox_bundle:2 Electron 安全警告（不安全的内容安全策略）该渲染器进程要么没有设置内容安全策略，要么启用了 “不安全-评估 “策略。<br>  策略或启用了 “不安全-评估 “策略。这使此应用程序的用户面临<br>  此应用程序的用户面临不必要的安全风险。</p><p>For more information and help, consult<br><a href="https://electronjs.org/docs/tutorial/security">https://electronjs.org/docs/tutorial/security</a>.<br>This warning will not show up<br>once the app is packaged.</p></blockquote><p>想要传达的意思是<strong>该渲染器进程没有设置内容安全策略</strong>，<code>Insecure Content-Security-Policy</code>的相关信息可以在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">内容安全策略（CSP） - HTTP | MDN (mozilla.org)</a>中查到。</p><p>按照MDN网站的提示，需要我们在渲染页面<code>index.html</code>中的<code>meta</code>标签中加入如下的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron_Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>electron学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加后警告消失。</p><h3 id="完善窗口行为"><a href="#完善窗口行为" class="headerlink" title="完善窗口行为"></a>完善窗口行为</h3><p>对于Windows系统，如果当前应用的所有窗口被关闭，那么视为程序运行结束，进程被关闭。但对于MacOS系统来说，只要Docker栏中的应用图标存在，程序就不会被关闭，而是进入一个特殊的休眠状态，再次点击docker栏中的图标，则会激活程序，创建窗口。</p><p>基于上述系统之间的进程管理策略的差异性，在electron中使用如下代码来适配相关的策略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MacOS策略兼容代码</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Win策略兼容代码</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>代码解释：</p><ul><li><code>activate</code>- 当程序处于被激活状态时，如果当前渲染窗口的个数为0 则自动创建窗口</li><li><code>window-all-closed</code> - 当所有窗口被关闭且当前平台为<code>windows</code>时，程序结束执行</li></ul><p>修改后的<code>main.js</code>代码如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 隐藏窗口边框</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&quot;./render/index/index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createWindow</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MacOS策略兼容代码</span></span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&quot;activate&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Win策略兼容代码</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) app.<span class="title function_">quit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行得到的结果如下</p><img src="https://www.z4a.net/images/2024/08/27/electron_006.png" alt="image-20240827205937257" style="zoom:67%;" /><h3 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h3><p>如果要使主进程修改后自动执行，可使用<code>nodemon</code></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p>修改<code>package.json</code>中的<code>start</code>命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --exec electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcnanmu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a electron demo app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^32.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对于渲染进程，每次修改后可使用<code>Ctrl + R</code>刷新页面内容，如果要让<code>nodemon</code>将渲染页面也纳入检测范围，需要在根目录创建<code>nodemon.json</code>文件来设置相关配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;restartable&quot;</span><span class="punctuation">:</span><span class="string">&quot;r&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;*.*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ext&quot;</span><span class="punctuation">:</span><span class="string">&quot;html,js,css&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置解释</p><ul><li><code>ignore</code> - 要忽略的文件</li><li><code>restartable</code> - 重启的命令 在命令行输入<code>r</code>即可重启程序</li><li><code>watch</code> - 监测的文件范围，这里表示处理<code>ignore</code>的所有文件</li><li><code>ext</code> - 要监测的文件后缀名</li></ul><h2 id="Preload脚本"><a href="#Preload脚本" class="headerlink" title="Preload脚本"></a>Preload脚本</h2><p>在前文的技术架构中提到，主进程与渲染进程是相互隔离的，且主进程为Nodejs环境，而渲染进程为Web环境。因此无法在渲染进程中使用<code>__dirname</code>，不能在主进程中使用<code>window</code>对象。这样的好处是保证了进程的运行安全，但对于复杂一些的操作就很难实现。</p><p>为了实现IPC通信，主进程与渲染进程之间需要一个桥梁，这个桥梁便是预加载脚本。</p><p><strong>预加载脚本很特殊，它能够访问部分Nodejs的api，本质上属于削弱后的Nodejs环境。</strong></p><img src="https://www.z4a.net/images/2024/08/27/electron_007.png" alt="image-20240827211856190" style="zoom: 50%;" /><p>现在有一个这样的需求，我需要把Nodejs版本、electron版本显示到当前的渲染页面<code>index.html</code>上。</p><p>相应的版本信息只有Nodejs环境中才可以获取，预加载脚本属于Nodejs环境，可以通过预加载脚本获取版本信息，但是展示信息要在渲染进程完成。因此需要主进程将版本信息传递给渲染进程。那么必然涉及到IPC通信</p><p>在根目录创建<code>preload.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;contextBridge, ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">version</span>: &#123;</span><br><span class="line">        <span class="title class_">Electron</span>: process.<span class="property">versions</span>.<span class="property">electron</span>,</span><br><span class="line">        <span class="title class_">Chrome</span>: process.<span class="property">versions</span>.<span class="property">chrome</span>,</span><br><span class="line">        <span class="title class_">Node</span>: process.<span class="property">versions</span>.<span class="property">node</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>contextBridge</code>直译为上下文桥梁，<code>exposeInMainWorld</code>的作用是将其中的信息暴露给渲染进程。</p><p>在<code>main.js</code>中指明预加载脚本的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 隐藏窗口边框</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="comment">// 要传入绝对路径</span></span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./preload.js&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&quot;./render/index/index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码省略</span></span><br></pre></td></tr></table></figure><p>在<code>index.html</code>中创建一个新的按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron_Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>electron学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点我获取版本信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为新按钮绑定事件，同时<code>index.js</code>中使用<code>api</code>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 点击按钮获取相应的版本信息</span></span><br><span class="line">btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(api.<span class="property">version</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>preload.js</code>预加载脚本，就能够在实现在渲染进程中展示版本信息</p><img src="https://www.z4a.net/images/2024/08/27/electron_008.png" alt="image-20240827214143149" style="zoom:67%;" /><h2 id="进程通信（IPC）"><a href="#进程通信（IPC）" class="headerlink" title="进程通信（IPC）"></a>进程通信（IPC）</h2><p>通过一个案例来更好展示IPC之间的通信原理。</p><p>在根目录新建一个<code>data.txt</code>，当写入按钮点击时，将<code>input</code>标签中的内容写入<code>text.txt</code>。当点击读取按钮时，会将<code>data.txt</code>中的内容显示在下面的<code>span</code>标签中。初始页面构成如下图所示</p><img src="https://www.z4a.net/images/2024/08/27/electron_009.png" alt="image-20240827215326827" style="zoom:67%;" /><p><code>index.html</code>如下所示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>IPC通信<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>写入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;showData&quot;</span>&gt;</span>当前未读取<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渲染进程-→-主进程（单向）"><a href="#渲染进程-→-主进程（单向）" class="headerlink" title="渲染进程 → 主进程（单向）"></a>渲染进程 → 主进程（单向）</h3><p>为了实现写入按钮的功能，需要先获取input标签中的内容，将内容传递给预加载脚本<code>preload.js</code>，<code>preload.js</code>再将数据暴露给主进程，主进程获取到数据后，再调用Nodejs的fs模块将内容写入<code>data.txt</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&quot;api&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">version</span>: &#123;</span><br><span class="line">        <span class="title class_">Electron</span>: process.<span class="property">versions</span>.<span class="property">electron</span>,</span><br><span class="line">        <span class="title class_">Chrome</span>: process.<span class="property">versions</span>.<span class="property">chrome</span>,</span><br><span class="line">        <span class="title class_">Node</span>: process.<span class="property">versions</span>.<span class="property">node</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用ipcRenderer的send方法，将信息暴露给主进程</span></span><br><span class="line">    <span class="attr">writeFile</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;write-file&quot;</span>, data);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取主进程</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// 将数据传送到调用预加载脚本</span></span><br><span class="line">    api.<span class="title function_">writeFile</span>(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将内容写入data.txt</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeFile</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(<span class="string">&quot;./data.txt&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 隐藏窗口边框</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="comment">// 要传入绝对路径</span></span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./preload.js&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&quot;./render/index/index.html&quot;</span>);</span><br><span class="line">    <span class="comment">// 当write-file被触发后，调用writeFile函数</span></span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&quot;write-file&quot;</span>, <span class="function">(<span class="params">event, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="title function_">writeFile</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个执行的流程如图所示</p><img src="https://www.z4a.net/images/2024/08/27/electron_010.png" alt="image-20240827221747457" style="zoom:67%;" /><h3 id="渲染进程-↔-主进程（双向）"><a href="#渲染进程-↔-主进程（双向）" class="headerlink" title="渲染进程 ↔ 主进程（双向）"></a>渲染进程 ↔ 主进程（双向）</h3><p>获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&quot;myApi&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">version</span>: &#123;</span><br><span class="line">        <span class="title class_">Electron</span>: process.<span class="property">versions</span>.<span class="property">electron</span>,</span><br><span class="line">        <span class="title class_">Chrome</span>: process.<span class="property">versions</span>.<span class="property">chrome</span>,</span><br><span class="line">        <span class="title class_">Node</span>: process.<span class="property">versions</span>.<span class="property">node</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">writeFile</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;write-file&quot;</span>, data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">readFile</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&quot;read-file&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    myApi.<span class="title function_">writeFile</span>(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn2.<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;showData&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> myApi.<span class="title function_">readFile</span>();</span><br><span class="line">    span.<span class="property">innerHTML</span> = data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="comment">// 隐藏窗口边框</span></span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="comment">// 要传入绝对路径</span></span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./preload.js&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&quot;./render/index/index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;read-file&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主进程-→-渲染进程（单向）"><a href="#主进程-→-渲染进程（单向）" class="headerlink" title="主进程 → 渲染进程（单向）"></a>主进程 → 渲染进程（单向）</h3><h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><p>使用<code>electron-builder</code>进行打包</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-builder -D</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>文件中设置相应的打包配置项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --exec electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-builder&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo.electron&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./Comm Discord Dark.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nsis&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;arch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;x64&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nsis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;oneClick&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;perMachine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^30.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;electron-builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^24.13.3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcnanmu&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a electron demo app&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>相关配置项说明：</p><ul><li>name - 应用程序的名称</li><li>version - 应用程序的版本</li><li>appId - 应用程序的唯一标识符</li><li>icon - 应用图标（只影响打包程序的图标）</li><li>targe - NSIS 指定使用NSIS作为安装程序的格式</li><li>arch - 指定为64位架构</li><li>nsis<ul><li>oneClick - 设置false为使安装程序显示安装向导，而不是一键安装</li><li>perMachine - 设置为true表示只为当前用户安装</li><li>allowToChangeInstallationDirectory - 设置为true表示在安装的过程中允许选择安装目录</li></ul></li><li>author - 作者信息 会显示在程序右键的详细信息标签栏中</li></ul><p>终端运行<code>npm run build </code>即开始打包，<strong>打包过程需要保证网络通畅（能访问github）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; demo@1.0.0 build</span><br><span class="line">&gt; electron-builder</span><br><span class="line"></span><br><span class="line">  • electron-builder  version=24.13.3 os=10.0.19045</span><br><span class="line">  • loaded configuration  file=package.json (&quot;build&quot; field)</span><br><span class="line">  • writing effective config  file=dist\builder-effective-config.yaml</span><br><span class="line">  • packaging       platform=win32 arch=x64 electron=32.0.1 appOutDir=dist\win-unpacked</span><br><span class="line">  • building        target=nsis file=dist\demo Setup 1.0.0.exe archs=x64 oneClick=false perMachine=true</span><br><span class="line">  • building block map  blockMapFile=dist\demo Setup 1.0.0.exe.blockmap</span><br></pre></td></tr></table></figure><p>打包后得到<code>dist</code>文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br><span class="line">├─ builder-debug.yml</span><br><span class="line">├─ builder-effective-config.yaml</span><br><span class="line">├─ demo Setup 1.0.0.exe</span><br><span class="line">├─ demo Setup 1.0.0.exe.blockmap</span><br><span class="line">└─ win-unpacked</span><br></pre></td></tr></table></figure><p>其中<code>demo Setup 1.0.0.exe</code>即为安装程序，在<code>win-unpacked</code>中还存在一个非安装包形式的可执行程序。</p><h2 id="electron-vite"><a href="#electron-vite" class="headerlink" title="electron-vite"></a>electron-vite</h2><p>在了解了electron的基本原理后，按照原理分析，只要最终能够转换为html,css,js文件，那么理论上就可以使用electron。因此前端框架也可以使用electron进行打包。为了方便开发，有开发者将<code>electron</code>和<code>vite</code>进行了结合，得到了更加利于<code>electron</code>开发的<code>vite</code>脚手架。</p><blockquote><ol><li><p><a href="https://github.com/alex8088/electron-vite">alex8088&#x2F;electron-vite: Next generation Electron build tooling based on Vite 新一代 Electron 开发构建工具，支持源代码保护 (github.com)</a></p></li><li><p><a href="https://cn.electron-vite.org/">electron-vite | 下一代 Electron 开发构建工具</a></p></li></ol></blockquote><p>创建一个electron-vite项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create @quick-start/electron@latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> 跨平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端-跨域&amp;解决方案</title>
      <link href="/post/qian-duan-kua-yu-he-jie-jue-fang-an/"/>
      <url>/post/qian-duan-kua-yu-he-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>同源策略是<strong>浏览器</strong>为了确保资源请求安全而遵循的一种策略，该策略对访问资源进行了一些限制。比较常见的就是跨域请求资源的问题，由于存在同源策略，浏览器会不允许接收得到的请求数据，需要通过一定的策略解决跨域请求的问题。</p><blockquote><p>详细的可参见<a href="https://www.w3.org/Security/wiki/Same_Origin_Policy">同源策略 - 网络安全 (w3.org)</a></p></blockquote><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>源的概念由协议、域名和端口三部分组成。严格来说只要<strong>三部分出现任意一部分的不相等</strong>，那么就是出现了跨域，也称为非同源或异源。相反的，如果三部分均相等，那么就为同源。</p><h3 id="如何算跨域"><a href="#如何算跨域" class="headerlink" title="如何算跨域"></a>如何算跨域</h3><p>跨域即发生了非同源请求，请看以下例子</p><table><thead><tr><th align="left">Origin</th><th>Server</th><th>是否同源</th><th>理由</th></tr></thead><tbody><tr><td align="left"><a href="http://www.xyz.com/home">http://www.xyz.com/home</a></td><td><a href="https://www.xyz.com/home">https://www.xyz.com/home</a></td><td>🚫</td><td>协议不相同</td></tr><tr><td align="left"><a href="http://www.xyz.com/home">http://www.xyz.com/home</a></td><td><a href="http://mail.xyz.com/home">http://mail.xyz.com/home</a></td><td>🚫</td><td>域名不同</td></tr><tr><td align="left"><a href="http://www.xyz.com:8080/home">http://www.xyz.com:8080/home</a></td><td><a href="http://www.xyz.com:8090/home">http://www.xyz.com:8090/home</a></td><td>🚫</td><td>端口不同</td></tr><tr><td align="left"><a href="http://www.xyz.com:8080/home">http://www.xyz.com:8080/home</a></td><td><a href="http://www.xyz.com:8080/search">http://www.xyz.com:8080/search</a></td><td>✔</td><td>三部分都相同</td></tr></tbody></table><p>下图清晰展示了同源与非同源的区别</p><img src="https://www.z4a.net/images/2024/08/16/_001.png" alt="img" style="zoom: 50%;" /><h2 id="跨域会受到哪些限制"><a href="#跨域会受到哪些限制" class="headerlink" title="跨域会受到哪些限制"></a>跨域会受到哪些限制</h2><p>一旦出现了跨域的请求，一般会受到浏览器的三种限制：</p><ol><li>限制DOM访问</li><li>限制cookie访问</li><li>限制Ajax的响应（Ajax请求是可以发送成功的）</li></ol><h3 id="限制DOM访问"><a href="#限制DOM访问" class="headerlink" title="限制DOM访问"></a>限制DOM访问</h3><p>创建<code>index.html</code>,<code>index2.html</code>两个html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>页面1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getDomObject()&quot;</span>&gt;</span>点我获取DOM对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePage&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index2.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">getDomObject</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> iframePage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframePage&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取dom对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(iframePage.<span class="property">contentWindow</span>.<span class="property">document</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>页面2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>iframe</code>嵌入<code>index2.html</code>，尝试获取<code>page.html</code>的DOM对象，可以成功获取，因为这两个页面都属于同一源<code>http://127.0.0.1:5500</code>。</p><img src="https://www.z4a.net/images/2024/08/16/_006.png" alt="img" style="zoom: 67%;" /><p>如果将<code>http://127.0.0.1:5500/index2.html</code>换成<code>https://www.baidu.com</code>,点击按钮获取DOM对象就会发生报错。</p><img src="https://www.z4a.net/images/2024/08/16/_007.png" alt="img" style="zoom: 67%;" /><blockquote><p>报错的详细信息为:</p><p>index.html:17 Uncaught DOMException: Failed to read a named property ‘document’ from ‘Window’: Blocked a frame with origin “<a href="http://127.0.0.1:5500/">http://127.0.0.1:5500</a>“ from accessing a cross-origin frame.</p><p>index.html：17 未捕获的 DOMException：无法从“Window”读取命名属性“document”：阻止源为“<a href="http://127.0.0.1:5500”的帧访问跨源帧。">http://127.0.0.1:5500”的帧访问跨源帧。</a></p></blockquote><h3 id="限制cookie访问"><a href="#限制cookie访问" class="headerlink" title="限制cookie访问"></a>限制cookie访问</h3><p>同理，如果是获取<code>http://127.0.0.1:5500/index2.html</code>的cookie，那么会请求成功，但是如果访问<code>https://www.baidu.com/</code>的cookie则一定会失败（因为cookie是在document对象中的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>页面1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getDomObject()&quot;</span>&gt;</span>点我获取cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePage&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">getDomObject</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> iframePage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframePage&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取cookie</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(iframePage.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="property">cookie</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到的报错原因也完全相同。</p><img src="https://www.z4a.net/images/2024/08/16/_008.png" alt="img" style="zoom: 80%;" /><h3 id="限制Ajax获取数据"><a href="#限制Ajax获取数据" class="headerlink" title="限制Ajax获取数据"></a>限制Ajax获取数据</h3><p>尝试获取今日头条的数据（明显跨域）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取新闻数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getNews()&quot;</span>&gt;</span>获取头条数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> url =</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在控制台中出现了新的报错</p><blockquote><p>index.html:1 Access to fetch at ‘<a href="https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc">https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc</a>‘ from origin ‘<a href="http://127.0.0.1:5500/">http://127.0.0.1:5500</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p><p>index.html：1 CORS 策略已阻止从源“<a href="http://127.0.0.1:5500”在“https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc”处提取：请求的资源上不存在“Access-Control-Allow-Origin”标头。如果不透明响应满足您的需求，请将请求的模式设置为“no-cors”，以在禁用">http://127.0.0.1:5500”在“https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc”处提取：请求的资源上不存在“Access-Control-Allow-Origin”标头。如果不透明响应满足您的需求，请将请求的模式设置为“no-cors”，以在禁用</a> CORS 的情况下获取资源。</p></blockquote><p>但是实际上可以看到服务器的响应实际上是成功的，但是被浏览器拦截了。</p><img src="https://www.z4a.net/images/2024/08/16/_009.png" alt="img" style="zoom: 80%;" /><p>浏览器抛出的错误为<code> CORS 错误</code>，这代表跨域请求失败。</p><blockquote><p>在上述限制中，浏览器对Ajax获取数据的限制是影响最大的，且开发中经常遇到。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>实际上跨域问题仅限于浏览器端，而服务端不存在这样的问题。</p></li><li><p>Ajax的请求是可以发出的（如上文中的截图所示），但是相应的数据获取不到（被浏览器拦截），具体流程可参考下图。</p><img src="https://www.z4a.net/images/2024/08/16/_002.png" alt="img" style="zoom: 43%;" /></li><li><p><code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>等标签发出的请求也可能出现跨域（常见于使用cdn导入js），但是浏览器不会对标签跨域出现严格的限制，对实际开发无影响。</p></li></ol><h2 id="CORS解决Ajax跨域问题"><a href="#CORS解决Ajax跨域问题" class="headerlink" title="CORS解决Ajax跨域问题"></a>CORS解决Ajax跨域问题</h2><h3 id="CORS概述"><a href="#CORS概述" class="headerlink" title="CORS概述"></a>CORS概述</h3><p>CORS 全称：Cross-Origin Resource Sharing（跨域资源共享），是用于控制浏览器校验跨域请求的一套规范，服务器依照 CORS 规范，添加特定响应头来控制浏览器校验。有如下规则</p><ul><li><p>服务器明确表示拒绝跨域请求，或没有表示，则浏览器校验不通过。</p></li><li><p>服务器明确表示允许跨域请求，则浏览器校验通过。</p></li></ul><blockquote><p>使用 CORS 解决跨域是最正统的方式，且要求服务端进行处理。</p></blockquote><h3 id="CORS解决简单跨域"><a href="#CORS解决简单跨域" class="headerlink" title="CORS解决简单跨域"></a>CORS解决简单跨域</h3><p>使用koa创建一个简单的服务器，对<code>http://127.0.0.1:8081/student</code>进行监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = student;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个页面进行模拟请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getNews()&quot;</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> url =</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;http://127.0.0.1:8081/students&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当对服务器进行请求的时候，出现了一样的跨域请求报错</p><blockquote><p>Access to fetch at ‘<a href="http://127.0.0.1:8081/student">http://127.0.0.1:8081/student</a>‘ from origin ‘<a href="http://127.0.0.1:5500/">http://127.0.0.1:5500</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p><p>CORS 策略已阻止从源“<a href="http://127.0.0.1:5500”在“http://127.0.0.1:8081/student”处提取的访问：请求的资源上不存在“Access-Control-Allow-Origin”标头。如果不透明响应满足您的需求，请将请求的模式设置为“no-cors”，以在禁用">http://127.0.0.1:5500”在“http://127.0.0.1:8081/student”处提取的访问：请求的资源上不存在“Access-Control-Allow-Origin”标头。如果不透明响应满足您的需求，请将请求的模式设置为“no-cors”，以在禁用</a> CORS 的情况下获取资源。</p></blockquote><p>其实从报错中就可以看出，浏览器要求我们添加<code>Access-Control-Allow-Origin</code>这个标头。</p><p>对于简单请求，只需在请求头中将<code>Access-Control-Allow-Origin</code>的值设置为源即可解决跨域请求问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;http://127.0.0.1:5500&quot;</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = student;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样即可正常得到请求的数据</p><img src="https://www.z4a.net/images/2024/08/16/_010.png" alt="img" style="zoom: 100%;" /><p>具体的原理图如下所示，关注请求头的<code>Origin</code>和响应头的<code>Access-Control-Allow-Origin</code>。当发生跨域请求时，只有服务端在响应中说明允许<code>Origin</code>的访问请求时，浏览器才会接受这个响应，具体来说，就是在响应头中添加属性值为<code>Origin</code>的<code>Access-Control-Allow-Origin</code></p><img src="https://www.z4a.net/images/2024/08/16/_003.png" alt="img" style="zoom: 50%;" /><blockquote><p>另外要注意，<code>Access-Control-Allow-Origin</code>的值设置要严格按照<code>Origin</code>的值来设置。比如<code>127.0.0.1</code>和<code>localhost</code>在<code>Access-Control-Allow-Origine</code>的含义是不一样的。</p><p>另外如果是复杂请求，那么仅仅设置<code>Access-Control-Allow-Origin</code>就无效了。</p></blockquote><h3 id="简单请求和复杂请求"><a href="#简单请求和复杂请求" class="headerlink" title="简单请求和复杂请求"></a>简单请求和复杂请求</h3><p>CORS会把请求分为简单请求和复杂请求两类。</p><table><thead><tr><th>简单请求</th><th>复杂请求</th></tr></thead><tbody><tr><td>请求方法（method）为POST，GET，HEAD</td><td>不是简单请求就是复杂请求</td></tr><tr><td>请求头字段要符合<a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">CORS安全规范</a><br />简记：只要不动手修改请求头，一般都能符合该规范</td><td>复杂请求会自动发送预检请求（method为OPTIONS）</td></tr><tr><td>请求头的<code>Content-Type</code>只能是以下的三种：<br />1. text&#x2F;plain<br />2. multipart&#x2F;form-data<br />3. application&#x2F;x-www-form-urlencoded</td><td></td></tr></tbody></table><p>可以看出简单请求的要求很严格，我们可以因此得出一些常见的复杂请求</p><ul><li><p>使用DELETE等其他请求方式</p></li><li><p>添加自己的请求头,如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;beijing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;gcnanmu&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>设置请求头<code>Content-Type</code>为<code>application/json</code>以期望收到json数据</p></li></ul><p>如果是复杂请求，那么需要考虑的因素就会变多。且对于复杂请求，每次发送请求之前浏览器都会发送一个预检请求，来获得服务端的同意。如下图所示，<strong>如果预检请求没通过，那么跨域请求就不会发送。</strong></p><img src="https://www.z4a.net/images/2024/08/16/_011.png" alt="img" style="zoom: 100%;" /><p>关于预检请求：</p><ul><li><p>发送的时机：预检请求由浏览器在跨域请求之前发出</p></li><li><p>主要作用：用于向服务器确实是否允许接下来的跨域请求</p></li><li><p>基本流程：先发起OPTIONS请求，如果通过预检，继续发起实际跨域请求</p></li><li><p>请求头内容：一个OPTIONS预检请求，通常会包含如下请求头</p><table><thead><tr><th>请求头</th><th>含义</th></tr></thead><tbody><tr><td>Origin</td><td>发起请求的源</td></tr><tr><td>Access-Control-Request-Method</td><td>实际请求的 HTTP 方法</td></tr><tr><td>Access-Control-Request-Headers</td><td>实际请求中使用的自定义头（如果有的话）</td></tr></tbody></table><p>继续上述解决简单请求的案例，将fetch请求修改为复杂请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&quot;http://127.0.0.1:8081/student&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="comment">// 添加了不符合安全规范的请求头</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;city&quot;</span>:<span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;gcnanmu&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开调试工具查看预检请求的请求头，即可以看到<code>Origin</code>、<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code>三个属性。</p><img src="https://www.z4a.net/images/2024/08/16/_012.png" alt="img" style="zoom: 80%;" /></li></ul><h3 id="CORS解决复杂跨域问题"><a href="#CORS解决复杂跨域问题" class="headerlink" title="CORS解决复杂跨域问题"></a>CORS解决复杂跨域问题</h3><p>既然预检请求的请求头中有着三个特殊的属性，那么服务器必然要对三个属性进行一定的回应。具体的原理如下图所示（示例）</p><img src="https://www.z4a.net/images/2024/08/16/_005.png" alt="img" style="zoom: 40%;" /><p>服务端根据预检请求发送的请求头中的<code>Origin</code>、<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code>信息，设置对应的响应头属性表示同意。</p><table><thead><tr><th>响应头</th><th>含义</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>允许的源</td></tr><tr><td>Access-Control-Allow-Methods</td><td>允许的方法</td></tr><tr><td>Access-Control-Allow-Headers</td><td>允许的自定义头</td></tr><tr><td>Access-Control-Max-Age</td><td>预检请求的结果的缓存时间（可选）</td></tr></tbody></table><p>将服务端的代码按照图示进行修改。为了和一开始的例子做区分，改为在页面中发送post请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">options</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500&quot;</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;city,name&quot;</span>);</span><br><span class="line">    <span class="comment">// ctx.set(&quot;Access-Control-Max-Age&quot;, 7200);</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500&quot;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = student;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getNews()&quot;</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> url = <span class="string">&quot;http://127.0.0.1:8081/student&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;city&quot;</span>:<span class="string">&quot;beijing&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;gcnanmu&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置之后能够通过预检且获得正确的响应数据</p><img src="https://www.z4a.net/images/2024/08/16/_014.png" alt="img" style="zoom: 80%;" /><blockquote><p>一定不要忘记<code>ctx.set(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;)</code>，否则跨域还是无法正常接收响应。</p><p>如果设置了<code>Access-Control-Max-Age</code>，可以在第一次预检后停止一段时间的预检，在此期间默认通过预检。</p></blockquote><h3 id="借助CORS库快速完成配置"><a href="#借助CORS库快速完成配置" class="headerlink" title="借助CORS库快速完成配置"></a>借助CORS库快速完成配置</h3><p>为了省去每次都要配置请求头的麻烦，对于koa，可以直接使用<code>@koa/cors</code>库</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure><p>如果要简单允许所有的请求，可以使用<code>app.use(Cors())</code>的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cors</span> <span class="keyword">from</span> <span class="string">&quot;@koa/cors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>());</span><br></pre></td></tr></table></figure><p>支持的参数如下所示（来自官网），默认情况下几乎是全开放的，没有做任何限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * CORS middleware</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;Object&#125; [options]</span><br><span class="line"> *  - &#123;String|Function(ctx)&#125; origin `Access-Control-Allow-Origin`, default is &#x27;*&#x27;</span><br><span class="line"> *    If `credentials` set and return `true, the `origin` default value will set to the request `Origin` header</span><br><span class="line"> *  - &#123;String|Array&#125; allowMethods `Access-Control-Allow-Methods`, default is &#x27;GET,HEAD,PUT,POST,DELETE,PATCH&#x27;</span><br><span class="line"> *  - &#123;String|Array&#125; exposeHeaders `Access-Control-Expose-Headers`</span><br><span class="line"> *  - &#123;String|Array&#125; allowHeaders `Access-Control-Allow-Headers`</span><br><span class="line"> *  - &#123;String|Number&#125; maxAge `Access-Control-Max-Age` in seconds</span><br><span class="line"> *  - &#123;Boolean|Function(ctx)&#125; credentials `Access-Control-Allow-Credentials`, default is false.</span><br><span class="line"> *  - &#123;Boolean&#125; keepHeadersOnError Add set headers to `err.header` if an error is thrown</span><br><span class="line"> *  - &#123;Boolean&#125; secureContext `Cross-Origin-Opener-Policy` &amp; `Cross-Origin-Embedder-Policy` headers.&#x27;, default is false</span><br><span class="line"> *  - &#123;Boolean&#125; privateNetworkAccess handle `Access-Control-Request-Private-Network` request by return `Access-Control-Allow-Private-Network`, default to false</span><br><span class="line"> * @return &#123;Function&#125; cors middleware</span><br><span class="line"> * @api public</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>如果想要根据需求设置，可以设定<code>Options</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> corsOptions = &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;http://127.0.0.1:5500&quot;</span>, <span class="comment">// 允许的源</span></span><br><span class="line">    <span class="attr">allowMethods</span>: [<span class="string">&quot;GET&quot;</span>], <span class="comment">// 允许的方法</span></span><br><span class="line">    <span class="attr">allowHeaders</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;city&quot;</span>], <span class="comment">// 允许的自定义头</span></span><br><span class="line">    <span class="attr">exposeHeaders</span>: [<span class="string">&quot;abc&quot;</span>], <span class="comment">// 要暴露的响应头</span></span><br><span class="line">    <span class="comment">// maxAge: 7200, // 预检请求的有效期</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>(corsOptions));</span><br></pre></td></tr></table></figure><p>暴露的属性等在调试工具中可以看到</p><img src="https://www.z4a.net/images/2024/08/16/_015.png" alt="img" style="zoom: 80%;" /><img src="https://www.z4a.net/images/2024/08/16/_016.png" alt="img" style="zoom: 80%;" /><blockquote><p>实测发现<code>cors</code>的<code>allowMethods</code>参数不起作用</p></blockquote><p>后端完整代码备份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cors</span> <span class="keyword">from</span> <span class="string">&quot;@koa/cors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> corsOptions = &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;http://127.0.0.1:5500&quot;</span>,</span><br><span class="line">    <span class="attr">allowMethods</span>: [<span class="string">&quot;GET&quot;</span>],</span><br><span class="line">    <span class="attr">allowHeaders</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;city&quot;</span>],</span><br><span class="line">    <span class="attr">exposeHeaders</span>: [<span class="string">&quot;abc&quot;</span>],</span><br><span class="line">    <span class="comment">// maxAge: 2,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>(corsOptions));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.options(&quot;/student&quot;, (ctx) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     ctx.set(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line"><span class="comment">//     ctx.set(&quot;Access-Control-Allow-Methods&quot;, &quot;POST&quot;);</span></span><br><span class="line"><span class="comment">//     ctx.set(&quot;Access-Control-Allow-Headers&quot;, &quot;city,name&quot;);</span></span><br><span class="line"><span class="comment">//     // ctx.set(&quot;Access-Control-Max-Age&quot;, 7200);</span></span><br><span class="line"><span class="comment">//     ctx.body = &quot;&quot;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500&quot;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = student;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500&quot;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = student;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JSONP解决跨域问题"><a href="#JSONP解决跨域问题" class="headerlink" title="JSONP解决跨域问题"></a>JSONP解决跨域问题</h2><p>除了使用CORS，早期一些浏览器不支持<code>CORS</code>，人们还想到了一个巧妙的办法，可以靠<code>JSONP</code>解决跨域。</p><p>在前文的“跨域会受到哪些限制中”的“注意事项”中我们提到，浏览器是不会严格限制标签的跨域请求的，因此就可以通过<code>script</code>进行js预加载完成数据的传递，JSONP的基础原理就是通过<code>script</code>标签完成跨域请求。</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ol><li><p>客户端创建一个<code>&lt;script&gt;</code>标签，并将其<code>src</code>属性设置为包含跨域请求的 URL，同时准备一个回调函数，这个回调函数用于处理返回的数据。</p></li><li><p>第二步：服务端接收到请求后，将数据封装在回调函数中并返回。</p></li><li><p>第三步：客户端的回调函数被调用，数据以参数的形势传入回调函数。</p></li></ol><p>原理图如下</p><img src="https://www.z4a.net/images/2024/08/16/_004.png" alt="img" style="zoom: 50%;" /><p>从图中可以看出，服务器返回了一个js函数其中携带着数据，浏览器端先定义好对应的js函数，当响应内容到来时，就相当于运行设定好的<code>function</code>，从而获得传递过来的数据。</p><p>先在服务端创建响应逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// script发送的都是get请求</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用模板字符串返回数据</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`callback(<span class="subst">$&#123;student&#125;</span>)`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个页面获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8081/student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一定要注意script定义的先后顺序</strong>。如果颠倒上文html中<code>script</code>标签的顺序，那么就会出现<code>ReferenceError: callback is not defined</code>的报错，这是因为<code>script</code>的默认加载顺序为从上至下，因此一定要先定义好<code>callback</code>函数，然后再发送请求，具体到代码来说就是<code>script</code>标签的顺序问题。</p><p>打开本地服务器，得到如下的报错<code>Uncaught SyntaxError: Unexpected identifier &#39;Object&#39;</code>，意思是<code>未捕获的 SyntaxError：意外的标识符“Object”</code>,通过观察发现返回的数据全变成了<code>[object,Object]</code></p><img src="https://www.z4a.net/images/2024/08/16/_017.png" alt="img" style="zoom: 80%;" /><p>修改后端的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// script发送的都是get请求</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`callback(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(student)&#125;</span>)`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样之后即可正确获取数据</p><img src="https://www.z4a.net/images/2024/08/16/_018.png" alt="img"  /><p>完善案例，希望通过点击按钮来获取数据，且不想让后端频繁根据事先定义的函数名称修改返回字符串中的函数名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showData()&quot;</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建一个script标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设定其中的src属性为要请求的属性</span></span></span><br><span class="line"><span class="language-javascript">            script.<span class="property">src</span> = <span class="string">&quot;http://localhost:8081/student?callback=getData&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将标签添加到页面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果script标签加载完成就删除</span></span></span><br><span class="line"><span class="language-javascript">            script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/student&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; callback &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(student)&#125;</span>)`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在页面部分，跟之前一样，要先定义请求函数<code>getData</code>，为了后端的函数名可以同步，通过查询字符串的方式传递当前定义好的请求函数名（<code>callback=getData</code>），后端可以通过获取callback中的参数来调整返回字符串中的函数名。</p><img src="https://www.z4a.net/images/2024/08/16/_019.png" alt="img"  /><blockquote><p>注意点：由于是使用js添加<code>script</code>到页面，加载完成后一定要记得删除<code>script</code>标签，不然每点击一次就会生成一个<code>script</code>。</p></blockquote><h3 id="使用jQuery"><a href="#使用jQuery" class="headerlink" title="使用jQuery"></a>使用jQuery</h3><p>jQuery有封装好的JSONP请求函数，可以更简单实现JSONP请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showData()&quot;</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://localhost:8081/student?callback=?&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置代理解决跨域问题"><a href="#配置代理解决跨域问题" class="headerlink" title="配置代理解决跨域问题"></a>配置代理解决跨域问题</h2><p>上文中提到，服务器与服务器之间是不存在跨域问题的，因此我们可以通过自己的服务器间接解决跨域请求的问题。</p><p>创建代理需要使用到<code>koa-server-http-proxy</code>。下面的例子使用<code>koa-server-http-proxy</code>进行展示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs/promises&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> koaServerHttpProxy <span class="keyword">from</span> <span class="string">&quot;koa-server-http-proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载静态资源index.html 目的是保证与代理服务器同源</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">type</span> = <span class="string">&quot;html&quot;</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="title function_">koaServerHttpProxy</span>(<span class="string">&quot;/api/&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://www.toutiao.com&quot;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showData()&quot;</span>&gt;</span>获取学生数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="string">&#x27;http://127.0.0.1:8081/api/hot-event/hot-board/?origin=toutiao_pc&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码尝试对头条数据进行请求。要理解这个过程，首先要理解这个代理部分做了什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="title function_">koaServerHttpProxy</span>(<span class="string">&quot;/api/&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://www.toutiao.com&quot;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/16/_020.png" alt="img" style="zoom: 50%;" /><p>根据上图所示，浏览器首先向代理服务器发出同源请求，此请求的协议域名部分与代理服务器保持一致，当代理服务器收到请求后，将请求地址转化为发送给今日头条的请求地址，由于服务器不存在跨域问题，代理服务器可以获得头条服务器所发回的数据，再将发回的数据发送回到同源的浏览器。这样就绕开了跨域的限制。</p><img src="https://www.z4a.net/images/2024/08/16/_021.png" alt="img"  /><blockquote><p>使用<code>koa2-proxy-middleware</code>也是可以，但是<code>koa2-proxy-middleware</code>不支持ES6模块化语法，需要使用<code>commonjs</code>的导入规则。<code>koa2-proxy-middleware</code>的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;koa2-proxy-middleware&quot;</span>); <span class="comment">//引入代理模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">targets</span>: &#123;</span><br><span class="line">        <span class="comment">// (.*) means anything</span></span><br><span class="line">        <span class="string">&quot;/api/(.*)&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&quot;https://www.toutiao.com&quot;</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">proxy</span>(options));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Process <span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span>...`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Cros </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化-快速入门</title>
      <link href="/post/javascript-mo-kuai-hua-kuai-su-ru-men/"/>
      <url>/post/javascript-mo-kuai-hua-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模块化是指根据用途或者逻辑将js代码分为多个js文件，且各个文件之间的数据相互隔离，互不影响。模块与模块之间可以通过导出和导入操作来共享或获取模块中想要的数据和功能。</p><ul><li>导出（暴露）：模块公开其内部的变量和函数，通过导入和导出进行数据和功能的共享。</li><li>导入（引入）：模块引用和使用其他模块导出的内容，以重用代码和功能。</li></ul><img src="https://www.z4a.net/images/2024/08/15/js_001.png" alt="image-20240815120643834" style="zoom:50%;" /><p>为什么需要模块化开发呢？因为js早期是不存在模块化这个概念的，在实际开发过程中出现过如下问题：</p><ol><li>全局类型污染（相同的变量名会相互覆盖）</li><li>依赖混乱（典型的jQuery和BootStrap的引入顺序问题）</li><li>数据安全问题（完整的数据被导出）</li></ol><p>因此迫切需要使用模块化技术来解决上述问题。</p><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><p>出现过的模块化规范</p><ul><li>CommonJs（常用）</li><li>AMD</li><li>CMD</li><li>ES6（常用）</li></ul><p>随着 Node.js 的出现，JavaScript 不再局限于浏览器环境，而是开始进入服务器端编程领域。开发者们开始需要一个更好的方式来组织和重用代码。在浏览器环境中，通常使用 <code>&lt;script&gt;</code> 标签来加载脚本文件，这种方式对于服务器端环境来说并不适用，服务器端环境需要更灵活和强大的模块化支持。为了满足这一需求，由Mozilla工程师提出ServerJs，因此Nodejs社区制定了 CommonJS 规范。这个规范定义了一种标准的模块系统，允许开发者以文件的形式组织代码，并且可以在这些文件之间共享代码。因此CommonJs广泛用于服务端，也就是Nodejs环境（<strong>浏览器不直接支持这一规范</strong>）</p><p>后来ECMA官方推出了ES6模块化规范，<strong>同时可以兼容服务端和浏览器。</strong></p><h2 id="CommonJs规范"><a href="#CommonJs规范" class="headerlink" title="CommonJs规范"></a>CommonJs规范</h2><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>新建<code>student.js</code>、<code>teacher.js</code>和<code>index.js</code>三个js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> student = <span class="built_in">require</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>, student.<span class="title function_">getEmail</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">name</span>, teacher.<span class="title function_">getEmail</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// John 123456789@gmail.com</span></span><br><span class="line"><span class="comment">// Tom 79898989898@gmail.com</span></span><br></pre></td></tr></table></figure><p>从上述代码中可以看出，导出使用的是<code>exports</code>，导入使用的是<code>require</code></p><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>导出的方式有两种</p><ol><li>使用<code>exports.name = value</code></li><li>使用<code>module.exports = value</code></li></ol><p>注意点：</p><ol><li><p>只要其他地方导入了当前的js文件，即使js内部没有导出，也会默认导出<code>&#123;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设student.js没有导出数据</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> student = <span class="built_in">require</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student) <span class="comment">// 打印实际为&#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>module.exports</code>、<code>this</code>、<code>exports</code>都指向同一个<code>&#123;&#125;</code>，最终导出以<code>module.exports</code>为准</p><img src="https://www.z4a.net/images/2024/08/15/js_002.png" alt="image-20240815124326614" style="zoom:50%;" /><p>导出的例子以如下代码为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; name, getEmail &#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getSkills</span> = getSkills;</span><br></pre></td></tr></table></figure><p>在index.js导入并打印<code>student</code>，得到的结果为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> name<span class="punctuation">:</span> &#x27;John&#x27;<span class="punctuation">,</span> getEmail<span class="punctuation">:</span> <span class="punctuation">[</span>Function<span class="punctuation">:</span> getEmail<span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>exports</code>是<code>module.exports</code>的一个引用，主要用于给导出对象添加属性值<code>exports.name = value</code></p></li></ol><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>导入数据使用<code>require</code>，可以将其作为一个对象接收（见快速上手），也可以使用解构的方式接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; name, getEmail, getSkills &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; name, getEmail, getSubjects &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name,getEmail,getSkills&#125; = <span class="built_in">require</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;name,getEmail,getSubjects&#125; = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"><span class="comment">/* const &#123;name,getEmail,getSubjects&#125; = require(&quot;./teacher.js&quot;);</span></span><br><span class="line"><span class="comment">    ^</span></span><br><span class="line"><span class="comment">    SyntaxError: Identifier &#x27;name&#x27; has already been declared */</span> </span><br></pre></td></tr></table></figure><p>上述代码展示了解构导入的命名冲突问题，有两种解决方法：</p><ol><li><p>第二个对象不使用结构的方法，使用<code>const teacher = require(&quot;./teacher.js&quot;);</code>进行导入</p></li><li><p>使用重命名的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:stuName,<span class="attr">getEmail</span>:stuEmail,getSkills&#125; = <span class="built_in">require</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:teaName,<span class="attr">getEmail</span>:teaEmail,getSubjects&#125; = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuName);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stuEmail</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSkills</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teaName);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">teaEmail</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSubjects</span>());</span><br></pre></td></tr></table></figure></li></ol><h3 id="扩展理解"><a href="#扩展理解" class="headerlink" title="扩展理解"></a>扩展理解</h3><p>为什么我们能在js中直接使用非关键字<code>module</code>、<code>exports</code>？</p><p>因为在本质上来说，当前js文件是被包裹在另一个<code>function</code>函数中的，示意如下图。</p><img src="https://www.z4a.net/images/2024/08/15/js_005.png" alt="image-20240815132804344" style="zoom:50%;" /><p>可以打印看到函数的全貌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><p>得到的打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function (exports, require, module, __filename, __dirname) &#123;</span><br><span class="line">const name = &quot;Tom&quot;;</span><br><span class="line">const age = 35;</span><br><span class="line"></span><br><span class="line">function getEmail() &#123;</span><br><span class="line">        return &quot;79898989898@gmail.com&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getSubjects() &#123;</span><br><span class="line">        return [&quot;Math&quot;, &quot;Science&quot;, &quot;English&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arguments.callee.toString());</span><br><span class="line"></span><br><span class="line">// module.exports = &#123; name, getEmail, getSubjects &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器运行"><a href="#浏览器运行" class="headerlink" title="浏览器运行"></a>浏览器运行</h3><h4 id="问题展示"><a href="#问题展示" class="headerlink" title="问题展示"></a>问题展示</h4><p>因为在诞生之初，CommonJs就是为服务端进行制定的（因此还有另一个称呼叫做ServerJs），所以浏览器并不支持这个规范，我们新建一个<code>index.html</code>，尝试导入<code>index.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器得到的报错提示如下</p><img src="https://www.z4a.net/images/2024/08/15/js_003.png" alt="image-20240815131531856"  /><p>这也说明了浏览器并不支持CommonJs规范，需要使用额外的工具进行转化</p><h4 id="转化工具"><a href="#转化工具" class="headerlink" title="转化工具"></a>转化工具</h4><p>可以使用<a href="https://browserify.org/">Browserify</a>进行转化，将CommonJs的部分转化为浏览器支持的其他代码</p><p>安装Browerify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i browserify -g</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify index.js -o build.js</span><br></pre></td></tr></table></figure><blockquote><p>index.js是输入文件，build.js是输出文件</p></blockquote><p>编译得到的结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.js</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params">e,n,t</span>)&#123;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params">i,f</span>)&#123;<span class="keyword">if</span>(!n[i])&#123;<span class="keyword">if</span>(!e[i])&#123;<span class="keyword">var</span> c=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">if</span>(!f&amp;&amp;c)<span class="keyword">return</span> <span class="title function_">c</span>(i,!<span class="number">0</span>);<span class="keyword">if</span>(u)<span class="keyword">return</span> <span class="title function_">u</span>(i,!<span class="number">0</span>);<span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cannot find module &#x27;&quot;</span>+i+<span class="string">&quot;&#x27;&quot;</span>);<span class="keyword">throw</span> a.<span class="property">code</span>=<span class="string">&quot;MODULE_NOT_FOUND&quot;</span>,a&#125;<span class="keyword">var</span> p=n[i]=&#123;<span class="attr">exports</span>:&#123;&#125;&#125;;e[i][<span class="number">0</span>].<span class="title function_">call</span>(p.<span class="property">exports</span>,<span class="keyword">function</span>(<span class="params">r</span>)&#123;<span class="keyword">var</span> n=e[i][<span class="number">1</span>][r];<span class="keyword">return</span> <span class="title function_">o</span>(n||r)&#125;,p,p.<span class="property">exports</span>,r,e,n,t)&#125;<span class="keyword">return</span> n[i].<span class="property">exports</span>&#125;<span class="keyword">for</span>(<span class="keyword">var</span> u=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="built_in">require</span>,i=<span class="number">0</span>;i&lt;t.<span class="property">length</span>;i++)<span class="title function_">o</span>(t[i]);<span class="keyword">return</span> o&#125;<span class="keyword">return</span> r&#125;)()(&#123;<span class="number">1</span>:[<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="variable language_">module</span>,<span class="built_in">exports</span></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:stuName,<span class="attr">getEmail</span>:stuEmail,getSkills&#125; = <span class="built_in">require</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:teaName,<span class="attr">getEmail</span>:teaEmail,getSubjects&#125; = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuName);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stuEmail</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSkills</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teaName);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">teaEmail</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSubjects</span>());</span><br><span class="line"></span><br><span class="line">&#125;,&#123;<span class="string">&quot;./student.js&quot;</span>:<span class="number">2</span>,<span class="string">&quot;./teacher.js&quot;</span>:<span class="number">3</span>&#125;],<span class="number">2</span>:[<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="variable language_">module</span>,<span class="built_in">exports</span></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; name, getEmail, getSkills &#125;;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;&#125;],<span class="number">3</span>:[<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="variable language_">module</span>,<span class="built_in">exports</span></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arguments.callee.toString());</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; name, getEmail, getSubjects &#125;;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;&#125;]&#125;,&#123;&#125;,[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>在html中引入<code>build.js</code>，之后打开浏览器即可正常打印</p><img src="https://www.z4a.net/images/2024/08/15/js_004.png" alt="image-20240815132544123"  /><h2 id="ES6规范"><a href="#ES6规范" class="headerlink" title="ES6规范"></a>ES6规范</h2><p>这是ECMAScript官方制定的JavaScript模块化规范</p><h3 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手"></a>快速上手</h3><p>和之前一样创建<code>index.js</code>、<code>student.js</code>、<code>teacher.js</code>三个js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> student <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> teacher <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher);</span><br></pre></td></tr></table></figure><p>打印得到的结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Module: null prototype] &#123;       </span><br><span class="line">  age: 25,</span><br><span class="line">  getEmail: [Function: getEmail],</span><br><span class="line">  name: &#x27;John&#x27;</span><br><span class="line">&#125;</span><br><span class="line">[Module: null prototype] &#123;       </span><br><span class="line">  age: 35,</span><br><span class="line">  getEmail: [Function: getEmail],</span><br><span class="line">  name: &#x27;Tom&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Node中运行ES6模块"><a href="#Node中运行ES6模块" class="headerlink" title="Node中运行ES6模块"></a>Node中运行ES6模块</h3><p><strong>Nodejs是无法直接运行ES6的模块化文件的，如果直接运行会出现报错。</strong></p><blockquote><p>d:\Web\module_test\index.js:1<br>import * as student from “.&#x2F;student.js”;<br>^^^^^^</p><p>SyntaxError: Cannot use import statement outside a module</p></blockquote><p>这时候有三种办法：</p><ol><li><p>在<code>index.html</code>中引入，将<code>script</code>标签的<code>type</code>属性设置为<code>module</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>live Server</code>创建本地服务器，打开控制台可以看到如下输出</p><img src="https://www.z4a.net/images/2024/08/15/js_006.png" alt="image-20240815153307030" style="zoom: 80%;" /></li><li><p>将所有文件的后缀名改为<code>.mjs</code>，之后可直接在Nodejs中运行</p></li><li><p>创建<code>package.json</code>文件，加上<code>&quot;type&quot;:&quot;module&quot;</code>，之后可直接在Nodejs中运行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="导出数据-1"><a href="#导出数据-1" class="headerlink" title="导出数据"></a>导出数据</h3><p>ES6模块导出有三种方法：</p><ol><li>分别导出</li><li>统一导出</li><li>默认导出</li></ol><blockquote><p>为了方便演示，导入模块使用的是万能写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> student <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> teacher <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher);</span><br></pre></td></tr></table></figure></blockquote><h4 id="分别导出"><a href="#分别导出" class="headerlink" title="分别导出"></a>分别导出</h4><p>在每个想要导出的变量前使用export关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别导出仅仅适用于要导出的数据相对较少的情况，而且分别导出也不能直观展示导出的所有数据和方法。</p><h4 id="统一导出"><a href="#统一导出" class="headerlink" title="统一导出"></a>统一导出</h4><p>统一导出能够一次性导出多个数据，和分别导出没有本质上的差别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, age, getEmail &#125;;</span><br></pre></td></tr></table></figure><p>导出打印的结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="title class_">Module</span>: <span class="literal">null</span> prototype] &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">getEmail</span>: [<span class="title class_">Function</span>: getEmail],</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="title class_">Module</span>: <span class="literal">null</span> prototype] &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">getEmail</span>: [<span class="title class_">Function</span>: getEmail],</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>export后跟{}，并不是说明导出的是一个对象，这从上述的打印结果中也可以看出，导出的数据和方法被包裹在默认的导出对象中。</p></blockquote><h4 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h4><p>从分别导出和统一导出的打印结果可以看出，导出的数据都是统一放在一个对象中。</p><p>默认导出相比之前的两种导出方法得到的输出有所不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; name, age, getEmail &#125;;</span><br></pre></td></tr></table></figure><p>打印的输出为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Module: null prototype] &#123;</span><br><span class="line">  default: &#123; name: &#x27;John&#x27;, age: 25, getEmail: [Function: getEmail] &#125;</span><br><span class="line">&#125;</span><br><span class="line">[Module: null prototype] &#123;</span><br><span class="line">  age: 35,</span><br><span class="line">  getEmail: [Function: getEmail],</span><br><span class="line">  name: &#x27;Tom&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察输出可以发现，使用<code>export default</code>导出后得到的数据被包裹在输出对象的<code>default</code>对象中，如果要进一步访问，则需要使用<code>student.default.属性名</code>进行获取</p><h4 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h4><p>上述的三种方法可以混合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// 分别导出</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getEmail &#125;; <span class="comment">// 统一导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; age &#125;; <span class="comment">// 默认导出</span></span><br></pre></td></tr></table></figure><p>得到的打印结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Module: null prototype] &#123;</span><br><span class="line">  default: &#123; age: 35 &#125;,</span><br><span class="line">  getEmail: [Function: getEmail],</span><br><span class="line">  name: &#x27;Tom&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从打印的结果来看，完全符合上述不同导出方法对应的规则。</p><h3 id="导入数据-1"><a href="#导入数据-1" class="headerlink" title="导入数据"></a>导入数据</h3><p>导入有很多中方法，但是每种方法都有对应的导出方式，要注意相互的配对。</p><h4 id="导入全部"><a href="#导入全部" class="headerlink" title="导入全部"></a>导入全部</h4><p>即万能导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> student <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> teacher <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher);</span><br></pre></td></tr></table></figure><p>这种方法是通用的，但是如果有模块使用的是默认导出，那么得到导出数据的路径会变长（比如<code>student.default.name</code>）</p><h4 id="命名导入"><a href="#命名导入" class="headerlink" title="命名导入"></a>命名导入</h4><p>如果导出模块使用的是分别导出或统一导出（也可以两者混用），那么可以使用命名导入的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, age &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, getEmail &#125; <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="comment">// import * as teacher from &quot;./teacher.js&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getEmail</span>()); <span class="comment">// 123456789@gmail.com</span></span><br></pre></td></tr></table></figure><p>如果想要更换变量命名，使用<code>name as newName</code>的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> stuName, age <span class="keyword">as</span> stuAge, getEmail <span class="keyword">as</span> stuGetEmail &#125; <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="comment">// import * as teacher from &quot;./teacher.js&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuName); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuAge); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stuGetEmail</span>()); <span class="comment">// 123456789@gmail.com</span></span><br></pre></td></tr></table></figure><h4 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h4><p>如果导出模块使用的是默认导出，那么可以使用默认导入的形式，直接给导入的模块命一个模块名即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; age, name, getEmail &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// import &#123; name as stuName, age as stuAge, getEmail as stuGetEmail &#125; from &quot;./student.js&quot;;</span></span><br><span class="line"><span class="keyword">import</span> teacher <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">age</span>); <span class="comment">// 35</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="title function_">getEmail</span>()); <span class="comment">// 79898989898@gmail.com</span></span><br></pre></td></tr></table></figure><h4 id="命名和默认混用"><a href="#命名和默认混用" class="headerlink" title="命名和默认混用"></a>命名和默认混用</h4><p>如果出现导出方式混用，可以使用对应的导入方法进行一次性的导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;79898989898@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubjects</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>, <span class="string">&quot;English&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; age, name &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// import &#123; name as stuName, age as stuAge, getEmail as stuGetEmail &#125; from &quot;./student.js&quot;;</span></span><br><span class="line"><span class="keyword">import</span> teacher, &#123; getEmail &#125; <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">age</span>); <span class="comment">// 35</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getEmail</span>()); <span class="comment">// 79898989898@gmail.com</span></span><br></pre></td></tr></table></figure><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><p>动态导入即在需要的情况下才导入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./student.js&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><p>当count达到要求后，导入student.js模块并打印，打印的结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Module: null prototype] &#123;       </span><br><span class="line">  age: 25,</span><br><span class="line">  getEmail: [Function: getEmail],</span><br><span class="line">  name: &#x27;John&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入不接收任何数据"><a href="#导入不接收任何数据" class="headerlink" title="导入不接收任何数据"></a>导入不接收任何数据</h4><p>如果不需要接收任何数据，那么可以直接导入模块地址，形如<code>import &quot;模块地址&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>上面的例子，每次运行index.js都会打印出一个随机数</p><h2 id="关于问题解决的理解"><a href="#关于问题解决的理解" class="headerlink" title="关于问题解决的理解"></a>关于问题解决的理解</h2><p>那么通过模块化是否解决了开头提出的三个问题呢？</p><ol><li>全局类型污染（相同的变量名会相互覆盖）</li><li>依赖混乱（典型的jQuery和BootStrap的引入顺序问题）</li><li>数据安全问题（完整的数据被导出）</li></ol><p>个人的理解如下：</p><ol><li><p>全局污染的问题已经可以通过在导入时重命名的方法防止同名变量的覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> stuName, age <span class="keyword">as</span> stuAge, getEmail <span class="keyword">as</span> stuGetEmail &#125; <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> teaName,age <span class="keyword">as</span> teaAge,getEmail <span class="keyword">as</span> teaGetEmail&#125; <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuName); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stuAge); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stuGetEmail</span>()); <span class="comment">// 123456789@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teaName); <span class="comment">// Tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teaAge); <span class="comment">// 35</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">teaGetEmail</span>()); <span class="comment">// 79898989898@gmail.com</span></span><br></pre></td></tr></table></figure></li><li><p>依赖混乱问题的解决可以通过下图来论证（假设存在如下图的相互依赖关系）</p><img src="https://www.z4a.net/images/2024/08/15/js_007.png" alt="image-20240815163315119" style="zoom: 33%;" /><p>可以看到，各个模块不再需要考虑有关导入顺序的问题，当模块需要其他模块作为依赖时，只需关注如何导入该依赖模块，而不需要注意导入的顺序。</p></li><li><p>数据安全问题</p><p>以<code>student.js</code>、<code>index.js</code>为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123456789@gmail.com&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSkills</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Golang&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, age &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, getEmail &#125; <span class="keyword">from</span> <span class="string">&quot;./student.js&quot;</span>;</span><br><span class="line"><span class="comment">// import teacher, &#123; getEmail &#125; from &quot;./teacher.js&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getEmail</span>());</span><br></pre></td></tr></table></figure><p>在index.html中引入index.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，尝试获取<code>name</code>、<code>age</code>、<code>getEmail</code>，除了<code>name</code>，发现返回的都是<code>xxx is not defined</code>，这已经说明解决了数据安全问题，在没有导出数据的情况下，是无法获取到数据的。（实际上，这就是module方式带来的便利之处）</p><img src="https://www.z4a.net/images/2024/08/15/js_008.png" alt="image-20240815163935566" style="zoom: 80%;" /><blockquote><p>name可以返回一个”“的原因是window默认自带name属性，且默认值就为”“</p></blockquote></li></ol><h2 id="数据引用问题"><a href="#数据引用问题" class="headerlink" title="数据引用问题"></a>数据引用问题</h2><p>commonjs和es6处理导出数据的隔离方式有所不同，还要从下面的例子说起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        sum += <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; sum, increment &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; sum, increment &#125; = <span class="title function_">count</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>可以看出解构出的sum和函数内的sum值地址已经完全不同，相当于将函数内的sum复制了一份给解构的sum</strong></p><p>CommonJs也符合上述的规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    sum += <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;sum, increment&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; sum, increment &#125; = <span class="built_in">require</span>(<span class="string">&quot;./teacher.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>但是ES6的模块化规范却截然相反</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// teacher.js</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    sum += <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;sum, increment&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum, increment &#125; <span class="keyword">from</span> <span class="string">&quot;./teacher.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">increment</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>最终打印得到的<code>sum</code>值为3，这说明导出模块与倒入模块使用的<code>sum</code>是同一个内存地址，修改一次则处处变化，这可能会导致一些意想不到的问题。</p><p><strong>因此在使用ES6的模块化规范下，最好是将导出的数据设置为常量（<code>const</code>）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CommonJs </tag>
            
            <tag> ECMA6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript-快速上手</title>
      <link href="/post/typescript-kuai-su-ru-men/"/>
      <url>/post/typescript-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TypeScript是微软开发的基于JavaScript（JS）的一个扩展语言，包含JS所有内容，并增加了静态类型检查、接口、泛型等特性，适合大型项目开发。</p><p>为什么需要TypeScript？主要是因为JavaScript有如下困扰：</p><ul><li>本身是动态数据类型，导致数据类型不清晰</li><li>无法判断是否有逻辑漏洞</li><li>可以访问不存在的属性</li><li>无法发现低级的拼写错误</li></ul><p>TypeScript是JavaScript的一个超集，主要用来进行代码的静态类型检查（在运行或编译前就发现并提出错误），这在大型项目中会很有用。</p><blockquote><p>Python的TypingHit的灵感或许来自这里</p></blockquote><h2 id="编译TS"><a href="#编译TS" class="headerlink" title="编译TS"></a>编译TS</h2><h3 id="手动编译"><a href="#手动编译" class="headerlink" title="手动编译"></a>手动编译</h3><p>浏览器等运行环境无法直接运行TypeScript，需要先将Ts转化为Js</p><p>安装TypeScript</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g </span><br></pre></td></tr></table></figure><p>新建index.ts文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure><blockquote><p>tsc为TypeScript Compiler（ts编译器）的缩写</p></blockquote><p>在文件夹会生成一个同名的index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h3 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h3><p>可以启用自动监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br><span class="line">tsc --watch [路径名/文件名]</span><br></pre></td></tr></table></figure><p><code>tsc --init</code>会自动生成一个<code>tsconfig.json</code>文件，文件中的选项都是ts转化js的配置项。<code>tsc --watch</code>的作用是监听所在的路径是否有ts文件，如有则自动编译为js</p><p>常用的为下面三个属性</p><ul><li>“strict”: true 是否开启严格模式</li><li>“target”: “es2016” 使用那种规范进行转化 es2016是指es7 也可以直接写ES7</li><li>“noEmitOnError”: true 当ts文件有语法错误的是否是否编译</li><li>“module”: “ES6” 指定ts使用的模块化规范 如”commonjs”，”ES6”等</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>ts的基本用法即为为变量添加类型申明。</p><p>编写如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">userName</span>: <span class="built_in">string</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isMan</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 返回类型要与规定的类型一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 此处参数不能多也不能少 如果只写一个，js会定义另一个为undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>编译得到的js如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> userName = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> isMan = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><blockquote><p>ts存在默认的类型推断</p><p>如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">num = <span class="string">&quot;hello&quot;</span> <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>ts语法检查器默认将num指定为number类型，因此上述代码会出现“不能将类型“string”分配给类型“number”的报错</p></blockquote><h2 id="类型总览"><a href="#类型总览" class="headerlink" title="类型总览"></a>类型总览</h2><h3 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h3><p>JavaScript有如下数据类型</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>bigint</li><li>symbol</li><li>object （包含 Array Function  Date Error等）</li></ul><p>TypeScript有如下数据类型：</p><ul><li>支持所有JavaScript类型</li><li>六个独有类型<ul><li>any</li><li>unkown</li><li>never</li><li>void</li><li>tuple</li><li>enum</li></ul></li><li>两个用于自定义类型的方式<ul><li>type</li><li>interface</li></ul></li></ul><h3 id="大小写的区别"><a href="#大小写的区别" class="headerlink" title="大小写的区别"></a>大小写的区别</h3><p>需要注意基本元素类型（小写）和包装器对象（大写）的区别：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>: <span class="title class_">String</span>;</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">// str1 = new String(&quot;World&quot;); // Error - Type &#x27;String&#x27; is not assignable to type &#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str1); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str2); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>报错为<code>不能将类型“String”分配给类型“string”。“string”是基元，但“String”是包装器对象。如可能首选使用“string”</code>。</p><p>报错显示<code>String</code>表示的是包装器对象，而<code>string</code>代表的是基元，因此出现了语法错误。<strong>ts官方推荐使用小写的类型申明</strong></p><blockquote><p>原始类型：它们内存占用少，处理速度快</p><p>包装对象：复杂类型，内存占用更多，在实际代码中很少使用</p><p>自动装箱：JavaScript在必要时会讲原始类型转化为包装对象，方便调用方法和属性（解释器自动完成的）</p></blockquote><p>一个自动装箱的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> size = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个临时的字符串对象</span></span><br><span class="line">    <span class="keyword">let</span> tempStringObject = <span class="keyword">new</span> <span class="title class_">String</span>(str);</span><br><span class="line">    <span class="comment">// 访问字符串对象的 length 属性</span></span><br><span class="line">    <span class="keyword">let</span> lengthValue = tempStringObject.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 释放临时字符串对象 返回字符串长度</span></span><br><span class="line">    <span class="keyword">return</span> lengthValue;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(size); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h2><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p><code>any</code>表示当前的变量可以是任意的数据类型，一旦赋予<code>any</code>属性，就代表完全放弃了类型检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式any 悬停可观察</span></span><br><span class="line"><span class="keyword">let</span> b;</span><br></pre></td></tr></table></figure><p>注意点：<code>any</code>类型可以覆盖任何数据类型，这会导致类型原本规定的类型改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">b = a;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b); <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure><p>另外，<code>any</code>类型可以调用任何属性与方法（即便本身类型不存在）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下都不会报错</span></span><br><span class="line">a.<span class="title function_">toUpperCase</span>(); </span><br><span class="line">a.<span class="title function_">length</span>();</span><br><span class="line">a.<span class="title function_">eee</span>();</span><br><span class="line">a.<span class="title function_">ppp</span>();</span><br></pre></td></tr></table></figure><blockquote><p>非迫不得已，不要使用<code>any</code>类型</p></blockquote><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><p><code>unkown</code>是一个类型更加安全的<code>any</code>，也表示当前数据类型可以是任意的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">b = a; <span class="comment">// 不能将类型“unknown”分配给类型“string”</span></span><br></pre></td></tr></table></figure><p>从上面的实例可以看出<code>unkown</code>不会出现把原本变量类型覆盖的情况（直接报错）。但是也会因此出现类型相同但是无法赋值的情况：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">9</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span> = a; <span class="comment">// 不能将类型“unknown”分配给类型“string”。</span></span><br></pre></td></tr></table></figure><p>可以有三种方法解决这种问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    b = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法 断言</span></span><br><span class="line">b = a <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方法 断言</span></span><br><span class="line">b = &lt;<span class="built_in">string</span>&gt;a;</span><br></pre></td></tr></table></figure><p>在<code>unkown</code>中，不能调用任何属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">toUpperCase</span>(); <span class="comment">// 报错 a是unknown类型</span></span><br><span class="line">a.<span class="title function_">trim</span>(); <span class="comment">// 报错 a是unknown类型</span></span><br><span class="line">a.<span class="property">length</span>; <span class="comment">// 报错 a是unknown类型</span></span><br></pre></td></tr></table></figure><p>同理可以使用断言来告诉编译器变量的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// hello</span></span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;a).<span class="title function_">toUpperCase</span>();</span><br><span class="line">(a <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">toUpperCase</span>();</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code>表示永远不会返回结果</p><p>不要将变量定义为<code>never</code>，这将导致对象无法被赋予任何值，<strong>而且这也没有意义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">99</span>; <span class="comment">// 报错 不能将number类型赋值给never类型</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 报错 不能将string类型赋值给never类型</span></span><br><span class="line">a = <span class="literal">true</span>; <span class="comment">// 报错 不能将boolean类型赋值给never类型</span></span><br></pre></td></tr></table></figure><p><code>never</code>一般用于表示函数永远不会正常结束，如下三种例子：抛出异常、无限循环（无法结束）、自我无限调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo3</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">demo3</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>never</code>一般是编译器自动推断出来的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str :<span class="built_in">string</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// let str: never</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，<code>else</code>的部分永远无法到达，所以会被自动推断为<code>never</code>类型</p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p><code>void</code>表示值为空，函数调用者不需要关心返回值，无法使用返回值做任何操作</p><p>常用于表示函数并没有返回值，且在形式上只接受<code>undefined</code>作为返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) :<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 语法上隐式返回undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params"></span>) :<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo3</span>(<span class="params"></span>) :<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外调用者不能根据其返回值做任何操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">demo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result)&#123; <span class="comment">// Error:无法测试&quot;void&quot;类型表达式的真实性</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这点和将返回值定义为<code>undefined</code>是有明显的不同的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>): <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="literal">undefined</span> = <span class="title function_">demo</span>();</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is not undefined&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>如果将函数返回值定义为<code>void</code>，那么：</p><p>语法上：函数可以返回<code>undefined</code>，无论是显示返回，还是隐式返回</p><p>语义上：函数调用者无需关心函数的返回值，也不应依赖返回值进行任何操作</p></blockquote><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>object 表示一个对象，他可以是基元之外的任意数据类型。</p><p>Object 在object的基础上可以表示基元，它们都不能表示<code>null</code>或者<code>undefined</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123; <span class="attr">name</span>: <span class="string">&quot;Max&quot;</span> &#125;;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">a = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 1 // Error 不能将number赋值给object</span></span><br><span class="line"><span class="comment">// a = true // Error 不能将boolean赋值给object</span></span><br><span class="line"><span class="comment">// a = &#x27;string&#x27; // Error 不能将string赋值给object</span></span><br><span class="line"><span class="comment">// a = null; // Error 不能将null赋值给object</span></span><br><span class="line"><span class="comment">// a = undefined; // Error 不能将undefined赋值给object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Object</span>;</span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&quot;Max&quot;</span> &#125;;</span><br><span class="line">b = &#123;&#125;;</span><br><span class="line">b = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">b = [];</span><br><span class="line"></span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br><span class="line">b = <span class="string">&quot;string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b = null; // Error 不能将null赋值给Object</span></span><br><span class="line"><span class="comment">// b = undefined; // Error 不能将undefined赋值给Object</span></span><br></pre></td></tr></table></figure><blockquote><p>从上述代码可以看出，object表示的范围过于宽泛，因此在实际中并不使用</p></blockquote><h4 id="替代用法"><a href="#替代用法" class="headerlink" title="替代用法"></a>替代用法</h4><p>开发中object并不常用，那么我们如何定义函数、对象、数组的类型呢？</p><ol><li><p>函数</p><p>基础的用法如下所示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><p>另外还可以使用接口，自定义类型等方式进行定义</p></li><li><p>对象</p><p>基础的用法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 表示可以有任意数量的其他属性，但是key必须是string类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其中的<code>key</code>其实只是个标识符，换什么都可以</p></blockquote></li><li><p>数组</p><p>基础用法如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="comment">// arr = [1, 2, 3]; // Error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class="line"></span><br><span class="line">arr2 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="comment">// arr2 = [1, 2, 3]; // Error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Array&lt;string&gt;</code>属于泛型</p></blockquote></li></ol><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p><strong>tuple类型并非一个关键字，它只是一种形式</strong>，可以理解为一种特殊的数组类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tuple;</span><br><span class="line"><span class="keyword">let</span> tuple2;</span><br><span class="line"><span class="keyword">let</span> tuple3; <span class="comment">// 表示可以除了第一个元素外，还可以有任意多个string类型的元素</span></span><br><span class="line">tuple = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="comment">// tuple = [1, &#x27;hello&#x27;, 2]; // Error 不能将类型“[number, string, number]”分配给类型“[number, string]”</span></span><br><span class="line"><span class="comment">// tuple = [&#x27;hello&#x27;, 1]; // Error 不能将类型“[string, number]”分配给类型“[number, string]”</span></span><br><span class="line">tuple2 = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line">tuple2 = [<span class="number">1</span>];</span><br><span class="line"><span class="comment">// tuple2 = [&quot;hello&quot;]; // Error 不能将类型“[string]”分配给类型“[number, string?]”</span></span><br><span class="line">tuple3 = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line">tuple3 = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line">tuple3 = [<span class="number">1</span>];</span><br><span class="line">tuple3 = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;foo&quot;</span>];</span><br><span class="line"><span class="comment">// tuple3 = [&quot;hello&quot;]; // Error 不能将类型“[string]”分配给类型“[number, ...string[]]”</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> tuple, <span class="keyword">typeof</span> tuple2, <span class="keyword">typeof</span> tuple3); <span class="comment">// object object object</span></span><br></pre></td></tr></table></figure><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><h4 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h4><p>enum表示枚举类型，用于定义<strong>一组命名的常量</strong>，能增强代码的可读性，让代码更好维护。</p><p>常见的困境如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDirection</span>(<span class="params">direction: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Up&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向上&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Down&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向下&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Left&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向左&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Right&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向右&quot;</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;其他方向&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码虽然逻辑上是没有问题的，但是无法防止出现写错的隐患，且代码的可读性也比较差。可以通过枚举类型将所有方向信息装入一个类型中。</p><h4 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>);</span><br></pre></td></tr></table></figure><p>打印得到的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;<span class="number">0</span>&#x27;<span class="punctuation">:</span> &#x27;Up&#x27;<span class="punctuation">,</span>   </span><br><span class="line">  &#x27;<span class="number">1</span>&#x27;<span class="punctuation">:</span> &#x27;Down&#x27;<span class="punctuation">,</span> </span><br><span class="line">  &#x27;<span class="number">2</span>&#x27;<span class="punctuation">:</span> &#x27;Left&#x27;<span class="punctuation">,</span> </span><br><span class="line">  &#x27;<span class="number">3</span>&#x27;<span class="punctuation">:</span> &#x27;Right&#x27;<span class="punctuation">,</span></span><br><span class="line">  Up<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>       </span><br><span class="line">  Down<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>     </span><br><span class="line">  Left<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>     </span><br><span class="line">  Right<span class="punctuation">:</span> <span class="number">3</span>     </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>从上述输出可以看出Direction是一个对象，且标号从0开始递增，且具有反身性。</p><p>定义好Direction后，我们就可以修改代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDirection</span>(<span class="params">direction: Direction</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Up</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向上&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Down</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向下&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Left</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向左&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Right</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向右&quot;</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;其他方向&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样改写后的好处在于代码的可读性变高，且写代码的时候会出现选择项（只能从定义的类型中选择，无其他选项），可以杜绝写错的情况。</p><p>如果要更改递增的开始数字，可以修改第一个变量的赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>)</span><br></pre></td></tr></table></figure><p>得到的打印结果为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;<span class="number">10</span>&#x27;<span class="punctuation">:</span> &#x27;Up&#x27;<span class="punctuation">,</span></span><br><span class="line">  &#x27;<span class="number">11</span>&#x27;<span class="punctuation">:</span> &#x27;Down&#x27;<span class="punctuation">,</span></span><br><span class="line">  &#x27;<span class="number">12</span>&#x27;<span class="punctuation">:</span> &#x27;Left&#x27;<span class="punctuation">,</span></span><br><span class="line">  &#x27;<span class="number">13</span>&#x27;<span class="punctuation">:</span> &#x27;Right&#x27;<span class="punctuation">,</span></span><br><span class="line">  Up<span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  Down<span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">  Left<span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">  Right<span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，我们无需关心它实际代表的取值</p></blockquote><h4 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h4><p>enum中的变量值可以不用number，使用string</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;Up&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;Down&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;Left&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;Right&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>)</span><br></pre></td></tr></table></figure><p>打印得到的结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Direction <span class="punctuation">&#123;</span></span><br><span class="line">    Up = <span class="string">&quot;Up&quot;</span><span class="punctuation">,</span></span><br><span class="line">    Down = <span class="string">&quot;Down&quot;</span><span class="punctuation">,</span></span><br><span class="line">    Left = <span class="string">&quot;Left&quot;</span><span class="punctuation">,</span></span><br><span class="line">    Right = <span class="string">&quot;Right&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>从输出可以看出，这样做之后就不再具有反身性</p><h4 id="常量枚举"><a href="#常量枚举" class="headerlink" title="常量枚举"></a>常量枚举</h4><p>如果基本的用法来说，编译得到的js可能会出现很多冗余的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;Up&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;Down&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;Left&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;Right&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br></pre></td></tr></table></figure><p>得到的js如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br></pre></td></tr></table></figure><p>在js中我们得到了整个枚举类型的转意，但是实际上，我们只使用了<code>Direction.Up</code>这一个属性，那么其他信息就是冗余的。</p><p>改进的方法就是在enum前面添加一个const关键字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;Up&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;Down&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;Left&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;Right&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br></pre></td></tr></table></figure><p>编译得到的js就会删除多余的冗余部分（会留下提示），显著降低代码量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Up&quot;</span> <span class="comment">/* Direction.Up */</span>);</span><br></pre></td></tr></table></figure><blockquote><p>官方的描述：常量枚举是一种特殊的枚举类型，他使用const关键字定义，在编译时会被内联，避免生成一些额外的代码</p><p>何为编译时的内联？</p><p>TypeScript在编译时，会讲枚举成员引用替换为它们的实际值，而不是生成额外的枚举对象。这样可以减少生成的JavaScript代码量，提高运行时候的性能。</p></blockquote><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type的作用是用于给类型起别名，这可以使编写代码更加的高效，增强代码可读性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type的作用是给类型起别名</span></span><br><span class="line"><span class="keyword">type</span> shuzi = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: shuzi = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h4 id="内联类型"><a href="#内联类型" class="headerlink" title="内联类型"></a>内联类型</h4><p>将多个可能的类型合并为一个新类型，这个类型可以是多个类型中的任意一个（类型与类型之间是或的关系）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> shuzi = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> zifu = <span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">type</span> gender = <span class="string">&quot;男&quot;</span> | <span class="string">&quot;女&quot;</span> | <span class="string">&quot;保密&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">shuzi1</span>: shuzi = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">shuzi2</span>: shuzi = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">zifu1</span>: zifu = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">zifu2</span>: zifu = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">gender1</span>: gender = <span class="string">&quot;保密&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">gender2</span>: gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">gender3</span>: gender = <span class="string">&quot;女&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码gender类型填写具体值时会出现提示选择。</p></blockquote><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><p>将多个可能的类型合并为一个新类型，这个类型必须满足所有类型的要求（类型与类型之间是且的关系）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Address</span> = &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">country</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> demo = <span class="title class_">Person</span> &amp; <span class="title class_">Address</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要满足Perosn和Address所有的要求</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">info</span>: demo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">country</span>: <span class="string">&quot;USA&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果交叉类型的类型之间不存在交集，那么ts会自动推断为never</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> demo = <span class="built_in">string</span> &amp; <span class="built_in">number</span></span><br></pre></td></tr></table></figure><h3 id="一个特殊的情况"><a href="#一个特殊的情况" class="headerlink" title="一个特殊的情况"></a>一个特殊的情况</h3><p>在函数定义的时候，我们就规定了函数的返回值为<code>void</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumber</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// OK</span></span><br><span class="line">    <span class="comment">// return 999; // Error: 不能将类型&quot;number&quot;分配给类型&quot;void&quot;</span></span><br><span class="line">    <span class="comment">// return null; // Error: 不能将类型&quot;null&quot;分配给类型&quot;void&quot;</span></span><br><span class="line">    <span class="comment">// return [] // Error: 不能将类型&quot;never[]&quot;分配给类型&quot;void&quot;</span></span><br><span class="line">    <span class="comment">// return &#123;&#125; // Error: 不能将类型&quot;&#123;&#125;&quot;分配给类型&quot;void&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，按照在上文中介绍的<code>void</code>的使用规则没有发生任何变化，它还是只能接受<code>undefined</code>作为返回值。</p><p>但是如果我们采用在<code>object</code>中的方法，先定义函数的返回值类型为<code>void</code>，那么就会出现如下的反常现象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上述代码可以看到，即便是规定了函数返回值为<code>void</code>，但是还是能够返回除了<code>undefined</code>的其他任意值。</p><p>按照官方文档的描述，这是为了兼容如下的情况</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">src.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> dst.<span class="title function_">push</span>(el));</span><br></pre></td></tr></table></figure><p>forEach的文档为</p><blockquote><p>(method) Array*&lt;<em>number*&gt;</em>.forEach(callbackfn: (value*:* <em>number</em>, index*:* <em>number</em>, array*:* <em>number</em>[]) <em>&#x3D;&gt;</em> <em>void</em>, thisArg*?:* any): <em>void</em></p></blockquote><p>可以看到callbackfn的返回值为void，但是<code>(el) =&gt; dst.push(el)</code>方法得到的返回值是dst的长度，这样会出现不兼容的情况，这算是一个妥协。</p><p>但是返回值还是符合void值无法被使用的情况。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result)&#123; <span class="comment">// Error,无法测试&quot;void&quot;类型表达值的真实性</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resultPlus = result + <span class="number">100</span>; <span class="comment">// Error: 运算符&quot;+&quot;不能应用于类型&quot;void&quot;和&quot;number&quot;。</span></span><br></pre></td></tr></table></figure><h3 id="复习类的知识"><a href="#复习类的知识" class="headerlink" title="复习类的知识"></a>复习类的知识</h3><p>在ts中，类的定义和js没有明显的不同，比较明显的不同在使用<code>constructor</code>的时候，需要先在类的开头申明。重写父类方法时，可以使用<code>override</code>来获取重写的提示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">p.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="attr">grade</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, grade: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 将参数传递给父类</span></span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am studying.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重构父类方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old, I am a student.`</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>, <span class="string">&quot;大三&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu);</span><br><span class="line">stu.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><blockquote><p>在ts中，<code>constructor</code>有一个简写方法，这在后文的属性修饰符中会讲到</p></blockquote><h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><p>属性修饰符是用来限定类中属性与方法的权限，写在类属性或者方法之前，例如<code>public name: string;</code></p><table><thead><tr><th>修饰符</th><th>含义</th><th>具体规则</th></tr></thead><tbody><tr><td>public</td><td>公开的</td><td>可以被：内部类、子类、类外部访问</td></tr><tr><td>protected</td><td>受保护的</td><td>可以被：类内部、子类访问</td></tr><tr><td>private</td><td>私有的</td><td>可以被：类内部访问</td></tr><tr><td>readonly</td><td>只读属性</td><td>属性无法修改</td></tr></tbody></table><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>顾名思义，即表示属性是公开的，如果不限定属性的修饰符，那么ts默认认定属性被<code>public</code>所修饰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">grade</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, grade: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I am a student. I am studying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 都不会报错</span></span><br><span class="line">p.<span class="property">name</span>;</span><br><span class="line">p.<span class="property">age</span>;</span><br><span class="line">p.<span class="property">grade</span>;</span><br><span class="line">p.<span class="title function_">say</span>();</span><br><span class="line">p.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure><blockquote><p>如果属性有属性写了修饰符，那么不建议省略<code>public</code></p></blockquote><h4 id="属性的简写形式"><a href="#属性的简写形式" class="headerlink" title="属性的简写形式"></a>属性的简写形式</h4><p>在ts中，可以使用如下的形式简写<code>constructor</code>函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">修饰符 A: 类型, 修饰符 B: 类型</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上文中类的代码简写为如下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 简写形式</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> age: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> grader: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I am a student. I am studying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，子类中，如果需要新传入属性，那么在构造函数<code>constructor</code>中<code>super()</code>是无法省略的。</p></blockquote><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><p><code>protected</code>直译为收到保护的，含义是限制外部的访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> name: <span class="built_in">string</span>, <span class="keyword">protected</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">getDetails</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Name: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, Age: <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">introduce</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">getDetails</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, <span class="keyword">protected</span> grade: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">study</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 可以调用父类受到protected修饰的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">introduce</span>();</span><br><span class="line">        <span class="comment">// 可以调用父类受到protected修饰的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is studying`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line">p1.<span class="title function_">introduce</span>(); <span class="comment">// Name: Alice, Age: 30</span></span><br><span class="line">p1.<span class="property">name</span>; <span class="comment">// 属性name受保护，只能在类“Person”及其子类中访问</span></span><br><span class="line">p1.<span class="property">age</span>; <span class="comment">// 属性age受保护，只能在类“Person”及其子类中访问</span></span><br><span class="line">p1.<span class="title function_">getDetails</span>(); <span class="comment">// 方法“getDetails”受保护，只能在类“Person”及其子类中访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">s1.<span class="title function_">study</span>(); <span class="comment">// Name: Bob, Age: 20 Bob is studying</span></span><br><span class="line">s1.<span class="property">name</span>; <span class="comment">// 属性name受保护，只能在类“Person”及其子类中访问</span></span><br><span class="line">s1.<span class="property">age</span>; <span class="comment">// 属性age受保护，只能在类“Person”及其子类中访问</span></span><br><span class="line">s1.<span class="property">grade</span>; <span class="comment">// 属性grade受保护，只能在类“Student”及其子类中访问</span></span><br></pre></td></tr></table></figure><p>上述代码中，<code>age</code>和<code>name</code>是收保护的属性，它能够被类内部和继承类<code>Student</code>调用，但是无法被外部调用。在<code>Student</code>类中调用了<code>introduce</code>方法，<code>introduce</code>又实现了收保护的<code>getDetails</code>方法，这说明继承类能够调用父类中受到保护的<code>protected</code>方法。它们都不能被外部调用。</p><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p>意味私有的，只能在当前类中被访问，不能被子类和外部访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> age: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> idCard: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">getPrivateInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`My ID card is <span class="subst">$&#123;<span class="variable language_">this</span>.idCard&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFullInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getInfo()&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.getPrivateInfo()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">getStudentInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">idCard</span>; <span class="comment">// 属性“idCard”为私有属性，只能在类“Person”中访问</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getPrivateInfo</span>(); <span class="comment">// 属性“getPrivateInfo”为私有属性，只能在类“Person”中访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getFullInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>, <span class="string">&quot;123456789&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getInfo</span>()); <span class="comment">// My name is Alice, I&#x27;m 20 years old</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getFullInfo</span>()); <span class="comment">// My name is Alice, I&#x27;m 20 years old, My ID card is 123456789</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">idCard</span>); <span class="comment">// 属性“idCard”为私有属性，只能在类“Person”中访问。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getPrivateInfo</span>()); <span class="comment">// console.log(p1.idCard); // 属性“idCard”为私有属性，只能在类“Person”中访问。</span></span><br></pre></td></tr></table></figure><p>上述代码中，私有方法<code>getPrivateInfo</code>可以被类中的<code>getFullInfo</code>调用，但是无法被继承的<code>Student</code>和外部调用。私有属性<code>idCard</code>可以被类中的私有方法<code>getPrivateInfo</code>调用，但是不能被继承的<code>Student</code>和外部调用。</p><blockquote><p>实际上，在外部调用<code>getFullInfo</code>间接调用了<code>getPrivateInfo</code>方法</p></blockquote><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>顾名思义，即只可读的，不可被修改，写在属性修饰符之后。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> name: <span class="built_in">string</span>, </span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> <span class="keyword">readonly</span> age: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">person.<span class="title function_">getInfo</span>(); <span class="comment">// John is 30 years old</span></span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>; <span class="comment">// OK</span></span><br><span class="line">person.<span class="title function_">getInfo</span>(); <span class="comment">// Tom is 30 years old</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 无法为“age”赋值，因为它是只读属性。</span></span><br></pre></td></tr></table></figure><p>上述代码中，Person的<code>age</code>属性为只读属性，因此无法被修改。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>概述：抽象类是一种<strong>无法被实例化的类</strong>，专门用来定义类的结构和行为，<strong>类中可以写抽象方法，也可以具体实现</strong>，拙象类主要用来为其派生类提供一个基础结构，要求其派生类必须实现其中的抽象方法。</p><blockquote><p>简记：抽象类不能实例化，其意义是可以被继承，抽象类里可以有普通方法，也可以有抽象方法 </p></blockquote><p>限定一个抽象的<code>package</code>对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Package</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> weight: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">calculate</span>(): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printPackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Weight: <span class="subst">$&#123;<span class="variable language_">this</span>.weight&#125;</span> Price: <span class="subst">$&#123;<span class="variable language_">this</span>.calculate()&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象对象中，规定了package的<code>calculate</code>的计算方法，这个方法必须被继承的子类实现。因为<code>printPackage</code>调用了<code>calculate</code>这个抽象方法，但是抽象方法却没有具体的实现方式，如果成功调用会出现严重的问题，这个也可以解释抽象类是不能被实例化的。</p><p>根据快递种类的不同，定义<code>StandardPackage</code>和<code>ExpressPackage</code>两个类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StandardPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">weight: <span class="built_in">number</span>, <span class="keyword">public</span> unitPrice: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">calculate</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExpressPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        weight: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> unitPrice: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> additional: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">calculate</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">weight</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">unitPrice</span> * <span class="number">10</span> + (<span class="variable language_">this</span>.<span class="property">weight</span> - <span class="number">10</span>) * <span class="variable language_">this</span>.<span class="property">additional</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到两种快递的计算方式不同，但是都需要计算费用这个方法。因此从本质上来说，abstract类用来规定子类必须有相同的方法，但是可以有不同的实现方式（可以解释为什么<code>abstract</code>不能有具体的实现方式）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">StandardPackage</span>(<span class="number">13</span>, <span class="number">8</span>);</span><br><span class="line">p1.<span class="title function_">printPackage</span>(); <span class="comment">// Weight: 13 Price: 104</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">ExpressPackage</span>(<span class="number">13</span>, <span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">p2.<span class="title function_">printPackage</span>(); <span class="comment">// Weight: 13 Price: 86</span></span><br></pre></td></tr></table></figure><blockquote><p>何时可以使用抽象类</p><ol><li>定义通用的接口：为一组相关的类定义通用的行为（方法或属性）时</li><li>提供基础的实现：在抽象类中提供某些方法或者为其提供基础实现，这样派生类就可以继承这些实现</li><li>确保关键实现：强制派生类实现一些关键行为</li><li>共享代码和逻辑：当多个类需要共享部分代码时，抽象类可以避免代码重复</li></ol></blockquote><h3 id="interface（接口）"><a href="#interface（接口）" class="headerlink" title="interface（接口）"></a>interface（接口）</h3><p><code>interface</code>是一种定义结构的方式，主要的作用是为类，对象、函数等规定一种契约，这样可以确保代码的一致性和类型安全，但要注意<code>interface</code>只能定义格式，不能包含任何具体实现。</p><h4 id="定义类的结构"><a href="#定义类的结构" class="headerlink" title="定义类的结构"></a>定义类的结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 必须定义name,age</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> age: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="comment">// 可以有自己额外的属性</span></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> grade: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须实现sayHello方法</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以有自己额外的方法</span></span><br><span class="line">    <span class="title function_">showMyGrade</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My grade is <span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>(<span class="number">10</span>); <span class="comment">// Hello John 10</span></span><br><span class="line">p.<span class="title function_">showMyGrade</span>(); <span class="comment">// My grade is A</span></span><br></pre></td></tr></table></figure><p>接口<code>PersonInterface</code>定义了实现类的一些约束，实现类必须实现这些约束，在此基础上，也可以有自己的方法。</p><blockquote><p>接口有两种常用的命名规范：</p><ol><li>在接口名前添加<code>I</code>，如<code>IPerson</code></li><li>在接口名后添加<code>Interface</code>，如<code>PersonInterface</code></li></ol></blockquote><h4 id="定义对象的结构"><a href="#定义对象的结构" class="headerlink" title="定义对象的结构"></a>定义对象的结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">run</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> is running <span class="subst">$&#123;n&#125;</span> miles`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对象字面量只能指定已知属性，并且“sayHi”不在类型“PersonInterface”中</span></span><br><span class="line">    <span class="comment">// sayHi ():void &#123;</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;Hi&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">5</span>); <span class="comment">// John is running 5 miles</span></span><br></pre></td></tr></table></figure><p>对象在继承接口的时候不需要使用<code>implements</code>，<strong>且<code>person</code>对象不能出现<code>PersonInterface</code>规定之外的其他属性和方法。这种接口的作用和<code>type</code>的作用几乎没有任何区别。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">run</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> is running <span class="subst">$&#123;n&#125;</span> miles`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对象字面量只能指定已知属性，并且“sayHi”不在类型“PersonInterface”中</span></span><br><span class="line">    <span class="comment">// sayHi ():void &#123;</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;Hi&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">5</span>); <span class="comment">// John is running 5 miles</span></span><br></pre></td></tr></table></figure><h4 id="定义函数的结构"><a href="#定义函数的结构" class="headerlink" title="定义函数的结构"></a>定义函数的结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">AddInterface</span> &#123;</span><br><span class="line">    (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">AddInterface</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个和之前的函数申明有异曲同工之妙。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">AddType</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AddType</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><h4 id="接口之间继承"><a href="#接口之间继承" class="headerlink" title="接口之间继承"></a>接口之间继承</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">grader</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承后所有接口规定的都要实现</span></span><br><span class="line"><span class="keyword">const</span> student :<span class="title class_">Student</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">    <span class="comment">// 可选属性</span></span><br><span class="line">    <span class="comment">// age: 20,</span></span><br><span class="line">    <span class="attr">grader</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口之间可以互相继承，继承后的接口会将父类的限制添加到自身。简而言之，实现的子类要实现所有之前所有父类的定义属性和方法。</p><h4 id="接口的自动合并（可重复定义）"><a href="#接口的自动合并（可重复定义）" class="headerlink" title="接口的自动合并（可重复定义）"></a>接口的自动合并（可重复定义）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">    man = <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    woman = <span class="string">&quot;女&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">gender</span>: <span class="title class_">Gender</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="comment">// 需要完成PersonInterface的所有属性</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">man</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p><strong>当接口出现命名重复的时候，接口的实现并不会相互覆盖，而是出现自动合并。</strong>可以理解为同名接口的继承（但实际上没有这种语法，ts编译器会出现报错<code>类型“PersonInterface”以递归方式将自身引用为基类。</code>）。</p><blockquote><p>总结：何时使用接口</p><ol><li>定义对象的格式：描述数据模型、API响应格式、配置对象等等，是开发中用的最多的场景</li><li>类的契约：规定一个类需要实现哪些属性和方法</li><li>自动合并：一般用于扩展第三方库的类型，这种特性在大型项目中可能会用到</li></ol></blockquote><h3 id="一些相似概念的区别"><a href="#一些相似概念的区别" class="headerlink" title="一些相似概念的区别"></a>一些相似概念的区别</h3><h3 id="接口与type"><a href="#接口与type" class="headerlink" title="接口与type"></a>接口与type</h3><p>接口<code>interface</code>和<code>type</code>都可以限制对象结构，在使用方面是可以相互替代的。两者都有一些自己的特点。</p><ol><li><code>interface</code>：更加专注于定义对象和类的结构，支持继承和合并</li><li><code>type</code>：可以定义类型别名、联合类型、交叉类型，但不支持继承和自动合并</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">run</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">run</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span> + <span class="string">&quot; Running &quot;</span> + n + <span class="string">&quot; miles&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span> + <span class="string">&quot; Running &quot;</span> + n + <span class="string">&quot; miles&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">run</span>(<span class="number">10</span>); <span class="comment">// John Running 10 miles</span></span><br><span class="line">p2.<span class="title function_">run</span>(<span class="number">20</span>); <span class="comment">// Tom Running 20 miles</span></span><br></pre></td></tr></table></figure><p>观察上述代码可以看出，<code>PersonType</code>和<code>PersonInterface</code>的作用是一样的，都限制了对象的结构，甚至实现的结构也完全相同，两者可以相互对调。</p><p>但<code>interface</code>可以进行继承和自动合并，这是<code>type</code>不具备的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface2</span> <span class="keyword">extends</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">PersonInterface2</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述写法可以等价于下面的写法（自动合并）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一方面，<code>type</code>虽然不能使用继承，但可以通过交叉类型来实现上述的逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonInterface</span>  = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> =  <span class="title class_">PersonInterface</span> &amp; &#123;</span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，<code>interface</code>比<code>type</code>写法更简洁</p></blockquote><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><ul><li>相同点：接口和抽象类都可以定义一个类的格式</li><li>不同点：<ol><li>接口：只能描述结构，<strong>不能有任何代码实现，一个类可以实现多个接口</strong></li><li>抽象类：既可以包含抽象方法，<strong>也可以含有具体实现，一个类只能继承一个抽象类</strong></li></ol></li></ul><p>一个类可以一次性继承多个接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FlyInterface</span> &#123;</span><br><span class="line">    <span class="title function_">fly</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SwimInterface</span> &#123;</span><br><span class="line">    <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">implements</span> <span class="title class_">FlyInterface</span>, <span class="title class_">SwimInterface</span> &#123;</span><br><span class="line">    <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Duck is flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">swim</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Duck is swimming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">duck.<span class="title function_">fly</span>(); <span class="comment">// Duck is flying</span></span><br><span class="line">duck.<span class="title function_">swim</span>(); <span class="comment">// Duck is swimming</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">fly</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallardDuck</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Duck</span> &#123;</span><br><span class="line">    <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MallardDuck is flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">swim</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MallardDuck is swimming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口只动口不动手，抽象类是可以自己动手的。</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型允许我们在定义函数、类或接口时，使用类型参数来表示未指定类型，这些参数在具体使用时，才被置顶具体的类型。这能让同一代码使用多数据类型，同时保持类型的安全性。</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>当我们暂时无法确定要传入的参数的类型时，可以使用泛型告知编译器参数可以是任意的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printData&lt;T&gt;(<span class="attr">data1</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先告知参数的类型</span></span><br><span class="line">printData&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// Hello World</span></span><br><span class="line">printData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>); <span class="comment">// 123</span></span><br><span class="line">printData&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当时当使用者调用的时候，需要提前告知其传入的参数类型。</p><blockquote><p>实际上<code>&lt;T&gt;</code>中的T只是一个标识符，可以替换为任意的字符</p></blockquote><h3 id="多个泛型"><a href="#多个泛型" class="headerlink" title="多个泛型"></a>多个泛型</h3><p>泛型可以不只有一个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printData&lt;T, U&gt;(<span class="attr">data1</span>: T, <span class="attr">data2</span>: U): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1, data2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先告知参数的类型</span></span><br><span class="line">printData&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&quot;Hello World&quot;</span>, <span class="number">222</span>); <span class="comment">// Hello World 222</span></span><br><span class="line">printData&lt;<span class="built_in">number</span>, <span class="built_in">boolean</span>&gt;(<span class="number">123</span>, <span class="literal">false</span>); <span class="comment">// 123 false</span></span><br></pre></td></tr></table></figure><p>返回值也可以设置为泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printData&lt;T, U&gt;(<span class="attr">data1</span>: T, <span class="attr">data2</span>: U): T | U &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() % <span class="number">2</span> === <span class="number">0</span> ? data1 : data2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(printData&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">123</span>)); </span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在接口中也可以使用泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">moreInfo</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">PE</span> = &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">PersonInterface</span>&lt;<span class="variable constant_">PE</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">moreInfo</span>: &#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span>: <span class="number">80</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>可以使用继承的方式限定泛型的取值范围</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> logPerson&lt;T <span class="keyword">extends</span> <span class="title class_">PersonInterface</span>&gt;(<span class="attr">info</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;info.name&#125;</span> and I am <span class="subst">$&#123;info.age&#125;</span> years old.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logPerson</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型可以在类中使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span>, <span class="keyword">public</span> moreInfo: T</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">moreInfo</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> jobInfo = &#123;</span><br><span class="line">    <span class="attr">job</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">salary</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;jobInfo&gt;(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>, &#123;</span><br><span class="line">    <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,</span><br><span class="line">    <span class="attr">salary</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">student.<span class="title function_">speak</span>() </span><br><span class="line"><span class="comment">// My name is Tom, I am 20 years old</span></span><br><span class="line"><span class="comment">// &#123; job: &#x27;developer&#x27;, salary: 1000 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="类型申明文件"><a href="#类型申明文件" class="headerlink" title="类型申明文件"></a>类型申明文件</h2><p>在npm官网，还有很多的库是使用js编写的，不能直接在ts中导入。</p><p>新建一个<code>demo.js</code>文件，导出相应的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">abstract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候如果直接在<code>index.ts</code>中导入，就会出现<code>无法找到模块“./demo.js”的声明文件。“d:/Web/ts/demo.js”隐式拥有 &quot;any&quot; 类型。</code>的报错，这是因为js不支持编写类型提示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, <span class="keyword">abstract</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./demo.js&quot;</span>;</span><br><span class="line"><span class="comment">// 无法找到模块“./demo.js”的声明文件。“d:/Web/ts/demo.js”隐式拥有 &quot;any&quot; 类型。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">abstract</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>此时需要在文件中新建一个同名的<code>demo.d.ts</code>文件，加入如下代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">abstract</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, <span class="keyword">abstract</span> &#125;;</span><br></pre></td></tr></table></figure><p><code>declare</code>意味申明，这样可以告知ts编译器同名的<code>demo.js</code>中数据的具体类型。编写后需要重启vscode，之后就可以在<code>index.ts</code>中悬停得到相应的代码提示。</p><blockquote><p>注：</p><ol><li>在项目，这些文件通常放在<code>@types</code>文件夹中</li><li>对于一些老的js库，可以在npm按照<code>@types/库名</code>的方式直接搜到相应的<code>.d.ts</code>文件。如<code>@types/jquery</code></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-基础组件使用实战</title>
      <link href="/post/django-ji-chu-zu-jian-kuai-su-ru-men/"/>
      <url>/post/django-ji-chu-zu-jian-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过时的技术，笔记是原来写的。但是由于其中有一些例子，所以想着还是上传一下。</p><p>非要用Python写后端，请移步使用<a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a>或者<a href="https://fastapi.tiangolo.com/zh/">FastAPI</a>。</p><h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br></pre></td></tr></table></figure><p>有一个项目生成器<code>django-admin.exe</code>在<code>Scripts</code>中，可以快速创建一个Django项目。</p><p>当前生成器的路径为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\django\Scripts\django-admin.exe</span><br></pre></td></tr></table></figure><h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><blockquote><p>Django项目中有一个默认的文件和默认的文件夹</p></blockquote><h3 id="使用django-admin创建项目"><a href="#使用django-admin创建项目" class="headerlink" title="使用django-admin创建项目"></a>使用django-admin创建项目</h3><p>使用命令创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda\envs\django\Scripts\django-admin.exe startproject mysite</span><br></pre></td></tr></table></figure><p>mysite为项目名称，项目结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite</span><br><span class="line">├─ manage.py</span><br><span class="line">└─ mysite</span><br><span class="line">       ├─ __init__.py</span><br><span class="line">       ├─ asgi.py</span><br><span class="line">       ├─ settings.py</span><br><span class="line">       ├─ urls.py</span><br><span class="line">       └─ wsgi.py</span><br></pre></td></tr></table></figure><h3 id="使用PyCharm创建项目"><a href="#使用PyCharm创建项目" class="headerlink" title="使用PyCharm创建项目"></a>使用PyCharm创建项目</h3><p>有奇怪的问题，创建不了Django项目，可以先创建一个新的env环境，然后在选择环境现有的conda环境，之后删除envs即可。</p><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><ul><li><p>使用命令行创建的项目是标准的</p></li><li><p>Pycharm创建的项目，在标准的基础上多加了点东西</p><ul><li><p>创建了一个名为<code>templates</code>的文件夹，用来放模版文件</p></li><li><p>在<code>settings.py</code>中：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">TEMPLATES = [</span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">        &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,</span></span><br><span class="line"><span class="language-xml">        &quot;DIRS&quot;: [BASE_DIR / &#x27;templates&#x27;]</span></span><br><span class="line"><span class="language-xml">        ,</span></span><br><span class="line"><span class="language-xml">        &quot;APP_DIRS&quot;: True,</span></span><br><span class="line"><span class="language-xml">        &quot;OPTIONS&quot;: &#123;</span></span><br><span class="line"><span class="language-xml">            &quot;context_processors&quot;: [</span></span><br><span class="line"><span class="language-xml">                &quot;django.template.context_processors.debug&quot;,</span></span><br><span class="line"><span class="language-xml">                &quot;django.template.context_processors.request&quot;,</span></span><br><span class="line"><span class="language-xml">                &quot;django.contrib.auth.context_processors.auth&quot;,</span></span><br><span class="line"><span class="language-xml">                &quot;django.contrib.messages.context_processors.messages&quot;,</span></span><br><span class="line"><span class="language-xml">            ],</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">]</span></span><br></pre></td></tr></table></figure><p>其中的<code>&quot;DIRS&quot;: [BASE_DIR / &#39;templates&#39;]</code>把其中的内容删除即可。</p></li></ul></li></ul><h3 id="默认项目的文件介绍"><a href="#默认项目的文件介绍" class="headerlink" title="默认项目的文件介绍"></a>默认项目的文件介绍</h3><p>项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite</span><br><span class="line">├─ manage.py              【项目管理，启动项目，创建app，数据管理】</span><br><span class="line">└─ mysite                 【跟项目同名】</span><br><span class="line">       ├─ __init__.py</span><br><span class="line">       ├─ settings.py     【项目的配置文件】 数据库等操作 常修改</span><br><span class="line">       ├─ urls.py         【url和函数的对应关系】 常操作</span><br><span class="line">       ├─ asgi.py         【接受网络请求】异步 不要修改</span><br><span class="line">       └─ wsgi.py         【接受网络请求】同步 不要修改</span><br></pre></td></tr></table></figure><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目</span><br><span class="line">     -app 用户管理 【表结构 函数 HTML模版 CSS】</span><br><span class="line">     -app 订单管理 【表结构 函数 HTML模版 CSS】</span><br><span class="line">     -app 后台管理 【表结构 函数 HTML模版 CSS】</span><br><span class="line">     -app 网站    【表结构 函数 HTML模版 CSS】</span><br><span class="line">     -app API【表结构 函数 HTML模版 CSS】</span><br><span class="line">     ……</span><br><span class="line">     </span><br><span class="line">一般情况下，项目创建一个app即可。</span><br></pre></td></tr></table></figure><p>创建app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp app</span><br></pre></td></tr></table></figure><p>app结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app01</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ admin.py          固定不动 提供admin后台管理 </span><br><span class="line">├─ apps.py           固定不动 app启动类</span><br><span class="line">├─ migrations        固定不动 数据库变更记录</span><br><span class="line">│    └─ __init__.py</span><br><span class="line">├─ models.py         【重要】 对数据库操作</span><br><span class="line">├─ tests.py          固定不动 单元测试 </span><br><span class="line">└─ views.py             【重要】函数，与urls.py联动</span><br></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ol><li><p>确保APP已经注册【setting.py】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 自己添加的app</span></span><br><span class="line">    <span class="string">&quot;app01.apps.App01Config&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>编写url和视图函数的对应关系 【urls.py】 绑定相应的执行函数</p><p>在<code>urls.py</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&quot;admin/&quot;, admin.site.urls),</span></span><br><span class="line">    <span class="comment"># www.xxx.com/index/ -&gt; views.index</span></span><br><span class="line">    path(<span class="string">&quot;index/&quot;</span>, views.index),</span><br><span class="line">    path(<span class="string">&quot;user/add&quot;</span>, views.user_add),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>编写视图函数，接收用户的请求 【views.py】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;Hello, Django!&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;添加用户成功！&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动Django项目</p><ul><li><p>命令行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p>Pycharm启动</p><p>选中项目文件夹点击运行即可。</p><img src="https://www.z4a.net/images/2024/08/11/01.png" alt="image-20240210121133846" style="zoom:67%;" /><p>添加&#x2F;index查看结果</p><img src="https://www.z4a.net/images/2024/08/11/02.png" alt="image-20240210121206337" style="zoom: 67%;" /></li></ul></li></ol><h2 id="真正构建一个网页"><a href="#真正构建一个网页" class="headerlink" title="真正构建一个网页"></a>真正构建一个网页</h2><h3 id="加载模版文件"><a href="#加载模版文件" class="headerlink" title="加载模版文件"></a>加载模版文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;Hello, Django!&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>关于<code>index.html</code>的查找顺序，先去本项目的根目录中的<code>templates</code>文件夹，如果没有，那就根据注册的app的顺序，依次查找<code>templates</code>文件夹中的HTML文件。</p><p>当然如果在setting.py中写入了项目文件的根目录中的<code>templates</code>，那么就会优先去项目文件的根目录中找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;DIRS&quot;: [BASE_DIR / &#x27;templates&#x27;]</span></span><br><span class="line">        <span class="string">&quot;DIRS&quot;</span>: [os.path.join(BASE_DIR, <span class="string">&quot;templates&quot;</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">&quot;APP_DIRS&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;context_processors&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.request&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.auth.context_processors.auth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.messages.context_processors.messages&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h3><p>在开发过程中，一般将：</p><ul><li>img</li><li>CSS</li><li>js</li><li>plugins</li></ul><p>都会当做静态文件处理。静态文件一定要放在<code>static</code>文件夹中。推荐的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static</span><br><span class="line">    - css</span><br><span class="line">    - img</span><br><span class="line">    - js</span><br><span class="line">    - plugins</span><br></pre></td></tr></table></figure><p>推荐的引入方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;#推荐使用的静态文件引入方法 是一种语言模版#&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Django! 已修改<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/test.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>静态文件的相关的设置，在<code>setting.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&quot;/static/&quot;</span></span><br></pre></td></tr></table></figure><h2 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h2><p>本质上：Django提供的，可以在HTML中写一些占位符，有数据对这些占位符进行替换和处理。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>模版语法的学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>作者：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>可支持访问列表中的元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表：&#123;&#123; list &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的第一个元素：&#123;&#123; list.0 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的第二个元素：&#123;&#123; list.1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的第三个元素：&#123;&#123; list.2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>支持for循环<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% for item in list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的元素：&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>支持访问字典<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>字典：&#123;&#123; dict &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>字典中的第一个元素：&#123;&#123; dict.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>字典中的第二个元素：&#123;&#123; dict.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>支持for循环<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>支持获取keys,values,items<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% for key,value in dict.items %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>嵌套的情况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% for i in data_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一层循环：&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% for j,values in i.items %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二层循环：&#123;&#123; j &#125;&#125; : &#123;&#123; values &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>支持if判断<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% if name == &quot;gcnanmu&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你是&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% elif name == &quot;giao&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你是giao哥<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你是谁？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>支持过滤器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始数据：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换为大写：&#123;&#123; name|upper &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换为小写：&#123;&#123; name|lower &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换为首字母大写：&#123;&#123; name|title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换为首字母小写：&#123;&#123; name|lower &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>views.py中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">request</span>):</span><br><span class="line">    name = <span class="string">&quot;GcNanmu&quot;</span></span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&quot;gcnanmu&quot;</span>, <span class="string">&quot;xiaoming&quot;</span>, <span class="string">&quot;xiaohong&quot;</span>]</span><br><span class="line">    <span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;gcnanmu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">    data_list = [</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;gcnanmu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaohong&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">22</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;关于我们&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;about.html&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;list&quot;</span>: <span class="built_in">list</span>, <span class="string">&quot;dict&quot;</span>: <span class="built_in">dict</span>, <span class="string">&quot;data_list&quot;</span>: data_list&#125;)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/03.png" alt="image-20240210175831264" style="zoom: 50%;" /><p>整个过程：</p><img src="https://www.z4a.net/images/2024/08/11/04.png" alt="image-20240210180542093" style="zoom: 50%;" /><p>视图函数的render内部：</p><ol><li><p>读取含有模板语法的HTML文件</p></li><li><p>内部进行渲染（模板语法执行并替换数据）</p><p>最终得到，只包含HTML标签的字符串</p></li><li><p>最后才将完成的字符串返回给用户浏览器</p></li></ol><blockquote><p>也就是说，用户不可能看到占位符中花括号的内容，都是Django渲染完成后才返回，可以在网页源代码中得到证实。</p></blockquote><p>案例：伪联通新闻中心</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;news_id&quot;</span>:<span class="number">1895</span>,</span><br><span class="line">        <span class="string">&quot;news_title&quot;</span>:<span class="string">&quot;联通5G 智造未来 中国联通带您解锁 2021中国5G+工业互联网大会&quot;</span>，</span><br><span class="line">        <span class="string">&quot;post_time&quot;</span>:<span class="string">&quot;2021-11-19&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;news_id&quot;</span>:<span class="number">1894</span></span><br><span class="line">        <span class="string">&quot;news_title&quot;</span>:<span class="string">&quot;服务在升级系列解读之一：下一程，联通服务该如何发力？&quot;</span></span><br><span class="line">        <span class="string">&quot;post_time&quot;</span>:<span class="string">&quot;2021-11-19&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">&quot;news_id&quot;</span>:<span class="number">1893</span></span><br><span class="line">        <span class="string">&quot;news_title&quot;</span>:<span class="string">&quot;中国联通5G赋能百行百业成果巡礼——惠州市仲恺电子信息产业群 5G助力电子信息产业降本增效&quot;</span></span><br><span class="line">        <span class="string">&quot;post_time&quot;</span>:<span class="string">&quot;2021-11-18&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>news.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>新闻列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新闻中心<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>总列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; data.0 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; data.1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; data.2 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; data.count &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    &#123;% for i in data %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>title:&#123;&#123; i.news_title &#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>id:&#123;&#123; i.news_id &#125;&#125;   data:&#123;&#123; i.post_time &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;新闻&quot;)</span></span><br><span class="line">    <span class="comment"># 1. 定义一些新闻数据 或 从数据库中查询新闻数据</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;news_id&quot;</span>: <span class="number">1895</span>,</span><br><span class="line">            <span class="string">&quot;news_title&quot;</span>: <span class="string">&quot;联通5G 智造未来 中国联通带您解锁 2021中国5G+工业互联网大会&quot;</span>,</span><br><span class="line">            <span class="string">&quot;post_time&quot;</span>: <span class="string">&quot;2021-11-19&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;news_id&quot;</span>: <span class="number">1894</span>,</span><br><span class="line">            <span class="string">&quot;news_title&quot;</span>: <span class="string">&quot;服务在升级系列解读之一：下一程，联通服务该如何发力？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;post_time&quot;</span>: <span class="string">&quot;2021-11-19&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;news_id&quot;</span>: <span class="number">1893</span>,</span><br><span class="line">            <span class="string">&quot;news_title&quot;</span>: <span class="string">&quot;中国联通5G赋能百行百业成果巡礼——惠州市仲恺电子信息产业群 5G助力电子信息产业降本增效&quot;</span>,</span><br><span class="line">            <span class="string">&quot;post_time&quot;</span>: <span class="string">&quot;2021-11-18&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;news.html&quot;</span>,&#123;<span class="string">&quot;data&quot;</span>:data&#125;)</span><br></pre></td></tr></table></figure><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><ol><li><p>请求的方式</p></li><li><p>获取请求的数据</p><p>发送请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000/something/?n1=456&amp;n2=123</span><br></pre></td></tr></table></figure><p>接受请求参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;URL上的参数：<span class="subst">&#123;request.GET&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>重定向的原理：</p><img src="https://www.z4a.net/images/2024/08/11/05.png" alt="image-20240211151451451" style="zoom: 50%;" /><p>案例：用户登录</p><img src="https://www.z4a.net/images/2024/08/11/06.png" alt="image-20240211151451451" style="zoom: 50%;" /><p>这是Django的特殊机制之一，相当于保密机制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&#123;% csrf_token %&#125;</code>一定要加上这个信息，不然就会出现403，这条语句默认的返回值为：<code>&lt;QueryDict: &#123;&#39;csrfmiddlewaretoken&#39;: [&#39;gAx9FmZWxIC5KM0vkDONo80C6o3Cosm0J2aWnjHlAq2hb5iAPx9fud8CVJJBcRHi&#39;], &#39;username&#39;: [&#39;gcnanmu&#39;], &#39;password&#39;: [&#39;qwe&#39;]&#125;&gt;</code></p><p>可以看到多了一个<code>csrfmiddlewaretoken</code>，这是一个隐藏的输入框带来的，可以理解为一个加密的机制，检验请求是否正常，否则就返回403</p><img src="https://www.z4a.net/images/2024/08/11/07.png" alt="image-20240211153537504" style="zoom:67%;" /><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="Django的解决方案"><a href="#Django的解决方案" class="headerlink" title="Django的解决方案"></a>Django的解决方案</h3><ul><li><p>MySQL数据库+pymysql</p></li><li><p>Django开发操作数据库更加简单，内部提供了ORM框架</p><img src="https://www.z4a.net/images/2024/08/11/08.png" alt="image-20240211155805903" style="zoom: 33%;" /><p>可以使代码非常简洁。</p></li></ul><h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>可以使用<code>pymysql</code>，但是新版的Django对pymysql支持不太好，因此推荐使用<code>mysqlclient</code>比较好。</p><h3 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h3><p>ORM可以帮我们做两件事：</p><ul><li>创建、修改、删除数据库的表(不用写SQL语句，但无法创建数据库)</li><li>操作表中的数据（不用写SQL语句）</li></ul><ol><li><p>创建数据库</p><ul><li><p>启动mysql服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>查看当前的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show database</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database django</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/09.png" alt="image-20240212095259904" style="zoom: 67%;" /></li></ul></li><li><p>Django连接数据库</p></li></ol><p>更改settings.py的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># 引擎</span></span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="comment"># 数据库的名字</span></span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;django&quot;</span>,</span><br><span class="line">        <span class="comment"># 账户名</span></span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="comment"># 主机</span></span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="comment"># 端口</span></span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Django操作表</p><ul><li>创建表</li><li>删除表</li><li>修改表</li></ul></li></ol><h3 id="创建与修改表"><a href="#创建与修改表" class="headerlink" title="创建与修改表"></a>创建与修改表</h3><p>   创建表，在models.py文件中：</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># id</span></span><br><span class="line">    <span class="comment"># username</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    age = models.IntegerField()</span><br></pre></td></tr></table></figure><p>   此时表并没有创建</p> <img src="https://www.z4a.net/images/2024/08/11/10dc6b8afd9b3b9012.png" alt="image-20240212100720097" style="zoom: 67%" /><p>   执行命令</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p><strong>注意你的app需要已经注册！！！！</strong></p><img src="https://www.z4a.net/images/2024/08/11/11.png" alt="image-20240212183549476" style="zoom:67%;" /><img src="https://www.z4a.net/images/2024/08/11/12.png" alt="image-20240212183522287" style="zoom: 67%;" /><p>发现有好多的表，原理是生成表的时候他会遍历整个项目的app，因此有一些默认的app也生成了相应的表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 自己添加的app</span></span><br><span class="line">    <span class="string">&quot;app01.apps.App01Config&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果要创建多张表，那么我们需要创建多个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再创建几张表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(models.Model):</span><br><span class="line">    <span class="comment"># id</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 部门名称</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span>(models.Model):</span><br><span class="line">    <span class="comment"># id</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 员工名字</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># 员工年龄</span></span><br><span class="line">    age = models.IntegerField()</span><br></pre></td></tr></table></figure><p>然后再执行那两条命令即可。如果想要删除那个表或者表的选项，只需要注释掉相关代码执行命令即可。</p><p>但是如果想要往已存在的表中添加新的一行就会出现警告</p><img src="https://www.z4a.net/images/2024/08/11/13.png" alt="image-20240212195040231" style="zoom: 50%;" /><p>有三个办法解决:</p><ol><li><p>在warming中写入一个初始值</p></li><li><p>在添加的时候就设定初始值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size = models.IntegerField(default=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>允许空值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许为空值</span></span><br><span class="line">size = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><p>以后在开发总想要对表结构进行调整</p><ul><li><p>在models.py文件中操作类即可</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h3><h3 id="案例：用户管理"><a href="#案例：用户管理" class="headerlink" title="案例：用户管理"></a>案例：用户管理</h3><ol><li><p>展示用户列表</p></li><li><p>添加用户</p><p>提交数据要么用表单，要么用Ajax，美化可以考虑<a href="https://www.bootcss.com/">Bootstrap</a></p></li><li><p>删除用户</p></li></ol><h2 id="主题：员工管理系统"><a href="#主题：员工管理系统" class="headerlink" title="主题：员工管理系统"></a>主题：员工管理系统</h2><h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><p>新方法:</p><img src="https://www.z4a.net/images/2024/08/11/14.png" alt="image-20240214172109281" style="zoom:67%;" /><p>相当于运行了manage.py，这样运行的好处是会出现提示，而且不用自己写命令：</p><img src="https://www.z4a.net/images/2024/08/11/15.png" alt="image-20240214172138486" style="zoom:67%;" /><h3 id="设计并创建数据库对象"><a href="#设计并创建数据库对象" class="headerlink" title="设计并创建数据库对象"></a>设计并创建数据库对象</h3><p>拟设计部门表与员工表</p><p>设计时候会出现三个问题：</p><ol><li><p>部门存储什么值？是存名称？还是ID？</p><ul><li>ID 数据库泛式，常见的开发都是这样做的。【节省存储开销】</li><li>存名称，特别大的公司，查询的次数会非常多，<strong>如果只存ID，需要查询多次</strong>【可以加速查找】</li></ul></li><li><p>存储部门ID需不需要约束？</p><p>部门实际是有个数的限制的，所以需要约束，只能是部门表中已存在的ID</p></li><li><p>部门被删除了，员工还存在索引联系，怎么办？</p><ul><li>直接删除相关员工信息 【级联删除】</li><li>将员工的部门ID设置为NULL 前提是数据允许为空【置空】</li></ul></li><li><p>如何设置性别？</p><ul><li>使用Boolen</li><li>使用SmallIntegerField类型，其中使用choices做约束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gender_choice = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">&quot;性别&quot;</span>, choices=gender_choice, default=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><p>本次选择ID存储，部门ID采用关联的方法，保证只有ID来显示部门，当部门被删除后采用级联删除。</p><p>部门表结果为：</p><table><thead><tr><th>id</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>销售</td></tr><tr><td>2</td><td>运维</td></tr><tr><td>3</td><td>客服</td></tr></tbody></table><p>用户表的设计为：</p><p>注意：</p><ul><li><code>ID</code>是自动生成的</li><li><code>depart</code>由于是与部门表关联的，会自动变为<code>depart_id</code></li></ul><table><thead><tr><th>id</th><th>name</th><th>password</th><th>age</th><th>account</th><th>create_time</th><th>depart_id</th><th>gender</th></tr></thead><tbody><tr><td>1</td><td>gcnanmu</td><td>123456</td><td>23</td><td>200000</td><td>2020&#x2F;01&#x2F;01</td><td>1</td><td>1</td></tr><tr><td>2</td><td>giao</td><td>123456</td><td>25</td><td>0</td><td>2020&#x2F;01&#x2F;02</td><td>2</td><td>2</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartMent</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    部门表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># verbose_name为注解</span></span><br><span class="line">    <span class="comment"># BigAutoField 还有一个 AutoField，</span></span><br><span class="line">    <span class="comment"># 不过后者是一个 32 位整数，而前者是一个 64 位整数。</span></span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>, verbose_name=<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;部门名称&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    员工表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>, verbose_name=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    <span class="comment"># 可能有小数 max_digits为数据总位数，decimal_places为小数位数</span></span><br><span class="line">    account = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;工资&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&quot;创建时间&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    部门存储什么值？是存名称？还是ID？</span></span><br><span class="line"><span class="string">        - ID 数据库泛式，常见的开发都是这样做的。【节省存储开销】</span></span><br><span class="line"><span class="string">        - 存名称，特别大的公司，查询的次数会非常多，如果只存ID，需要查询多次，可以加速查找</span></span><br><span class="line"><span class="string">    存储部门ID需不需要约束</span></span><br><span class="line"><span class="string">        部门实际是有个数的限制的，所以需要约束，只能是部门表中已存在的ID</span></span><br><span class="line"><span class="string">    部门被删除了，员工还存在索引联系，怎么办？</span></span><br><span class="line"><span class="string">        - 直接删除相关员工信息 【级联删除】</span></span><br><span class="line"><span class="string">        - 将员工的部门ID设置为NULL 前提是数据允许为空【置空】</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这样创建实际是没有约束的</span></span><br><span class="line">    <span class="comment"># dapart_id = models.BigIntegerField(verbose_name=&quot;部门ID&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如何创建约束</span></span><br><span class="line">    <span class="comment"># 通过models.ForeignKey 将UserInfo表和DepartMent表关联起来</span></span><br><span class="line">    <span class="comment"># 在Django中会自动在列名中加上_id 即生成depart_id</span></span><br><span class="line">    <span class="comment"># 如果部门表被删除，员工表还存在索引联系，那么怎么办？</span></span><br><span class="line">    <span class="comment"># models.CASCADE 级联删除</span></span><br><span class="line">    <span class="comment"># models.SET_NULL 置空</span></span><br><span class="line">    depart = models.ForeignKey(to=<span class="string">&quot;DepartMent&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&quot;部门ID&quot;</span>)</span><br><span class="line">    <span class="comment"># depart = models.ForeignKey(to=&quot;DepartMent&quot;, to_field=&quot;id&quot;,</span></span><br><span class="line">    <span class="comment">#                            on_delete=models.SET_NULL, verbose_name=&quot;部门ID&quot;,</span></span><br><span class="line">    <span class="comment">#                            null=True, blank=True)</span></span><br><span class="line">    <span class="comment"># 可以添加性别 只有两个选项 可以直接使用BooleanField类型</span></span><br><span class="line">    <span class="comment"># 也可以使用SmallIntegerField，使用choices作为约束</span></span><br><span class="line">    gender_choice = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">&quot;性别&quot;</span>, choices=gender_choice, default=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a>生成数据库</h3><ol><li><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 123456</span><br><span class="line"></span><br><span class="line">create database management_sys;</span><br><span class="line">use management_sys;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># 引擎</span></span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="comment"># 数据库的名字</span></span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;management_sys&quot;</span>,</span><br><span class="line">        <span class="comment"># 账户名</span></span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="comment"># 主机</span></span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="comment"># 端口</span></span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: 3306,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/16.png" alt="image-20240214194429999" style="zoom: 50%;" /></li></ol><p>​生成结果：</p><img src="https://www.z4a.net/images/2024/08/11/17.png" alt="image-20240214194542543" style="zoom: 50%;" /><h3 id="静态文件管理"><a href="#静态文件管理" class="headerlink" title="静态文件管理"></a>静态文件管理</h3><p>static文件夹</p><img src="https://www.z4a.net/images/2024/08/11/18.png" alt="image-20240214194952946" style="zoom: 67%;" /><h3 id="部门管理"><a href="#部门管理" class="headerlink" title="部门管理"></a>部门管理</h3><blockquote><p>需要使用最原始的方式来做。</p><p>Django中提供Form与ModelForm组件（方便）</p></blockquote><h4 id="部门列表"><a href="#部门列表" class="headerlink" title="部门列表"></a>部门列表</h4><img src="https://www.z4a.net/images/2024/08/11/19.png" alt="image-20240214195519823" style="zoom: 67%;" /><p>传递参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;depart/&lt;int:nid&gt;/edit&quot;</span>, views.depart_edit),</span><br></pre></td></tr></table></figure><p>可以将参数放在url中，后续可以直接在函数中获取参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">depart_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 返回值是一个列表</span></span><br><span class="line">        title = models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first().title</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_edit.html&quot;</span>, &#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">    temp = request.POST.get(<span class="string">&quot;department&quot;</span>)</span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    <span class="comment"># 多个字段更新 在每个字段后面加上逗号</span></span><br><span class="line">    models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).update(title=temp, )</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h4><p>每次都要复制一遍导航还是很麻烦的，所以可以使用继承的方法来减少代码的复杂程度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-3.4.1</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">        &#123;<span class="selector-id">#margin-bottom</span>: <span class="number">0</span>;#&#125; <span class="attribute">border-radius</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/index/&quot;</span>&gt;</span>员工管理系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>用户名<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>个人资料<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我的信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        &#123;# <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>#&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">js</span>/<span class="attr">jQuery.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-3.4.1</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&#123;% block content %&#125;&#123;% endblock %&#125;</code>实际为特殊的占位符</p><p>此时可以将<code>depart_add.html</code>转化为如下形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>添加部门<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/depart/add&quot;</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">&quot;请输入部门名称&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><code>&#123;% extends "layout.html" %&#125;</code>即为继承模版，必须写在文件的最开头</p><p>另外，这样写后续如果对导航进行编辑，就可以实现同步编辑，而不用每个html文件进行修改。</p><h4 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h4><p>创建数据最好直接使用Pycharm进行</p><p>要注意日期与性别的转化</p><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><ul><li><p>原始的方式：不采用，麻烦</p><blockquote><p>× 问题1：如何进行数据的校验（是否为空号）</p></blockquote></li></ul><blockquote><p>× 问题2：在页面上需要进行错误提示</p><p>× 问题3：如何数据库上有超级多的数据，那么页面上的每一个字段都需要我们自己重新写，很麻烦</p><p>× 问题4：如果有一些关联的数据（比如下拉框），需要自己手动取数据进行循环展示在页面中</p></blockquote><ul><li><p>Django组件</p><ul><li>Form组件（小简便）</li><li>ModelForm组件（最简便）</li></ul></li></ul><p>原始方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;gender_choices&quot;</span>: models.UserInfo.gender_choice,</span><br><span class="line">            <span class="string">&quot;depart_list&quot;</span>: models.DepartMent.objects.<span class="built_in">all</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    account = request.POST.get(<span class="string">&quot;account&quot;</span>)</span><br><span class="line">    create_time = request.POST.get(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">    depart = request.POST.get(<span class="string">&quot;depart&quot;</span>)</span><br><span class="line">    gender = request.POST.get(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username, password, age, gender, depart, account, create_time)</span><br><span class="line"></span><br><span class="line">    models.UserInfo.objects.create(name=username, password=password, gender=gender, depart_id=depart, age=age,</span><br><span class="line">                                   account=account, create_time=create_time)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>部门<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        &#123;% for item in depart_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; item.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        &#123;% for item in gender_choices %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; item.0 &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.1 &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初识Form"><a href="#初识Form" class="headerlink" title="初识Form"></a>初识Form</h3><ol><li><p>views.py</p><p><code>forms.CharField</code>要与models类定义的数据类型相同，有多少个字段就需要自己写上多少个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrom</span>(<span class="title class_ inherited__">Form</span>):</span><br><span class="line">    user = forms.CharField(widget=forms.Input)</span><br><span class="line">    pwd = forms.CharField(widget=forms.Input)</span><br><span class="line">    email = forms.CharField(widget=forms.Input)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = MyForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;user_add.html&quot;</span>,&#123;<span class="string">&quot;form&quot;</span>:form&#125;)</span><br></pre></td></tr></table></figure></li><li><p>user_add.html</p><p>这样就不用自己手写html输入框了,<strong>这种方法只能显示输入框，不会显示提示</strong>，如果要显示的话，需要加上<code>form.name.label</code>，这种方法连接的是<code>models.py</code>中模型的<code>verbose_name</code>字段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">    &#123;&#123; field.label &#125;&#125; : &#123;&#123; field &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更简便的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">        &#123;&#123; field.label &#125;&#125;:&#123;&#123; field &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="ModelForm-recommandation"><a href="#ModelForm-recommandation" class="headerlink" title="ModelForm(recommandation)"></a>ModelForm(recommandation)</h3><p>是针对数据库的操作，那么最好使用ModelFrom</p><h4 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手"></a>快速上手</h4><ol><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> ModelForm</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 支持自定义字段</span></span><br><span class="line">        xx = form.CharField(<span class="string">&quot;....&quot;</span>)</span><br><span class="line">        model = UserInfo</span><br><span class="line">        <span class="comment"># 如果返回全部可以使用</span></span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        fields = [<span class="string">&quot;user&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;email&quot;</span>,<span class="string">&quot;xx&quot;</span>]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = MyForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;user_add.html&quot;</span>,&#123;<span class="string">&quot;form&quot;</span>:form&#125;)</span><br></pre></td></tr></table></figure></li><li><p>user_add.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">        &#123;&#123; field.label &#125;&#125; : &#123;&#123; field &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>展示的结果是：</p><img src="https://www.z4a.net/images/2024/08/11/20.png" alt="image-20240217114956547" style="zoom:67%;" /><p>此时就会发现部门的部分有点问题，因为循环拿出的是<strong>对象</strong>，此时打印出的是对象本本身，如果要使打印出来的为特定的字符串，需要再对象中添加<code>__str__</code>的魔术方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DepartMent</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    部门表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># verbose_name为注解</span></span><br><span class="line">    <span class="comment"># BigAutoField 还有一个 AutoField，</span></span><br><span class="line">    <span class="comment"># 不过后者是一个 32 位整数，而前者是一个 64 位整数。</span></span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>, verbose_name=<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;部门名称&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>这样打印出来的就是部门的名字，而不是对象本身：</p><img src="https://www.z4a.net/images/2024/08/11/21.png" alt="image-20240217115250129" style="zoom:67%;" /><p>但是这样并没有css样式，因为field是自动生成的html标签，这时候可以在定义modelform的类中这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># depart 不要写成 depart_id 它可以自动找到命名</span></span><br><span class="line">        <span class="comment"># fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &quot;account&quot;, &quot;depart&quot;, &quot;</span></span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;account&quot;</span>: forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;depart&quot;</span>: forms.Select(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: forms.Select(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;create_time&quot;</span>: forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>因为添加的class都一样，这样写代码不够简便，可以改为这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># depart 不要写成 depart_id 它可以自动找到命名</span></span><br><span class="line">        <span class="comment"># fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &quot;account&quot;, </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            item.widget.attrs.update(&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)&#125;)</span><br></pre></td></tr></table></figure><p>结果为：</p><img src="https://www.z4a.net/images/2024/08/11/22.png" alt="image-20240217123235243" style="zoom: 50%;" /><h4 id="数据的校验"><a href="#数据的校验" class="headerlink" title="数据的校验"></a>数据的校验</h4><p>这里只简单描述了如何校验空数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_modelform_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = UserModelForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是，这边<code>form.errors</code>它是一个列表，我们一般只需要取第一个就可以，而且需要将他显示在页面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>新建用户<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                &#123;#    关闭浏览器空置验证 novalidate#&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/modelformadd&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    &#123;% for field in form %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            &#123;&#123; field &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这样如果不输入数据就会有提示出现：</p><img src="https://www.z4a.net/images/2024/08/11/23.png" alt="image-20240217123615667" style="zoom: 50%;" /><p>可以将提示改为中文，修改<code>settings.py</code>中的<code>LANGUAGE_CODE = &quot;en-us&quot;</code>改为<code>LANGUAGE_CODE = &quot;zh-hans&quot;</code></p><img src="https://www.z4a.net/images/2024/08/11/24.png" alt="image-20240217123726170" style="zoom:67%;" /><p>如果需要自定义错误提示可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="comment"># 自定义字段</span></span><br><span class="line">    name = forms.CharField(min_length=<span class="number">2</span>, label=<span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;长度不能小于2&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># 如果要使用正则表达式验证，可以使用validators</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">6</span>, label=<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">                               error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;长度不能小于6&quot;</span>&#125;)</span><br><span class="line">    age = forms.IntegerField(max_value=<span class="number">100</span>, label=<span class="string">&quot;年龄&quot;</span>,</span><br><span class="line">                             error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;max_value&quot;</span>: <span class="string">&quot;不能大于100&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># depart 不要写成 depart_id 它可以自动找到命名</span></span><br><span class="line">        <span class="comment"># fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &quot;account&quot;, &quot;depart&quot;, &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="comment"># item.widget.attrs.update(&#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;)</span></span><br><span class="line">            item.widget.attrs = &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑员工"><a href="#编辑员工" class="headerlink" title="编辑员工"></a>编辑员工</h4><p>我们的创建时间一般不需要精确到分钟，只需要到日就行</p><img src="https://www.z4a.net/images/2024/08/11/25.png" alt="image-20240217141657625" style="zoom: 50%;" /><p>因此我们需要将<code>models.py</code>中的<code>create_time</code>字段修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_time = models.DateField(verbose_name=<span class="string">&quot;创建时间&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果要单独插入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    form = UserModelForm(data=request.POST, instance=instance_data)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        <span class="comment"># 如果想保存用户输入以外的其他值，可以使用以下方法</span></span><br><span class="line">        <span class="comment"># form.instance.depart_id = request.POST.get(&quot;depart&quot;)</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure><h2 id="主题：靓号管理"><a href="#主题：靓号管理" class="headerlink" title="主题：靓号管理"></a>主题：靓号管理</h2><h3 id="设计表结构"><a href="#设计表结构" class="headerlink" title="设计表结构"></a>设计表结构</h3><table><thead><tr><th>ID</th><th>moblile</th><th>price</th><th>level</th><th>status</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneNumber</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;靓号表&quot;&quot;&quot;</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">&quot;手机号&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果是IntegerField，不需要设置长度</span></span><br><span class="line">    <span class="comment"># 想要允许为空，可以设置null=True,blank=True</span></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;价格&quot;</span>)</span><br><span class="line">    level_choices = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;低&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;中&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;高&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    level = models.SmallIntegerField(choices=level_choices, default=<span class="number">1</span>, verbose_name=<span class="string">&quot;靓号等级&quot;</span>)</span><br><span class="line"></span><br><span class="line">    status_choices = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;未出售&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;已出售&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    status = models.SmallIntegerField(choices=status_choices, default=<span class="number">1</span>, verbose_name=<span class="string">&quot;售卖状态&quot;</span>)</span><br></pre></td></tr></table></figure><p>初始状态为：</p><img src="https://www.z4a.net/images/2024/08/11/26.png" alt="image-20240217144155453" style="zoom:67%;" /><h3 id="新建靓号"><a href="#新建靓号" class="headerlink" title="新建靓号"></a>新建靓号</h3><ol><li>新建连接</li><li>在views.py中定义操作函数</li><li>新建HTML文件，继承母版</li><li>使用modelform显示数据</li></ol><p>手机号不允许重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clean_mobile</span>(<span class="params">self</span>):</span><br><span class="line">    mobile_ = self.cleaned_data[<span class="string">&quot;mobile&quot;</span>]</span><br><span class="line">    exits = models.PhoneNumber.objects.<span class="built_in">filter</span>(mobile=mobile_).exists()</span><br><span class="line">    <span class="keyword">if</span> exits:</span><br><span class="line">        <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号已存在&quot;</span>)</span><br><span class="line">        <span class="comment"># 验证不通过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mobile_</span><br></pre></td></tr></table></figure><h3 id="编辑与删除靓号"><a href="#编辑与删除靓号" class="headerlink" title="编辑与删除靓号"></a>编辑与删除靓号</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 编辑信息新建一个modelform来实现不一样的功能</p></li><li><p><input checked="" disabled="" type="checkbox"> 不允许用户编辑手机号</p></li><li><p><input checked="" disabled="" type="checkbox"> 手机号不允许重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排除自己以外，其他的数据是否重复？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用self.instance获取当前编辑信息的id</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_mobile</span>(<span class="params">self</span>):</span><br><span class="line">    mobile_ = self.cleaned_data[<span class="string">&quot;mobile&quot;</span>]</span><br><span class="line">    exits = models.PhoneNumber.objects.exclude(<span class="built_in">id</span>=self.instance).<span class="built_in">filter</span>(mobile=mobile_).exists()</span><br><span class="line">    <span class="keyword">if</span> exits:</span><br><span class="line">        <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号已存在&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> mobile_</span><br></pre></td></tr></table></figure></li></ul><h3 id="靓号搜索"><a href="#靓号搜索" class="headerlink" title="靓号搜索"></a>靓号搜索</h3><h4 id="按照索引"><a href="#按照索引" class="headerlink" title="按照索引"></a>按照索引</h4><p>在数据库中查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile=<span class="string">&quot;19999991&quot;</span>,<span class="built_in">id</span>=<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用字典来作为索引</span></span><br><span class="line">data_dict = &#123;<span class="string">&quot;mobile&quot;</span>:<span class="string">&quot;199999991&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123</span>&#125;</span><br><span class="line">models.PrettyNumber.objects.<span class="built_in">filter</span>(**data_dict)</span><br></pre></td></tr></table></figure><h4 id="按照数字搜索"><a href="#按照数字搜索" class="headerlink" title="按照数字搜索"></a>按照数字搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ID大于12</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(id__gt=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># ID大于等于12</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(id__gte=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># ID小于12</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(id__lt=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># ID小于等于12</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(id__lte=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h4 id="按照字符串搜索"><a href="#按照字符串搜索" class="headerlink" title="按照字符串搜索"></a>按照字符串搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 以什么开头</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile__startswith=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 以什么结尾</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile__endswith=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 包含</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile__contains=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>上述的方法都可以使用字典作为条件，这种方法可以使用多个筛选条件。</p><h3 id="分页展示"><a href="#分页展示" class="headerlink" title="分页展示"></a>分页展示</h3><p>因为queryset实质是一个列表，所以可以使用切片来展示数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一页</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile=<span class="number">12</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二页</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile=<span class="number">12</span>)[<span class="number">10</span>:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三页</span></span><br><span class="line">models.PhoneModileForm.objects.<span class="built_in">filter</span>(mobile=<span class="number">12</span>)[<span class="number">20</span>:<span class="number">30</span>]</span><br></pre></td></tr></table></figure><p>使用<code>page</code>作为参数，这时候在html中生车工结构已经不合适了，需要在Python中生成在传入</p><h3 id="分页组件的安装"><a href="#分页组件的安装" class="headerlink" title="分页组件的安装"></a>分页组件的安装</h3><p>价格分页系统直接分装为一个组件，需要注意的是，如果封装起来需要把跳转页面的代码也写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request, queryset, page_size=<span class="number">10</span>, page_param=<span class="string">&quot;page&quot;</span>, plus=<span class="number">5</span></span>):</span><br><span class="line">        page = request.GET.get(page_param, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> page.isdecimal():</span><br><span class="line">            page = <span class="built_in">int</span>(page)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page = <span class="number">1</span></span><br><span class="line">        self.page = page</span><br><span class="line">        self.page_size = page_size</span><br><span class="line"></span><br><span class="line">        self.start = (page - <span class="number">1</span>) * page_size</span><br><span class="line">        self.end = page * page_size</span><br><span class="line">        <span class="built_in">print</span>(page, <span class="built_in">type</span>(page))</span><br><span class="line"></span><br><span class="line">        self.queryset = queryset[self.start:self.end]</span><br><span class="line"></span><br><span class="line">        total_count = queryset.count()</span><br><span class="line"></span><br><span class="line">        page_total, div = <span class="built_in">divmod</span>(total_count, page_size)</span><br><span class="line">        <span class="keyword">if</span> div &gt; <span class="number">0</span>:</span><br><span class="line">            page_total += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.page_total = page_total</span><br><span class="line">        self.plus = plus</span><br><span class="line"></span><br><span class="line">        self.jump_page = request.GET.get(<span class="string">&quot;jump&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 数据库的数据较少 页码全部显示</span></span><br><span class="line">        <span class="keyword">if</span> self.page_total &lt; <span class="number">2</span> * self.plus + <span class="number">1</span>:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = self.page_total + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 数据库的数据较多</span></span><br><span class="line">            <span class="keyword">if</span> self.page &lt;= self.plus:</span><br><span class="line">                start_page = <span class="number">1</span></span><br><span class="line">                end_page = <span class="number">2</span> * self.plus + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.page &gt; self.page_total - self.plus:</span><br><span class="line">                start_page = self.page_total - <span class="number">2</span> * self.plus</span><br><span class="line">                end_page = self.page_total + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start_page = self.page - self.plus</span><br><span class="line">                end_page = self.page + self.plus + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成页码</span></span><br><span class="line">        page_data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page):</span><br><span class="line">            <span class="keyword">if</span> i == self.page:</span><br><span class="line">                hl = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    i, i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(i, i)</span><br><span class="line">            page_data.append(hl)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 首页 末页</span></span><br><span class="line">        shou_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>)</span><br><span class="line">        wei_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;末页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.page_total)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 上一页 下一页</span></span><br><span class="line">        prev_page = self.page - <span class="number">1</span></span><br><span class="line">        next_page = self.page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> prev_page &gt; <span class="number">1</span>:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                prev_page)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                <span class="number">1</span>)</span><br><span class="line">        page_data.insert(<span class="number">0</span>, hl)</span><br><span class="line">        <span class="keyword">if</span> next_page &lt;= self.page_total:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                next_page)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                self.page_total)</span><br><span class="line">        page_data.append(hl)</span><br><span class="line"></span><br><span class="line">        page_data.insert(<span class="number">0</span>, shou_page)</span><br><span class="line">        page_data.append(wei_page)</span><br><span class="line">        <span class="comment"># print(page_data)</span></span><br><span class="line">        <span class="keyword">return</span> page_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.queryset</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;跳跃的页码：<span class="subst">&#123;self.jump_page&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># jump_page = int(jump_page)</span></span><br><span class="line">        <span class="keyword">if</span> self.jump_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            jump_page = <span class="built_in">int</span>(self.jump_page)</span><br><span class="line">            <span class="keyword">if</span> jump_page &lt;= <span class="number">1</span>:</span><br><span class="line">                jump_page = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> jump_page &gt; self.page_total:</span><br><span class="line">                jump_page = self.page_total</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list?page=%s&quot;</span> % (jump_page,))</span><br></pre></td></tr></table></figure><p>修改后的html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> PhoneModelForm, PhoneEditModelForm</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.pagination <span class="keyword">import</span> Pagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="comment"># models.PhoneNumber.objects.filter(id=1)</span></span><br><span class="line">    search_ = request.GET.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="comment"># 传过来的值可能为空</span></span><br><span class="line">    <span class="keyword">if</span> search_:</span><br><span class="line">        data[<span class="string">&quot;mobile__contains&quot;</span>] = search_</span><br><span class="line">        <span class="comment"># return render(request, &quot;phone_list.html&quot;, &#123;&quot;data&quot;: data&#125;)</span></span><br><span class="line"></span><br><span class="line">    page = request.GET.get(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pagination = Pagination(request, models.PhoneNumber.objects.<span class="built_in">filter</span>(**data).order_by(<span class="string">&quot;-level&quot;</span>))</span><br><span class="line"></span><br><span class="line">    page_data = pagination.html()</span><br><span class="line">    data = pagination.get_queryset()</span><br><span class="line"></span><br><span class="line">    jump_page = request.GET.get(<span class="string">&quot;jump&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> jump_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        jump_page = pagination.jump_html()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list?page=%s&quot;</span> % (jump_page,))</span><br><span class="line"></span><br><span class="line">    page_data = mark_safe(<span class="string">&quot;&quot;</span>.join(page_data))</span><br><span class="line">    <span class="comment"># print(page_data)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_list.html&quot;</span>,</span><br><span class="line">                  &#123;<span class="string">&quot;data&quot;</span>: data, <span class="string">&quot;search&quot;</span>: search_, <span class="string">&quot;page_data&quot;</span>: page_data, <span class="string">&quot;current_page&quot;</span>: page&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneEditModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneEditModelForm(data=request.POST, instance=instance_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_delete</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>以后哪里用分页就放到哪里用就好，但出现一个小问题，搜索的时候需要保留搜索的条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000/phone/list?q=666</span><br></pre></td></tr></table></figure><h3 id="时间插件"><a href="#时间插件" class="headerlink" title="时间插件"></a>时间插件</h3><blockquote><p>额外插件：<a href="https://github.com/smalot/bootstrap-datetimepicker/archive/master.zip">bootstrap-datetimepicker</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-3.4.1</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">        &#123;<span class="selector-id">#margin-bottom</span>: <span class="number">0</span>;#&#125; <span class="attribute">border-radius</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">。。。。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">js</span>/<span class="attr">jQuery.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-3.4.1</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% block js %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要多引入东西，所以需要多写入几个block<code>&#123;% block js %&#125;&#123;% endblock %&#125;</code>,<code>&#123;% block css %&#125;&#123;% endblock %&#125;</code></p><p>需要引入以下依赖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block css %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span>/<span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">css</span>/<span class="attr">bootstrap-datetimepicker.min.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">js</span>/<span class="attr">bootstrap-datetimepicker.min.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">js</span>/<span class="attr">locales</span>/<span class="attr">bootstrap-datetimepicker.zh-CN.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#dt&quot;</span>).<span class="title function_">datepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="comment">//语言</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">autoclose</span>: <span class="literal">true</span>, <span class="comment">//选择后自动关闭</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">clearBtn</span>: <span class="literal">true</span>,<span class="comment">//清除按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>: <span class="string">&quot;yyyy-mm-dd&quot;</span><span class="comment">//日期格式</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#dt&quot;</span>).<span class="title function_">datepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="comment">//语言</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">autoclose</span>: <span class="literal">true</span>, <span class="comment">//选择后自动关闭</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">clearBtn</span>: <span class="literal">true</span>,<span class="comment">//清除按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">format</span>: <span class="string">&quot;yyyy-mm-dd&quot;</span><span class="comment">//日期格式</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这个js的作用是找到id为dt的标签</strong>，然后作用在标签上。</p><p>所以在<code>user_add.html</code>中要这样添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span>/<span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">css</span>/<span class="attr">bootstrap-datetimepicker.min.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入创建时间&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">js</span>/<span class="attr">bootstrap-datetimepicker.min.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">plugins</span>/<span class="attr">bootstrap-datetimepicker</span>/<span class="attr">js</span>/<span class="attr">locales</span>/<span class="attr">bootstrap-datetimepicker.zh-CN.js</span>&quot; %&#125;&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#dt&#x27;</span>).<span class="title function_">datetimepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="comment">// 中文语言包</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">autoclose</span>: <span class="number">1</span>, <span class="comment">// 选中日期后自动关闭</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>: <span class="string">&#x27;yyyy-mm-dd&#x27;</span>, <span class="comment">// 日期格式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">minView</span>: <span class="string">&quot;month&quot;</span>, <span class="comment">// 最小日期显示单元，这里最小显示月份界面，即可以选择到日</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">todayBtn</span>: <span class="number">1</span>, <span class="comment">// 显示今天按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">todayHighlight</span>: <span class="number">1</span>, <span class="comment">// 显示今天高亮</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>但是对于<code>modelform_add.html</code>这个模版，因为是Django生成的，<strong>Django帮我们自己生成了相应的id</strong>,点击检查可以看到</p><img src="https://www.z4a.net/images/2024/08/11/27.png" alt="image-20240219185355467" style="zoom: 50%;" /><p>所以只需要将id部分改为<code>id_create_time</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#id_create_time&#x27;</span>).<span class="title function_">datetimepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="comment">// 中文语言包</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoclose</span>: <span class="number">1</span>, <span class="comment">// 选中日期后自动关闭</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">format</span>: <span class="string">&#x27;yyyy-mm-dd&#x27;</span>, <span class="comment">// 日期格式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">minView</span>: <span class="string">&quot;month&quot;</span>, <span class="comment">// 最小日期显示单元，这里最小显示月份界面，即可以选择到日</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">todayBtn</span>: <span class="number">1</span>, <span class="comment">// 显示今天按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">todayHighlight</span>: <span class="number">1</span>, <span class="comment">// 显示今天高亮</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><img src="https://www.z4a.net/images/2024/08/11/47.png" alt="image-20240223141926737" style="zoom:67%;" /><h3 id="ModelForm与BootStrap"><a href="#ModelForm与BootStrap" class="headerlink" title="ModelForm与BootStrap"></a>ModelForm与BootStrap</h3><ul><li><p>ModelForm可以帮助我们生成HTML标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        fields = [<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;level&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br><span class="line">form = PhoneModelForm()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.name &#125;&#125; 普通的输入框</span><br><span class="line">&#123;&#123; form.age &#125;&#125; 普通的输入框</span><br></pre></td></tr></table></figure></li><li><p>定义插件 两种插件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        fields = [<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;level&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br><span class="line">        widget = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:forms.PasswordInput(attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>&#125;),</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    name = forms.TextInput(</span><br><span class="line">        min_length=<span class="number">3</span>,</span><br><span class="line">        label=<span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">        widge=forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        fields = [<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;level&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.name &#125;&#125; BootStrap的输入框</span><br><span class="line">&#123;&#123; form.age &#125;&#125; BootStrap的输入框</span><br></pre></td></tr></table></figure></li><li><p>重新定义的init方法，批量设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># fields = [&quot;mobile&quot;, &quot;price&quot;, &quot;level&quot;, &quot;status&quot;]</span></span><br><span class="line">        <span class="comment"># 排除哪个字段</span></span><br><span class="line">        <span class="comment"># exclude = [&quot;status&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 循环Modelform中的所有字段，在每个字段设置插件</span></span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            item.widget.attrs = &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, </span><br><span class="line">                <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>以上方法会导致原有的属性被覆盖，可以优化如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">    <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">        <span class="keyword">if</span> item.widget.attrs:</span><br><span class="line">            item.widget.attrs[<span class="string">&quot;class&quot;</span>] = <span class="string">&quot;form-control&quot;</span></span><br><span class="line">            item.widget.attrs[<span class="string">&quot;placeholder&quot;</span>] = <span class="string">&quot;请输入%s&quot;</span> % (item.label,)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item.widget.attrs = &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个类进行继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrapModelForm</span>(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 循环Modelform中的所有字段，在每个字段设置插件</span></span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            item.widget.attrs = &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, </span><br><span class="line">                <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>然后就可以将其他<code>forms.ModelForm</code>改为继承<code>BootStrapModelForm</code></p><p>替换：</p><ul><li><p>导入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> management_sys.utils.BootstrapModel <span class="keyword">import</span> BootStrapModelForm</span><br></pre></td></tr></table></figure></li><li><p>将其他的init方法删除，保留钩子方法</p></li></ul></li><li><p>将所有ModelForm全写入一个py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.BootstrapModel <span class="keyword">import</span> BootStrapModelForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="comment"># 自定义字段</span></span><br><span class="line">    name = forms.CharField(min_length=<span class="number">2</span>, label=<span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;长度不能小于2&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># 如果要使用正则表达式验证，可以使用validators</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">6</span>, label=<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">                               error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;长度不能小于6&quot;</span>&#125;)</span><br><span class="line">    age = forms.IntegerField(max_value=<span class="number">100</span>, label=<span class="string">&quot;年龄&quot;</span>,</span><br><span class="line">                             error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;不能为空&quot;</span>, <span class="string">&quot;max_value&quot;</span>: <span class="string">&quot;不能大于100&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.UserInfo</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式二：钩子方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_mobile</span>(<span class="params">self</span>):</span><br><span class="line">        mobile_ = self.cleaned_data[<span class="string">&quot;mobile&quot;</span>]</span><br><span class="line">        exits = models.PhoneNumber.objects.<span class="built_in">filter</span>(mobile=mobile_).exists()</span><br><span class="line">        <span class="keyword">if</span> exits:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号已存在&quot;</span>)</span><br><span class="line">        <span class="comment"># 验证不通过</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(mobile_) != <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号长度不对&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> mobile_:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&quot;0123456789&quot;</span>:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号格式错误，必须全是数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mobile_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneEditModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    mobile = forms.CharField(disabled=<span class="literal">True</span>, label=<span class="string">&quot;手机号&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.PhoneNumber</span><br><span class="line">        <span class="comment"># 不让用户修改手机号</span></span><br><span class="line">        fields = [<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;level&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_mobile</span>(<span class="params">self</span>):</span><br><span class="line">        mobile_ = self.cleaned_data[<span class="string">&quot;mobile&quot;</span>]</span><br><span class="line">        exits = models.PhoneNumber.objects.exclude(<span class="built_in">id</span>=self.instance).<span class="built_in">filter</span>(mobile=mobile_).exists()</span><br><span class="line">        <span class="keyword">if</span> exits:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;手机号已存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> mobile_</span><br></pre></td></tr></table></figure><p>在views.py中修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> UserModelForm, PhoneModelForm, PhoneEditModelForm</span><br></pre></td></tr></table></figure></li><li><p>可以将视图函数进行划分</p><p>可以将视图函数按照业务功能划分，单独创建一个views文件夹，将不同的业务划分到不同的py文件中</p><p>depart.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = models.DepartMent.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;depart_list.html&quot;</span>, &#123;<span class="string">&quot;depart_list&quot;</span>: data&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_add.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    title = request.POST.get(<span class="string">&quot;department&quot;</span>)</span><br><span class="line">    models.DepartMent.objects.create(title=title)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_delete</span>(<span class="params">request</span>):</span><br><span class="line">    data = request.GET.get(<span class="string">&quot;nid&quot;</span>)</span><br><span class="line">    models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=data).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 返回值是一个列表</span></span><br><span class="line">        title = models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first().title</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_edit.html&quot;</span>, &#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">    temp = request.POST.get(<span class="string">&quot;department&quot;</span>)</span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    <span class="comment"># 多个字段更新 在每个字段后面加上逗号</span></span><br><span class="line">    models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).update(title=temp, )</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> UserModelForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = models.UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 这里是通过Django的Python代码来实现的</span></span><br><span class="line">    <span class="comment"># for i in data:</span></span><br><span class="line">    <span class="comment">#     # 将datetime 类型转化为字符串类型</span></span><br><span class="line">    <span class="comment">#     # i.create_time = dt.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span></span><br><span class="line">    <span class="comment">#     i.create_time = dt.strftime(&quot;%Y-%m-%d&quot;)</span></span><br><span class="line">    <span class="comment">#     # 可以直接通过get_字段名_display()获取choices的值</span></span><br><span class="line">    <span class="comment">#     i.gender = i.get_gender_display()</span></span><br><span class="line">    <span class="comment">#     # 通过部门id获得部门名称 会将id自动转化名称</span></span><br><span class="line">    <span class="comment">#     i.depart_id = i.depart.title</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;user_list.html&quot;</span>, &#123;<span class="string">&quot;user_list&quot;</span>: data&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;gender_choices&quot;</span>: models.UserInfo.gender_choice,</span><br><span class="line">            <span class="string">&quot;depart_list&quot;</span>: models.DepartMent.objects.<span class="built_in">all</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    account = request.POST.get(<span class="string">&quot;account&quot;</span>)</span><br><span class="line">    create_time = request.POST.get(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">    depart = request.POST.get(<span class="string">&quot;depart&quot;</span>)</span><br><span class="line">    gender = request.POST.get(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username, password, age, gender, depart, account, create_time)</span><br><span class="line"></span><br><span class="line">    models.UserInfo.objects.create(name=username, password=password, gender=gender, depart_id=depart, age=age,</span><br><span class="line">                                   account=account, create_time=create_time)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class UserModelForm(BootStrapModelForm):</span></span><br><span class="line"><span class="comment">#     # 自定义字段</span></span><br><span class="line"><span class="comment">#     name = forms.CharField(min_length=2, label=&quot;姓名&quot;,</span></span><br><span class="line"><span class="comment">#                            error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;min_length&quot;: &quot;长度不能小于2&quot;&#125;)</span></span><br><span class="line"><span class="comment">#     # 如果要使用正则表达式验证，可以使用validators</span></span><br><span class="line"><span class="comment">#     password = forms.CharField(min_length=6, label=&quot;密码&quot;,</span></span><br><span class="line"><span class="comment">#                                error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;min_length&quot;: &quot;长度不能小于6&quot;&#125;)</span></span><br><span class="line"><span class="comment">#     age = forms.IntegerField(max_value=100, label=&quot;年龄&quot;,</span></span><br><span class="line"><span class="comment">#                              error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;max_value&quot;: &quot;不能大于100&quot;&#125;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = models.UserInfo</span></span><br><span class="line"><span class="comment">#         fields = &quot;__all__&quot;</span></span><br><span class="line"><span class="comment">#         # depart 不要写成 depart_id 它可以自动找到命名</span></span><br><span class="line"><span class="comment">#         # fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &quot;account&quot;, &quot;depart&quot;, &quot;gender&quot;,&quot;create_time&quot;]</span></span><br><span class="line"><span class="comment">#         # widgets = &#123;</span></span><br><span class="line"><span class="comment">#         #     &quot;name&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;password&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;account&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;depart&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;gender&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;create_time&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         # &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # def __init__(self, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#     #     super().__init__(*args, **kwargs)</span></span><br><span class="line"><span class="comment">#     #     for name, item in self.fields.items():</span></span><br><span class="line"><span class="comment">#     #         # item.widget.attrs.update(&#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;)</span></span><br><span class="line"><span class="comment">#     #         item.widget.attrs = &#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_modelform_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = UserModelForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    form = UserModelForm(data=request.POST, instance=instance_data)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        <span class="comment"># 如果想保存用户输入以外的其他值，可以使用以下方法</span></span><br><span class="line">        <span class="comment"># form.instance.depart_id = request.POST.get(&quot;depart&quot;)</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>phone.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> PhoneModelForm, PhoneEditModelForm</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="comment"># models.PhoneNumber.objects.filter(id=1)</span></span><br><span class="line">    search_ = request.GET.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="comment"># 传过来的值可能为空</span></span><br><span class="line">    <span class="keyword">if</span> search_:</span><br><span class="line">        data[<span class="string">&quot;mobile__contains&quot;</span>] = search_</span><br><span class="line">        <span class="comment"># return render(request, &quot;phone_list.html&quot;, &#123;&quot;data&quot;: data&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认为第一页 不写有问题</span></span><br><span class="line">    page = request.GET.get(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    page = <span class="built_in">int</span>(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每页的数据大小</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 根据要访问的页码计算出起止位置</span></span><br><span class="line">    start = (page - <span class="number">1</span>) * page_size</span><br><span class="line">    end = page * page_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以进行排序 -level 表示按照级别降序</span></span><br><span class="line">    <span class="comment"># data = models.PhoneNumber.objects.all().order_by(&quot;-level&quot;)</span></span><br><span class="line">    data = models.PhoneNumber.objects.<span class="built_in">filter</span>(**data).order_by(<span class="string">&quot;-level&quot;</span>)[start:end]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据总数</span></span><br><span class="line">    total_count = models.PhoneNumber.objects.<span class="built_in">all</span>().count()</span><br><span class="line">    <span class="comment"># 总页数</span></span><br><span class="line">    page_total, div = <span class="built_in">divmod</span>(total_count, page_size)</span><br><span class="line">    <span class="keyword">if</span> div &gt; <span class="number">0</span>:</span><br><span class="line">        page_total += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出显示当前页码的前五页,后五页</span></span><br><span class="line">    plus = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 数据库的数据较少 页码全部显示</span></span><br><span class="line">    <span class="keyword">if</span> page_total &lt; <span class="number">2</span> * plus + <span class="number">1</span>:</span><br><span class="line">        start_page = <span class="number">1</span></span><br><span class="line">        end_page = page_total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 数据库的数据较多</span></span><br><span class="line">        <span class="keyword">if</span> page &lt;= plus:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = <span class="number">2</span> * plus + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> page &gt; page_total - plus:</span><br><span class="line">            start_page = page_total - <span class="number">2</span> * plus</span><br><span class="line">            end_page = page_total + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start_page = page - plus</span><br><span class="line">            end_page = page + plus + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成页码</span></span><br><span class="line">    page_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page):</span><br><span class="line">        <span class="keyword">if</span> i == page:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(i, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(i, i)</span><br><span class="line">        page_data.append(hl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 首页 末页</span></span><br><span class="line">    shou_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>)</span><br><span class="line">    wei_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;末页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(page_total)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上一页 下一页</span></span><br><span class="line">    prev_page = page - <span class="number">1</span></span><br><span class="line">    next_page = page + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> prev_page &gt; <span class="number">1</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            prev_page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="number">1</span>)</span><br><span class="line">    page_data.insert(<span class="number">0</span>, hl)</span><br><span class="line">    <span class="keyword">if</span> next_page &lt;= page_total:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            next_page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            page_total)</span><br><span class="line">    page_data.append(hl)</span><br><span class="line"></span><br><span class="line">    page_data.insert(<span class="number">0</span>, shou_page)</span><br><span class="line">    page_data.append(wei_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳转页面</span></span><br><span class="line">    jump_page = request.GET.get(<span class="string">&quot;jump&quot;</span>)</span><br><span class="line">    <span class="comment"># jump_page = int(jump_page)</span></span><br><span class="line">    <span class="keyword">if</span> jump_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        jump_page = <span class="built_in">int</span>(jump_page)</span><br><span class="line">        <span class="keyword">if</span> jump_page &lt;= <span class="number">1</span>:</span><br><span class="line">            jump_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> jump_page &gt; page_total:</span><br><span class="line">            jump_page = page_total</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list?page=%s&quot;</span> % (jump_page,))</span><br><span class="line"></span><br><span class="line">    page_data = mark_safe(<span class="string">&quot;&quot;</span>.join(page_data))</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_list.html&quot;</span>,</span><br><span class="line">                  &#123;<span class="string">&quot;data&quot;</span>: data, <span class="string">&quot;search&quot;</span>: search_, <span class="string">&quot;page_data&quot;</span>: page_data, <span class="string">&quot;current_page&quot;</span>: page&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneEditModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneEditModelForm(data=request.POST, instance=instance_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_delete</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要导入的话需要把<code>views.py</code>给删除</p><p>然后在<code>url.py</code>中导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> management_sys.views <span class="keyword">import</span> depart, user, phone</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&quot;admin/&quot;, admin.site.urls),</span></span><br><span class="line">    <span class="comment"># 部门管理</span></span><br><span class="line">    path(<span class="string">&quot;index/&quot;</span>, depart.index),</span><br><span class="line">    path(<span class="string">&quot;depart/list&quot;</span>, depart.depart_list),</span><br><span class="line">    path(<span class="string">&quot;depart/add&quot;</span>, depart.depart_add),</span><br><span class="line">    path(<span class="string">&quot;depart/delete&quot;</span>, depart.depart_delete),</span><br><span class="line">    path(<span class="string">&quot;depart/&lt;int:nid&gt;/edit&quot;</span>, depart.depart_edit),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户管理</span></span><br><span class="line">    path(<span class="string">&quot;user/list&quot;</span>, user.user_list),</span><br><span class="line">    path(<span class="string">&quot;user/add&quot;</span>, user.user_add),</span><br><span class="line">    path(<span class="string">&quot;user/modelformadd&quot;</span>, user.user_modelform_add),</span><br><span class="line">    path(<span class="string">&quot;user/&lt;int:nid&gt;/edit&quot;</span>, user.user_edit),</span><br><span class="line">    path(<span class="string">&quot;user/&lt;int:nid&gt;/delete&quot;</span>, user.user_delete),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 靓号管理</span></span><br><span class="line">    path(<span class="string">&quot;phone/list&quot;</span>, phone.phone_list),</span><br><span class="line">    path(<span class="string">&quot;phone/add&quot;</span>, phone.phone_add),</span><br><span class="line">    path(<span class="string">&quot;phone/&lt;int:nid&gt;/edit&quot;</span>, phone.phone_edit),</span><br><span class="line">    path(<span class="string">&quot;phone/&lt;int:nid&gt;/delete&quot;</span>, phone.phone_delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给views.py存个档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="comment"># 设置安全信任</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.BootstrapModel <span class="keyword">import</span> BootStrapModelForm</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> UserModelForm, PhoneModelForm, PhoneEditModelForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = models.DepartMent.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;depart_list.html&quot;</span>, &#123;<span class="string">&quot;depart_list&quot;</span>: data&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_add.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    title = request.POST.get(<span class="string">&quot;department&quot;</span>)</span><br><span class="line">    models.DepartMent.objects.create(title=title)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_delete</span>(<span class="params">request</span>):</span><br><span class="line">    data = request.GET.get(<span class="string">&quot;nid&quot;</span>)</span><br><span class="line">    models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=data).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depart_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 返回值是一个列表</span></span><br><span class="line">        title = models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first().title</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;depart_edit.html&quot;</span>, &#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">    temp = request.POST.get(<span class="string">&quot;department&quot;</span>)</span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    <span class="comment"># 多个字段更新 在每个字段后面加上逗号</span></span><br><span class="line">    models.DepartMent.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).update(title=temp, )</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/depart/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>(<span class="params">request</span>):</span><br><span class="line">    data = models.UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 这里是通过Django的Python代码来实现的</span></span><br><span class="line">    <span class="comment"># for i in data:</span></span><br><span class="line">    <span class="comment">#     # 将datetime 类型转化为字符串类型</span></span><br><span class="line">    <span class="comment">#     # i.create_time = dt.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span></span><br><span class="line">    <span class="comment">#     i.create_time = dt.strftime(&quot;%Y-%m-%d&quot;)</span></span><br><span class="line">    <span class="comment">#     # 可以直接通过get_字段名_display()获取choices的值</span></span><br><span class="line">    <span class="comment">#     i.gender = i.get_gender_display()</span></span><br><span class="line">    <span class="comment">#     # 通过部门id获得部门名称 会将id自动转化名称</span></span><br><span class="line">    <span class="comment">#     i.depart_id = i.depart.title</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;user_list.html&quot;</span>, &#123;<span class="string">&quot;user_list&quot;</span>: data&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;gender_choices&quot;</span>: models.UserInfo.gender_choice,</span><br><span class="line">            <span class="string">&quot;depart_list&quot;</span>: models.DepartMent.objects.<span class="built_in">all</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_add.html&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    account = request.POST.get(<span class="string">&quot;account&quot;</span>)</span><br><span class="line">    create_time = request.POST.get(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">    depart = request.POST.get(<span class="string">&quot;depart&quot;</span>)</span><br><span class="line">    gender = request.POST.get(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username, password, age, gender, depart, account, create_time)</span><br><span class="line"></span><br><span class="line">    models.UserInfo.objects.create(name=username, password=password, gender=gender, depart_id=depart, age=age,</span><br><span class="line">                                   account=account, create_time=create_time)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class UserModelForm(BootStrapModelForm):</span></span><br><span class="line"><span class="comment">#     # 自定义字段</span></span><br><span class="line"><span class="comment">#     name = forms.CharField(min_length=2, label=&quot;姓名&quot;,</span></span><br><span class="line"><span class="comment">#                            error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;min_length&quot;: &quot;长度不能小于2&quot;&#125;)</span></span><br><span class="line"><span class="comment">#     # 如果要使用正则表达式验证，可以使用validators</span></span><br><span class="line"><span class="comment">#     password = forms.CharField(min_length=6, label=&quot;密码&quot;,</span></span><br><span class="line"><span class="comment">#                                error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;min_length&quot;: &quot;长度不能小于6&quot;&#125;)</span></span><br><span class="line"><span class="comment">#     age = forms.IntegerField(max_value=100, label=&quot;年龄&quot;,</span></span><br><span class="line"><span class="comment">#                              error_messages=&#123;&quot;required&quot;: &quot;不能为空&quot;, &quot;max_value&quot;: &quot;不能大于100&quot;&#125;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = models.UserInfo</span></span><br><span class="line"><span class="comment">#         fields = &quot;__all__&quot;</span></span><br><span class="line"><span class="comment">#         # depart 不要写成 depart_id 它可以自动找到命名</span></span><br><span class="line"><span class="comment">#         # fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &quot;account&quot;, &quot;depart&quot;, &quot;gender&quot;,&quot;create_time&quot;]</span></span><br><span class="line"><span class="comment">#         # widgets = &#123;</span></span><br><span class="line"><span class="comment">#         #     &quot;name&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;password&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;account&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;depart&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;gender&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         #     &quot;create_time&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;),</span></span><br><span class="line"><span class="comment">#         # &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # def __init__(self, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#     #     super().__init__(*args, **kwargs)</span></span><br><span class="line"><span class="comment">#     #     for name, item in self.fields.items():</span></span><br><span class="line"><span class="comment">#     #         # item.widget.attrs.update(&#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;)</span></span><br><span class="line"><span class="comment">#     #         item.widget.attrs = &#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_modelform_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = UserModelForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;modelform_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UserModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    form = UserModelForm(data=request.POST, instance=instance_data)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        <span class="comment"># 如果想保存用户输入以外的其他值，可以使用以下方法</span></span><br><span class="line">        <span class="comment"># form.instance.depart_id = request.POST.get(&quot;depart&quot;)</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;user_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/user/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># for i in range(300):</span></span><br><span class="line">    <span class="comment">#     models.PhoneNumber.objects.create(mobile=&quot;12345678901&quot;, price=100, level=1, status=1)</span></span><br><span class="line"></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="comment"># models.PhoneNumber.objects.filter(id=1)</span></span><br><span class="line">    search_ = request.GET.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="comment"># 传过来的值可能为空</span></span><br><span class="line">    <span class="keyword">if</span> search_:</span><br><span class="line">        data[<span class="string">&quot;mobile__contains&quot;</span>] = search_</span><br><span class="line">        <span class="comment"># return render(request, &quot;phone_list.html&quot;, &#123;&quot;data&quot;: data&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认为第一页 不写有问题</span></span><br><span class="line">    page = request.GET.get(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    page = <span class="built_in">int</span>(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每页的数据大小</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 根据要访问的页码计算出起止位置</span></span><br><span class="line">    start = (page - <span class="number">1</span>) * page_size</span><br><span class="line">    end = page * page_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以进行排序 -level 表示按照级别降序</span></span><br><span class="line">    <span class="comment"># data = models.PhoneNumber.objects.all().order_by(&quot;-level&quot;)</span></span><br><span class="line">    data = models.PhoneNumber.objects.<span class="built_in">filter</span>(**data).order_by(<span class="string">&quot;-level&quot;</span>)[start:end]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据总数</span></span><br><span class="line">    total_count = models.PhoneNumber.objects.<span class="built_in">all</span>().count()</span><br><span class="line">    <span class="comment"># 总页数</span></span><br><span class="line">    page_total, div = <span class="built_in">divmod</span>(total_count, page_size)</span><br><span class="line">    <span class="keyword">if</span> div &gt; <span class="number">0</span>:</span><br><span class="line">        page_total += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出显示当前页码的前五页,后五页</span></span><br><span class="line">    plus = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 数据库的数据较少 页码全部显示</span></span><br><span class="line">    <span class="keyword">if</span> page_total &lt; <span class="number">2</span> * plus + <span class="number">1</span>:</span><br><span class="line">        start_page = <span class="number">1</span></span><br><span class="line">        end_page = page_total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 数据库的数据较多</span></span><br><span class="line">        <span class="keyword">if</span> page &lt;= plus:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = <span class="number">2</span> * plus + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> page &gt; page_total - plus:</span><br><span class="line">            start_page = page_total - <span class="number">2</span> * plus</span><br><span class="line">            end_page = page_total + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start_page = page - plus</span><br><span class="line">            end_page = page + plus + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成页码</span></span><br><span class="line">    page_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page):</span><br><span class="line">        <span class="keyword">if</span> i == page:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(i, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(i, i)</span><br><span class="line">        page_data.append(hl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 首页 末页</span></span><br><span class="line">    shou_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>)</span><br><span class="line">    wei_page = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;末页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(page_total)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上一页 下一页</span></span><br><span class="line">    prev_page = page - <span class="number">1</span></span><br><span class="line">    next_page = page + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> prev_page &gt; <span class="number">1</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            prev_page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Previous&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="number">1</span>)</span><br><span class="line">    page_data.insert(<span class="number">0</span>, hl)</span><br><span class="line">    <span class="keyword">if</span> next_page &lt;= page_total:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            next_page)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li class=&quot;disabled&quot; disabled=&quot;True&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot; aria-label=&quot;Next&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            page_total)</span><br><span class="line">    page_data.append(hl)</span><br><span class="line"></span><br><span class="line">    page_data.insert(<span class="number">0</span>, shou_page)</span><br><span class="line">    page_data.append(wei_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳转页面</span></span><br><span class="line">    jump_page = request.GET.get(<span class="string">&quot;jump&quot;</span>)</span><br><span class="line">    <span class="comment"># jump_page = int(jump_page)</span></span><br><span class="line">    <span class="keyword">if</span> jump_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        jump_page = <span class="built_in">int</span>(jump_page)</span><br><span class="line">        <span class="keyword">if</span> jump_page &lt;= <span class="number">1</span>:</span><br><span class="line">            jump_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> jump_page &gt; page_total:</span><br><span class="line">            jump_page = page_total</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list?page=%s&quot;</span> % (jump_page,))</span><br><span class="line"></span><br><span class="line">    page_data = mark_safe(<span class="string">&quot;&quot;</span>.join(page_data))</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;phone_list.html&quot;</span>,</span><br><span class="line">                  &#123;<span class="string">&quot;data&quot;</span>: data, <span class="string">&quot;search&quot;</span>: search_, <span class="string">&quot;page_data&quot;</span>: page_data, <span class="string">&quot;current_page&quot;</span>: page&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class PhoneModelForm(BootStrapModelForm):</span></span><br><span class="line"><span class="comment">#     # 方式一：在字段中添加验证规则</span></span><br><span class="line"><span class="comment">#     # validator中可以添加多个验证规则</span></span><br><span class="line"><span class="comment">#     # mobile = forms.CharField(</span></span><br><span class="line"><span class="comment">#     #     min_length=11,</span></span><br><span class="line"><span class="comment">#     #     label=&quot;手机号&quot;,</span></span><br><span class="line"><span class="comment">#     #     validators=[RegexValidator(r&quot;^1\d&#123;10&#125;$&quot;, &quot;手机号格式错误&quot;)]</span></span><br><span class="line"><span class="comment">#     # )</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = models.PhoneNumber</span></span><br><span class="line"><span class="comment">#         fields = &quot;__all__&quot;</span></span><br><span class="line"><span class="comment">#         # fields = [&quot;mobile&quot;, &quot;price&quot;, &quot;level&quot;, &quot;status&quot;]</span></span><br><span class="line"><span class="comment">#         # 排除哪个字段</span></span><br><span class="line"><span class="comment">#         # exclude = [&quot;status&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # def __init__(self, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#     #     super().__init__(*args, **kwargs)</span></span><br><span class="line"><span class="comment">#     #     for name, item in self.fields.items():</span></span><br><span class="line"><span class="comment">#     #         if item.widget.attrs:</span></span><br><span class="line"><span class="comment">#     #             item.widget.attrs[&quot;class&quot;] = &quot;form-control&quot;</span></span><br><span class="line"><span class="comment">#     #             item.widget.attrs[&quot;placeholder&quot;] = &quot;请输入%s&quot; % (item.label,)</span></span><br><span class="line"><span class="comment">#     #         else:</span></span><br><span class="line"><span class="comment">#     #             item.widget.attrs = &#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 方式二：钩子方法</span></span><br><span class="line"><span class="comment">#     def clean_mobile(self):</span></span><br><span class="line"><span class="comment">#         mobile_ = self.cleaned_data[&quot;mobile&quot;]</span></span><br><span class="line"><span class="comment">#         exits = models.PhoneNumber.objects.filter(mobile=mobile_).exists()</span></span><br><span class="line"><span class="comment">#         if exits:</span></span><br><span class="line"><span class="comment">#             raise forms.ValidationError(&quot;手机号已存在&quot;)</span></span><br><span class="line"><span class="comment">#         # 验证不通过</span></span><br><span class="line"><span class="comment">#         if len(mobile_) != 11:</span></span><br><span class="line"><span class="comment">#             raise forms.ValidationError(&quot;手机号长度不对&quot;)</span></span><br><span class="line"><span class="comment">#         for i in mobile_:</span></span><br><span class="line"><span class="comment">#             if i not in &quot;0123456789&quot;:</span></span><br><span class="line"><span class="comment">#                 raise forms.ValidationError(&quot;手机号格式错误，必须全是数字&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         return mobile_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    instance_data = models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = PhoneEditModelForm(instance=instance_data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    form = PhoneEditModelForm(data=request.POST, instance=instance_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;phone_edit.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class PhoneEditModelForm(BootStrapModelForm):</span></span><br><span class="line"><span class="comment">#     mobile = forms.CharField(disabled=True, label=&quot;手机号&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = models.PhoneNumber</span></span><br><span class="line"><span class="comment">#         # fields = &quot;__all__&quot;</span></span><br><span class="line"><span class="comment">#         # 不让用户修改手机号</span></span><br><span class="line"><span class="comment">#         fields = [&quot;mobile&quot;, &quot;price&quot;, &quot;level&quot;, &quot;status&quot;]</span></span><br><span class="line"><span class="comment">#         # 排除哪个字段</span></span><br><span class="line"><span class="comment">#         # exclude = [&quot;status&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     #</span></span><br><span class="line"><span class="comment">#     # def __init__(self, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#     #     super().__init__(*args, **kwargs)</span></span><br><span class="line"><span class="comment">#     #     for name, item in self.fields.items():</span></span><br><span class="line"><span class="comment">#     #         item.widget.attrs = &#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入%s&quot; % (item.label,)&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def clean_mobile(self):</span></span><br><span class="line"><span class="comment">#         mobile_ = self.cleaned_data[&quot;mobile&quot;]</span></span><br><span class="line"><span class="comment">#         exits = models.PhoneNumber.objects.exclude(id=self.instance).filter(mobile=mobile_).exists()</span></span><br><span class="line"><span class="comment">#         if exits:</span></span><br><span class="line"><span class="comment">#             raise forms.ValidationError(&quot;手机号已存在&quot;)</span></span><br><span class="line"><span class="comment">#         return mobile_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phone_delete</span>(<span class="params">request, nid</span>):</span><br><span class="line">    models.PhoneNumber.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/phone/list&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="管理员功能"><a href="#管理员功能" class="headerlink" title="管理员功能"></a>管理员功能</h2><p>表结构的设计</p><table><thead><tr><th>ID</th><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;管理员&quot;&quot;&quot;</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;密码&quot;</span>)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/28.png" alt="image-20240219201308330" style="zoom: 67%;" /><img src="https://www.z4a.net/images/2024/08/11/29.png" alt="image-20240219201520031" style="zoom:67%;" /><h3 id="管理员列表"><a href="#管理员列表" class="headerlink" title="管理员列表"></a>管理员列表</h3><p>有了模板与工具类之后，编写列表变得很方便</p><p>需要注意的是，获取所有信息放在了<code>Pagination</code>工具类中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect, HttpResponse</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.forms <span class="keyword">import</span> AdminModelForm, AdminEditModelForm, AdminResetModelForm</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.pagination <span class="keyword">import</span> Pagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_list</span>(<span class="params">request</span>):</span><br><span class="line">    search_parameter = &#123;&#125;</span><br><span class="line">    search_ = request.GET.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> search_:</span><br><span class="line">        search_parameter[<span class="string">&quot;username__contains&quot;</span>] = search_</span><br><span class="line"></span><br><span class="line">    pagination = Pagination(request, models.Admin.objects.<span class="built_in">filter</span>(**search_parameter))</span><br><span class="line"></span><br><span class="line">    data = pagination.get_queryset()</span><br><span class="line">    html = pagination.html()</span><br><span class="line"></span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>: html,</span><br><span class="line">        <span class="string">&quot;search&quot;</span>: search_</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;admin_list.html&quot;</span>, content)</span><br></pre></td></tr></table></figure><h3 id="关于搜索"><a href="#关于搜索" class="headerlink" title="关于搜索"></a>关于搜索</h3><p>分页功能是有bug的，比如我搜索只后，点击下一页会直接从<code>admin/list?q=123</code>跳到<code>admin/list?page=2</code>，这是因为跳转链接并没有和搜索<code>q</code>参数产生关联。需要了解以下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.GET   <span class="comment"># 这个对象会返回连接中的所有参数</span></span><br><span class="line"></span><br><span class="line">request.GET.urlencode()   <span class="comment"># 会返回当前参数的连接形式</span></span><br></pre></td></tr></table></figure><p>如：</p><p>发送GET请求：<code>admin/list?aaa=123&amp;tys=456&amp;jjj=789</code></p><p>得到的结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;aaa&#x27;</span>: [<span class="string">&#x27;123&#x27;</span>], <span class="string">&#x27;tys&#x27;</span>: [<span class="string">&#x27;456&#x27;</span>], <span class="string">&#x27;jjj&#x27;</span>: [<span class="string">&#x27;789&#x27;</span>]&#125;&gt;</span><br><span class="line">aaa=123&amp;tys=456&amp;jjj=789</span><br></pre></td></tr></table></figure><p>另外可以使用<code>setlist(参数名，参数值列表)</code>来设定一些特定的参数值，但是一般来说，这个方法是不允许使用的，原因为<code>request.GET._mutable = False</code>，也就是说默认并不让修改。</p><p>这时候可以使用<code>copy</code>的方法复制对象，然后再修改其中的<code>_mutable = True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">query_params = copy.deepcopy(request.GET)</span><br><span class="line">query_params._mutable = <span class="literal">True</span></span><br><span class="line">query_params.setlist(<span class="string">&quot;page&quot;</span>,[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>返回的链接为：<code>aaa=123&amp;tys=456&amp;jjj=789&amp;page=1</code></p><p>因此我们可以重新编写分页的链接逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request, queryset, page_size=<span class="number">10</span>, page_param=<span class="string">&quot;page&quot;</span>, plus=<span class="number">5</span></span>):</span><br><span class="line">        …………</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># setlist 正常情况下是不能使用的，可以使用对象拷贝的方式修改属性来允许使用</span></span><br><span class="line">        self.query_params = copy.deepcopy(request.GET)</span><br><span class="line">        <span class="comment"># print(request.GET)</span></span><br><span class="line">        self.query_params._mutable = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># print(request.GET.urlencode())</span></span><br><span class="line">        …………</span><br></pre></td></tr></table></figure><p>下面是生成链接的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page):</span><br><span class="line">    self.query_params.setlist(<span class="string">&quot;page&quot;</span>, [i])</span><br><span class="line">    <span class="keyword">if</span> i == self.page:</span><br><span class="line"></span><br><span class="line">        hl = <span class="string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_params.urlencode(), i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hl = <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125; &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="built_in">format</span>(self.query_params.urlencode(), i)</span><br></pre></td></tr></table></figure><h3 id="添加账户"><a href="#添加账户" class="headerlink" title="添加账户"></a>添加账户</h3><p>由于每次我们使用的添加和编辑页面几乎都相同，因此可以创建一个模板html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-success&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-plus-sign&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> &#123;&#123; title &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    &#123;% for field in form %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; field.label &#125;&#125;:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            &#123;&#123; field &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>开放title来让设定标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = AdminModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;新建管理员&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    form = AdminModelForm(data=request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;admin_add.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;新建管理员&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>这边要注意的是密码的加密</strong>，因为密码是不能明文储存的，我们这边使用常见的MD5加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">data_string</span>):</span><br><span class="line">    md5 = hashlib.md5(settings.SECRET_KEY.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    md5.update(data_string.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><p>定义一个ModelFrom</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdminModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    confirm_password = forms.CharField(</span><br><span class="line">        max_length=<span class="number">64</span>,</span><br><span class="line">        label=<span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Admin</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对密码加密</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5(pwd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_confirm_password</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获得所有数据</span></span><br><span class="line">        confirm_data = self.cleaned_data</span><br><span class="line">        pwd = confirm_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        confirm = md5(confirm_data.get(<span class="string">&quot;confirm_password&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> pwd != confirm:</span><br><span class="line">            <span class="comment"># 如果密码不对PasswordInput会自动清空 加上render_value=True就会保留</span></span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;两次密码不一致&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此字段返回什么，数据库就会保存什么</span></span><br><span class="line">        <span class="keyword">return</span> confirm_data</span><br></pre></td></tr></table></figure><p><code>self.cleaned_data</code>可以获得当前表单的所有值，因为常规的交互逻辑是需要有一个确认密码的机制，可以添加一个新的字段，其中<code>render_value=True</code>可以让刷新页面时候密码保留而不消失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">confirm_password = forms.CharField(</span><br><span class="line">        max_length=<span class="number">64</span>,</span><br><span class="line">        label=<span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="编辑账户"><a href="#编辑账户" class="headerlink" title="编辑账户"></a>编辑账户</h3><p>推荐只能编辑账户的用户名，由于需求不一致，需要重新设定ModelForm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdminEditModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Admin</span><br><span class="line">        <span class="comment"># 只允许编辑username</span></span><br><span class="line">        fields = [<span class="string">&quot;username&quot;</span>]</span><br></pre></td></tr></table></figure><p>直接使用<code>change.html</code>作为模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_edit</span>(<span class="params">request, nid</span>):</span><br><span class="line">    data = models.Admin.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;error.html&quot;</span>, &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;要修改的数据不存在&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        data = AdminEditModelForm(instance=data)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: data, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;编辑管理员&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    form = AdminEditModelForm(data=request.POST, instance=data)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;编辑管理员&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h3><p>这是常见的功能之一，关键点在于两点：</p><ol><li>不能让用户看到之前存储的哈希值</li><li>重置的密码不能与上一次的一致</li></ol><p>要获取当前的输入值，我们可以使用<code>self.instance</code>来获取，使用<code>self.instance.pk</code>获取当前的id值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdminResetModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    confirm_password = forms.CharField(</span><br><span class="line">        max_length=<span class="number">64</span>,</span><br><span class="line">        label=<span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Admin</span><br><span class="line">        fields = [<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="comment"># 需要保证现在输入的密码与之前的不一致</span></span><br><span class="line">        md5_pwd = md5(pwd)</span><br><span class="line">        exists = models.Admin.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=self.instance.pk, password=md5_pwd).exists()</span><br><span class="line">        <span class="keyword">if</span> exists:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;新密码不能与之前的密码一致&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5_pwd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_confirm_password</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获得所有数据</span></span><br><span class="line">        confirm_data = self.cleaned_data</span><br><span class="line">        pwd = confirm_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        confirm = md5(confirm_data.get(<span class="string">&quot;confirm_password&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> pwd != confirm:</span><br><span class="line">            <span class="comment"># 如果密码不对PasswordInput会自动清空 加上render_value=True就会保留</span></span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;两次密码不一致&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此字段返回什么，数据库就会保存什么</span></span><br><span class="line">        <span class="keyword">return</span> confirm_data</span><br></pre></td></tr></table></figure><p>由于不能让用户看到之前的密码储存值，因此不给<code>AdminResetModelForm</code>传递参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_reset</span>(<span class="params">request, nid</span>):</span><br><span class="line">    data = models.Admin.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).first()</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;error.html&quot;</span>, &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;要重置的数据不存在&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># form = AdminResetModelForm(instance=data)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="comment"># 不希望管理员看到密码 所以不传递instance</span></span><br><span class="line">        form = AdminResetModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;重置密码&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    form = AdminResetModelForm(data=request.POST, instance=data)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;change.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;重置密码&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><p>首先要明白什么是cookie和session</p><p>http协议的特点为：无状态 &amp; 短连接</p><img src="https://www.z4a.net/images/2024/08/11/30.png" alt="image-20240220203838369" style="zoom: 50%;" /><p>为了让用户保持登录状态，服务器会为用户生成随机但唯一的键值对cookie，作为用户的访问凭证，但是这样可能会出现乱输入cookie伪造登录的情况，为了解决这个问题，需要在服务端将已发放的cookie存储下来，这样可以对用户发来的cookie值进行比对。</p><img src="https://www.z4a.net/images/2024/08/11/31.png" alt="image-20240220205107017" style="zoom: 50%;" /><p>在Django中使用<code>request.session</code>方法可以生成随机字符串，并将其存入<code>django.session</code>数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse,redirect</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.encrypt <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> management_sys <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(forms.Form):</span><br><span class="line">    username = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">        widget=forms.TextInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">    password = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>&#125;, render_value=<span class="literal">True</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        forms = LoginForm()</span><br><span class="line"></span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">&quot;forms&quot;</span>: forms</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, context)</span><br><span class="line"></span><br><span class="line">    form = LoginForm(request.POST)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line"></span><br><span class="line">        create = models.Admin.objects.<span class="built_in">filter</span>(**form.cleaned_data).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> create:</span><br><span class="line">            <span class="comment"># 需要添加错误信息</span></span><br><span class="line">            <span class="comment"># field - 展示错误信息的字段</span></span><br><span class="line">            <span class="comment"># error - 错误信息</span></span><br><span class="line">            form.add_error(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;forms&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户名与密码正确</span></span><br><span class="line">        <span class="comment"># 网站需要生成随机字符，写到用户浏览器的cookie中</span></span><br><span class="line">        <span class="comment"># 服务端需要记录这个随机字符，写到session中</span></span><br><span class="line">        <span class="comment"># 会自动生成cookie与字典参数</span></span><br><span class="line">        request.session[<span class="string">&quot;info&quot;</span>] = &#123;<span class="string">&quot;id&quot;</span>: create.<span class="built_in">id</span>, <span class="string">&quot;username&quot;</span>: create.username&#125;</span><br><span class="line">        <span class="comment"># return HttpResponse(&quot;登录成功&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;forms&quot;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p><code>request.session[&quot;info&quot;] = &#123;&quot;id&quot;: create.id, &quot;username&quot;: create.username&#125;</code>这段代码的意思是生成随机cookie,并将{“id”: create.id, “username”: create.username}作为数据存入</p><p>尝试登录</p><img src="https://www.z4a.net/images/2024/08/11/32.png" alt="image-20240220215917951" style="zoom: 50%;" /><p>进入数据库查看</p><img src="https://www.z4a.net/images/2024/08/11/33.png" alt="image-20240220215826727" style="zoom: 67%;" /><blockquote><p>cookie是以浏览器为单位进行生成，而不是账户</p></blockquote><p>使用chrome按照相同的账户进行登录</p><img src="https://www.z4a.net/images/2024/08/11/35.png" alt="image-20240220220456351" style="zoom:67%;" /><p>此时还将<code>BootstrapModel.py</code>修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrap</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 循环Modelform中的所有字段，在每个字段设置插件</span></span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            item.widget.attrs = &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>,</span><br><span class="line">                <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrapModelForm</span>(BootStrap, forms.ModelForm):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrapForm</span>(BootStrap, forms.Form):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><p>登录成功后：</p><ul><li>cookie，随机字符串</li><li>session，用户信息</li></ul><p>在其他需要登录才能访问的页面中，都需要加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 检查用户是否登录</span></span><br><span class="line">    info = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure><p>太麻烦，需要在18个视图函数中统一添加上述的判断</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><img src="https://www.z4a.net/images/2024/08/11/37.png" alt="image-20240221155929564" style="zoom:67%;" /><p>如何定义一个中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M1</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    中间件1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果方法中没有返回值（None），则继续往后走</span></span><br><span class="line">    <span class="comment"># 如果方法中有返回值，则不再继续往后走 直接返回</span></span><br><span class="line">    <span class="comment"># 可以返回HttpResponse，render，redirect</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M1 process_request&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M1 process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M2</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    中间件2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M2 process_request&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M2 process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p><code>process_response</code>必须返回response</p><p>在中间件的<code>process_request</code>有返回值则不再继续后续的操作，直接返回</p><p>应用中间件需要在<code>settings.py</code>中添加，添加顺序即为访问顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.csrf.CsrfViewMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;management_sys.middleware.auth.M1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;management_sys.middleware.auth.M2&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/38.png" alt="image-20240221162443368" style="zoom:67%;" /><p>登录的中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M1</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    中间件1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果方法中没有返回值（None），则继续往后走</span></span><br><span class="line">    <span class="comment"># 如果方法中有返回值，则不再继续往后走 直接返回</span></span><br><span class="line">    <span class="comment"># 可以返回HttpResponse，render，redirect</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 排除不需要登录就能访问的页面</span></span><br><span class="line">        <span class="comment"># 获取当前用户请求的url</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info <span class="keyword">in</span> [<span class="string">&quot;/login/&quot;</span>, <span class="string">&quot;/index/&quot;</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查用户是否登录</span></span><br><span class="line">        session_info = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;session_info:&quot;</span>, session_info)</span><br><span class="line">        <span class="comment"># 如果session_info有值，说明用户已经登录</span></span><br><span class="line">        <span class="keyword">if</span> session_info:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果session_info没有值，说明用户没有登录</span></span><br><span class="line">        <span class="comment"># 但是这样会出现一个问题，如果用户没有登录，那么用户就无法访问任何页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>一定要排除一些登录界面，不然会一直出现重定向</strong></p><p>登出只需要清除网页的cookie信息，<strong>数据库中的信息并没有删除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    request.session.clear()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure><p>登录成功的信息需要在<code>layoout.html</code>中使用来获取当前登录的用户名，之后就能在右上角看到用户信息</p><img src="https://www.z4a.net/images/2024/08/11/39.png" alt="image-20240221172639142" style="zoom: 50%;" /><h3 id="优化登录-图片验证码"><a href="#优化登录-图片验证码" class="headerlink" title="优化登录(图片验证码)"></a>优化登录(图片验证码)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p>生成验证码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_color</span>():</span><br><span class="line">    color_ = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="keyword">return</span> color_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_character</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_img_code</span>():</span><br><span class="line">    img_height = <span class="number">100</span></span><br><span class="line">    img_width = <span class="number">250</span></span><br><span class="line">    <span class="comment"># 创建一张图片</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (img_width, img_height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入字体</span></span><br><span class="line">    font = ImageFont.truetype(</span><br><span class="line">        <span class="string">r&#x27;D:\Python_ProjectHouse\manage_system\management_sys\static\font\Monaco.ttf&#x27;</span>,</span><br><span class="line">        <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个画笔</span></span><br><span class="line">    draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        x = random.randint(<span class="number">0</span>, img_width)</span><br><span class="line">        y = random.randint(<span class="number">0</span>, img_height)</span><br><span class="line">        draw.point((x, y), fill=random_color())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        x1 = random.randint(<span class="number">0</span>, img_width)</span><br><span class="line">        y1 = random.randint(<span class="number">0</span>, img_height)</span><br><span class="line">        x2 = random.randint(<span class="number">0</span>, img_width)</span><br><span class="line">        y2 = random.randint(<span class="number">0</span>, img_height)</span><br><span class="line">        draw.line((x1, y1, x2, y2), fill=random_color())</span><br><span class="line"></span><br><span class="line">    code_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        x = (img_width / <span class="number">4</span>) * i + <span class="number">10</span></span><br><span class="line">        y = random.randint(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line">        code = random_character()</span><br><span class="line">        code_str += code</span><br><span class="line">        draw.text((x, y), text=code, fill=random_color(), font=font)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;code_str:<span class="subst">&#123;code_str&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># img.show()</span></span><br><span class="line">    <span class="keyword">return</span> img, code_str</span><br></pre></td></tr></table></figure><p>对于图片，保存到本地之后再读取有点麻烦，直接将其写入内存即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img, code_str = create_img_code()</span><br><span class="line">stream = BytesIO()</span><br><span class="line"><span class="built_in">print</span>(stream.getvalue())</span><br></pre></td></tr></table></figure><p>我们将图片放在<code>/image/code</code>连接中，需要现在中间件中排除，不然无法访问这个链接，也无法获得图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="comment"># 排除不需要登录就能访问的页面</span></span><br><span class="line">    <span class="comment"># 获取当前用户请求的url</span></span><br><span class="line">    <span class="keyword">if</span> request.path_info <span class="keyword">in</span> [<span class="string">&quot;/login/&quot;</span>, <span class="string">&quot;/index/&quot;</span>, <span class="string">&quot;/image/code&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>完整的视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> management_sys.utils.create_captcha <span class="keyword">import</span> create_img_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_code</span>(<span class="params">request</span>):</span><br><span class="line">    img, code_str = create_img_code()</span><br><span class="line">    stream = BytesIO()</span><br><span class="line">    <span class="built_in">print</span>(code_str)</span><br><span class="line">    img.save(stream, <span class="string">&quot;png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(stream.getvalue())</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/40.png" alt="image-20240221184729205" style="zoom:67%;" /><p>按照规定修改Form</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">BootStrapForm</span>):</span><br><span class="line">    username = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">        widget=forms.TextInput()</span><br><span class="line">    )</span><br><span class="line">    password = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">        widget=forms.PasswordInput(render_value=<span class="literal">True</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    captcha = forms.CharField(</span><br><span class="line">        label=<span class="string">&quot;验证码&quot;</span>,</span><br><span class="line">        widget=forms.TextInput()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_password</span>(<span class="params">self</span>):</span><br><span class="line">        password = self.cleaned_data.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5(password)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; forms.username.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &#123;&#123; forms.username &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; forms.username.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>&#123;&#123; forms.password.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &#123;&#123; forms.password &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; forms.password.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; forms.captcha.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; forms.captcha &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/code&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 34px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; forms.captcha.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>登 录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了验证验证码我们需要做两件事</p><ol><li>存储当前的验证码 存储在session中</li><li>校验用户提交的验证码 并设定相关的状态</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">image_code</span>(<span class="params">request</span>):</span><br><span class="line">    img, code_str = create_img_code()</span><br><span class="line">    stream = BytesIO()</span><br><span class="line">    img.save(stream, <span class="string">&quot;png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将验证码写入session 以便后续校验</span></span><br><span class="line">    request.session[<span class="string">&quot;image_code&quot;</span>] = code_str</span><br><span class="line">    <span class="comment"># 不能让验证码一直有效，设置过期时间</span></span><br><span class="line">    request.session.set_expiry(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(stream.getvalue())</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> form.is_valid():</span><br><span class="line">    <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一定要用pop方法，否则会报错 因为数据库中没有captcha字段</span></span><br><span class="line">    code = form.cleaned_data.pop(<span class="string">&quot;captcha&quot;</span>)</span><br><span class="line">    image_code = request.session.get(<span class="string">&quot;image_code&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> image_code == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        form.add_error(<span class="string">&quot;captcha&quot;</span>, <span class="string">&quot;验证码已过期&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;forms&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> image_code.upper() != code.upper():</span><br><span class="line">        form.add_error(field=<span class="string">&quot;captcha&quot;</span>, error=<span class="string">&quot;验证码错误&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;forms&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    create = models.Admin.objects.<span class="built_in">filter</span>(**form.cleaned_data).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> create:</span><br><span class="line">        <span class="comment"># 需要添加错误信息</span></span><br><span class="line">        <span class="comment"># field - 展示错误信息的字段</span></span><br><span class="line">        <span class="comment"># error - 错误信息</span></span><br><span class="line">        form.add_error(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;forms&quot;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录成功删除验证码 防止被重复使用</span></span><br><span class="line">    request.session.pop(<span class="string">&quot;image_code&quot;</span>)</span><br><span class="line">    <span class="comment"># 用户名与密码正确</span></span><br><span class="line">    <span class="comment"># 网站需要生成随机字符，写到用户浏览器的cookie中</span></span><br><span class="line">    <span class="comment"># 服务端需要记录这个随机字符，写到session中</span></span><br><span class="line">    <span class="comment"># 会自动生成cookie与字典参数</span></span><br><span class="line">    request.session[<span class="string">&quot;info&quot;</span>] = &#123;<span class="string">&quot;id&quot;</span>: create.<span class="built_in">id</span>, <span class="string">&quot;username&quot;</span>: create.username&#125;</span><br><span class="line">    <span class="comment"># 因为之前将session的过期时间设置为60秒，所以这里需要重新设置</span></span><br><span class="line">    <span class="comment"># 设置session的过期时间为七天</span></span><br><span class="line">    request.session.set_expiry(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>)</span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;登录成功&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin/list&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><p>浏览器向我们的网站发送请求时：URL和表单的方式</p><ul><li>GET</li><li>POST</li></ul><p><strong>这样的方法有个特点，每次都会导致页面刷新。</strong></p><p>除此之外，也可以基于Ajax向后台发送请求（偷偷发送请求）</p><ul><li><p>依赖JQuery</p></li><li><p>编写Ajax代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;发送的地址&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">n1</span>:<span class="number">123</span>,</span><br><span class="line">            <span class="attr">n2</span>:<span class="number">456</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>前端骨架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>任务管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>示例一<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clickMe()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/task/ajax&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/task/ajax&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;成功了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/task/ajax&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.POST)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;成功了&quot;</span>)</span><br></pre></td></tr></table></figure><p>基于jquery</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>任务管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>示例一<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 页面加载完成后执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clickMe</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;/task/ajax&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="基于Ajax的返回值"><a href="#基于Ajax的返回值" class="headerlink" title="基于Ajax的返回值"></a>基于Ajax的返回值</h3><p>一般都会返回一个json格式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># print(request.GET)</span></span><br><span class="line">    <span class="comment"># print(request.POST)</span></span><br><span class="line">    data_dict = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;alex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    json_str = json.dumps(data_dict)</span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(data_dict)</span><br></pre></td></tr></table></figure><p>有两种方式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_dict = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;alex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> JsonResponse(data_dict)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_dict = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;alex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data_dict)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json_str)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/41.png" alt="image-20240222103515793" style="zoom:67%;" /><p>前端想要使用的话需要修改如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面加载完成后执行</span></span><br><span class="line">    <span class="title function_">clickMe</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/task/ajax&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 添加之后，返回的数据会自动转换为json格式</span></span><br><span class="line">            <span class="comment">// 之后就可以直接使用data.name和data.age</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">name</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">age</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>创建models</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskList</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;任务列表&quot;&quot;&quot;</span></span><br><span class="line">    level_choices = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;紧急&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;重要&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;临时&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    level = models.SmallIntegerField(verbose_name=<span class="string">&quot;级别&quot;</span>, choices=level_choices, default=<span class="number">1</span>)</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&quot;标题&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    detail = models.TextField(verbose_name=<span class="string">&quot;详情&quot;</span>)</span><br><span class="line">    user = models.ForeignKey(verbose_name=<span class="string">&quot;负责人&quot;</span>, to=Admin, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>创建form</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.TaskList</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure><p>创建视图函数，接受数据并返回信息</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task_add</span>(<span class="params">request</span>):</span><br><span class="line">    data = request.POST.<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对用户输入的数据进行校验（使用Modelform进行校验）</span></span><br><span class="line"></span><br><span class="line">    form = TaskModelForm(data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data_dict = &#123;&quot;status&quot;: 0, &quot;error&quot;: form.errors.as_json()&#125;</span></span><br><span class="line">    <span class="comment"># return JsonResponse(data_dict)</span></span><br><span class="line">    <span class="comment"># 这样可以展示中文的错误信息</span></span><br><span class="line">    data_dict = &#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: form.errors&#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data_dict, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>在前端中进行展示，这边有个注意点是button点击后会默认刷新页面，这时候有两种方法</p><ul><li>改为input标签</li><li>在js中添加<code> event.preventDefault();</code></li></ul><p>另外，为了防止标签填充出现的乱套情况，需要将<code>form-group</code>的位置设置为relative，span的位置设置为absolute</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>任务列表<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span> <span class="attr">id</span>=<span class="string">&quot;formAdd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">                &#123;% for field in form %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 20px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; field &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;position:absolute;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnAdd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js方面，为了让错误信息清楚，在每次点击之前都清除所有span的信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面加载完成后执行</span></span><br><span class="line">    <span class="title function_">btnAddEvent</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btnAddEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#btnAdd&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 每次点击按钮之前，先清空错误信息</span></span><br><span class="line">        &#123;#$(<span class="string">&quot;.error_msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;&#x27;</span>)#&#125;</span><br><span class="line">        $(<span class="string">&quot;.error_msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不加这句会自动刷新控制台导致看不到结果</span></span><br><span class="line">        event.<span class="title function_">preventDefault</span>();</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/task/add&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: $(<span class="string">&quot;#formAdd&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;添加成功&#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">error</span>)</span><br><span class="line">                    $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name, value</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(name, value)</span><br><span class="line">                        <span class="comment">// console.log($(&quot;[name=&quot; + name + &quot;]&quot;))</span></span><br><span class="line">                        <span class="comment">// 找到对应的id，然后找到下一个元素，设置文本</span></span><br><span class="line">                        $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(value[<span class="number">0</span>])</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">// alert(&#x27;添加失败&#x27;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/42.png" alt="image-20240222151600557" style="zoom: 50%;" /><img src="https://www.z4a.net/images/2024/08/11/43.png" alt="image-20240222151636201" style="zoom: 50%;" /><p>使用ajax不会自动刷新页面，所以我们需要使用js进行页面的刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;添加成功&#x27;</span>)</span><br><span class="line">    <span class="comment">// 用js进行页面刷新</span></span><br><span class="line">    location.<span class="title function_">reload</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="订单列表"><a href="#订单列表" class="headerlink" title="订单列表"></a>订单列表</h2><h3 id="添加订单"><a href="#添加订单" class="headerlink" title="添加订单"></a>添加订单</h3><p>设计表结构</p><table><thead><tr><th>id</th><th>订单号</th><th>商品名称</th><th>价格</th><th>状态</th><th>用户ID</th></tr></thead><tbody><tr><td>自动生成</td><td>当前时间+随机数字</td><td></td><td></td><td>已支付&#x2F;未支付</td><td>关联用户</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Orders</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;订单表&quot;&quot;&quot;</span></span><br><span class="line">    oid = models.CharField(verbose_name=<span class="string">&quot;订单号&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&quot;名称&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.IntegerField(verbose_name=<span class="string">&quot;价格&quot;</span>)</span><br><span class="line"></span><br><span class="line">    status_choices = &#123;</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;待支付&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;已支付&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = models.SmallIntegerField(verbose_name=<span class="string">&quot;状态&quot;</span>, choices=status_choices, default=<span class="number">1</span>)</span><br><span class="line">    admin = models.ForeignKey(verbose_name=<span class="string">&quot;管理员&quot;</span>, to=<span class="string">&quot;Admin&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>准备使用模态框来实现添加订单的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;exampleModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                                                                                                  <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>添加订单<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span> <span class="attr">id</span>=<span class="string">&quot;formAdd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">                        &#123;% for item in form %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-md-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative;margin-bottom: 30px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            &#123;&#123; item &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;position:absolute&quot;</span> <span class="attr">class</span>=<span class="string">&quot;error_msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot; col-md-12&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btnSave&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保 存&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure><p>让模态框绑定按钮有两种方法</p><ol><li>使用js</li><li>使用<code>data-target:类名 data-toggle=&quot;modal&quot;</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种：使用js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 10px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;addBtn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新建订单1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种：使用data-toggle与data-target --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新建订单2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">data-target</span>=<span class="string">&quot;#exampleModal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bindModalEvent</span>();</span><br><span class="line">    <span class="title function_">bindSaveEvent</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindModalEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#addBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要填写数据，需要先定义ModelForm，其中有两个值不允许用户自己填写</p><ol><li>oid - 由系统自动生成</li><li>admin - 自动获取</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderModelForm</span>(<span class="title class_ inherited__">BootStrapModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Orders</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        exclude = [<span class="string">&quot;oid&quot;</span>, <span class="string">&quot;admin&quot;</span>]</span><br></pre></td></tr></table></figure><p>将表单写入模态框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table-hover table-bordered table&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>OID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for item in data %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.oid &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.get_status_display &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.admin.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-edit&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 编辑</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-trash&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 删除</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">order_list</span>(<span class="params">request</span>):</span><br><span class="line">    form = OrderModelForm()</span><br><span class="line"></span><br><span class="line">    queryset = models.Orders.objects.<span class="built_in">all</span>().order_by(<span class="string">&quot;-id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pagination = Pagination(request, queryset)</span><br><span class="line">    data = pagination.get_queryset()</span><br><span class="line">    pages_html = pagination.html()</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&quot;form&quot;</span>: form,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">        <span class="string">&quot;pages_html&quot;</span>: pages_html</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;order_list.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/44.png" alt="image-20240222182943176" style="zoom:67%;" /><p>编写添加的逻辑</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order_add</span>(<span class="params">request</span>):</span><br><span class="line">    data = request.POST</span><br><span class="line">    form = OrderModelForm(data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="built_in">print</span>(form.cleaned_data)</span><br><span class="line">        <span class="comment"># 订单号：这时候是没有oid的 需要自己生成</span></span><br><span class="line">        <span class="comment"># 小写的m d是不带/的</span></span><br><span class="line">        form.instance.oid = datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>) + <span class="built_in">str</span>(random.randint(<span class="number">1000</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 固定设置管理员的ID</span></span><br><span class="line">        <span class="comment"># 设置当前登录用户的ID</span></span><br><span class="line">        form.instance.admin_id = request.session.get(<span class="string">&quot;info&quot;</span>)[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="comment"># print(&quot;验证成功&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">    <span class="comment"># print(&quot;验证失败&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: form.errors&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>form.instance.属性名</code>来直接设置其中的值</p><p>为提交按钮绑定js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindSaveEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#btnSave&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.error_msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">        event.<span class="title function_">preventDefault</span>()</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/order/add&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: $(<span class="string">&#x27;#formAdd&#x27;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">                    <span class="comment">// 清空表单 取0得到DOM对象</span></span><br><span class="line">                    $(<span class="string">&quot;#formAdd&quot;</span>)[<span class="number">0</span>].<span class="title function_">reset</span>();</span><br><span class="line">                    <span class="comment">// 关闭对话框</span></span><br><span class="line">                    $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">                    <span class="comment">// 刷新页面</span></span><br><span class="line">                    location.<span class="title function_">reload</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">error</span>)</span><br><span class="line">                    $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name, value</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(name, value)</span><br><span class="line">                        <span class="comment">// console.log($(&quot;[name=&quot; + name + &quot;]&quot;))</span></span><br><span class="line">                        <span class="comment">// 找到对应的id，然后找到下一个元素，设置文本</span></span><br><span class="line">                        $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(value[<span class="number">0</span>])</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除订单"><a href="#删除订单" class="headerlink" title="删除订单"></a>删除订单</h3><p>使用ajax来实现删除</p><p>但是这样有个问题，如何获取当前删除数据的id</p><ol><li>偷偷将id藏到一个地方</li><li>定义成全局变量</li></ol><p><strong>采用自定义属性的方式获取到当前的id</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for item in data %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">uid</span>=<span class="string">&quot;&#123;&#123; item.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.oid &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.get_status_display &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.admin.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">uid</span>=<span class="string">&quot;&#123;&#123; item.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs btnEdit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-edit&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 编辑</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">uid</span>=<span class="string">&quot;&#123;&#123; item.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-xs btnDelete&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-trash&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 删除</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在js中可以通过<code>$(this).attr(&quot;uid&quot;)</code>获取到当前的uid</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">DELETE_ID</span> = <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindDeleteEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.btnDelete&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;#wrongModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取当前点击的元素的uid</span></span><br><span class="line">        <span class="variable constant_">DELETE_ID</span> = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">        <span class="comment">// console.log(DELETE_ID)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindDeleteConfirmEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#btnDeleteConfirm&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/order/delete&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;<span class="string">&quot;uid&quot;</span>: <span class="variable constant_">DELETE_ID</span>&#125;,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 关闭对话框</span></span><br><span class="line">                    $(<span class="string">&quot;#wrongModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 删除标签 这一步是不必要的</span></span><br><span class="line">                    <span class="comment">//$(&quot;tr[uid = DELETE_ID]&quot;).remove();</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 全局变量清空</span></span><br><span class="line">                    <span class="variable constant_">DELETE_ID</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 刷新页面</span></span><br><span class="line">                    location.<span class="title function_">reload</span>();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;删除失败&quot;</span> + res.<span class="property">error</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除失败&quot;</span> + res.<span class="property">error</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">order_delete</span>(<span class="params">request</span>):</span><br><span class="line">    uid = request.GET.get(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    exists = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).exists()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: <span class="string">&quot;删除失败，数据不存在&quot;</span>&#125;)</span><br><span class="line">    models.Orders.objects.get(<span class="built_in">id</span>=uid).delete()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/46.png" alt="image-20240222204544788" style="zoom: 67%;" /><h3 id="编辑订单"><a href="#编辑订单" class="headerlink" title="编辑订单"></a>编辑订单</h3><p>编辑订单也必须从后台获得当前id的所有数据，<strong>而且由于编辑与添加功能相似，因此使用同一个前端对话框</strong>，但是需要修改相应的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindSaveEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#btnSave&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.error_msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line"></span><br><span class="line">        event.<span class="title function_">preventDefault</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">EDIT_ID</span>) &#123;</span><br><span class="line">            <span class="title function_">editDate</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">addDate</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设定一个常亮来标记当前对话框的使用状态<code>EDIT_ID</code>:</p><ul><li><p>undefined - 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/order/add&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&#x27;#formAdd&#x27;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">                <span class="comment">// 清空表单 取0得到DOM对象</span></span><br><span class="line">                $(<span class="string">&quot;#formAdd&quot;</span>)[<span class="number">0</span>].<span class="title function_">reset</span>();</span><br><span class="line">                <span class="comment">// 关闭对话框</span></span><br><span class="line">                $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">                <span class="comment">// 刷新页面</span></span><br><span class="line">                location.<span class="title function_">reload</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">error</span>)</span><br><span class="line">                $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name, value</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, value)</span><br><span class="line">                    <span class="comment">// console.log($(&quot;[name=&quot; + name + &quot;]&quot;))</span></span><br><span class="line">                    <span class="comment">// 找到对应的id，然后找到下一个元素，设置文本</span></span><br><span class="line">                    $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(value[<span class="number">0</span>])</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>uid - 编辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">editDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/order/edit&quot;</span> + <span class="string">&quot;?uid=&quot;</span> + <span class="variable constant_">EDIT_ID</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&#x27;#formAdd&#x27;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;编辑成功&quot;</span>)</span><br><span class="line">                <span class="comment">// 清空表单 取0得到DOM对象</span></span><br><span class="line">                $(<span class="string">&quot;#formAdd&quot;</span>)[<span class="number">0</span>].<span class="title function_">reset</span>();</span><br><span class="line">                <span class="comment">// 关闭对话框</span></span><br><span class="line">                $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">                <span class="comment">// 刷新页面</span></span><br><span class="line">                location.<span class="title function_">reload</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">error</span>)</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">error</span>) &#123;</span><br><span class="line">                    $.<span class="title function_">each</span>(res.<span class="property">error</span>, <span class="keyword">function</span> (<span class="params">name, value</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(name, value)</span><br><span class="line">                        <span class="comment">// console.log($(&quot;[name=&quot; + name + &quot;]&quot;))</span></span><br><span class="line">                        <span class="comment">// 找到对应的id，然后找到下一个元素，设置文本</span></span><br><span class="line">                        $(<span class="string">&quot;#id_&quot;</span> + name).<span class="title function_">next</span>().<span class="title function_">text</span>(value[<span class="number">0</span>])</span><br><span class="line">                    &#125;</span><br><span class="line">                          )</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(res.<span class="property">tips</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>为了将所有的数据展示在对话框上，我们需要将数据传到前端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">order_detail</span>(<span class="params">request</span>):</span><br><span class="line">    uid = request.GET.get(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    object_dict = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).values(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;status&quot;</span>).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> object_dict:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: <span class="string">&quot;编辑失败，数据不存在&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式一：逐一获取数据</span></span><br><span class="line">    obj = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).first()</span><br><span class="line">    data_dict = &#123;</span><br><span class="line">        <span class="string">&quot;oid&quot;</span>: obj.oid,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: obj.title,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: obj.price,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: obj.get_status_display(),</span><br><span class="line">        <span class="string">&quot;admin&quot;</span>: obj.admin.username</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># return JsonResponse(&#123;&quot;status&quot;: True, &quot;data&quot;: data_dict&#125;)</span></span><br><span class="line">    <span class="comment"># 方式二：使用value</span></span><br><span class="line">    <span class="comment"># obj = models.Orders.objects.filter(id=uid).values(&quot;title&quot;, &quot;price&quot;, &quot;status&quot;).first()</span></span><br><span class="line">    <span class="comment"># object_dict[&quot;status&quot;] = obj.get_status_display()</span></span><br><span class="line">    <span class="comment"># print(object_dict)</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;data&quot;</span>: object_dict&#125;)</span><br></pre></td></tr></table></figure><p>想要去数据库中获取数据时，这里需要区分三个不同的返回值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">row_object = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).first()</span><br><span class="line">row_object.oid</span><br><span class="line">row_object.price</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值是一个字典  &#123;&quot;id&quot;:1,&quot;uid&quot;:454545,……&#125;</span></span><br><span class="line">row_object = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).values(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;oid&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>).first()</span><br><span class="line">row_object[<span class="string">&quot;id&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [&#123;&quot;id&quot;:1,&quot;uid&quot;:454545,……&#125;,&#123;&quot;id&quot;:2,&quot;uid&quot;:454545,……&#125;]</span></span><br><span class="line">row_object = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).values(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;oid&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值是一个元组[(1,&quot;xx&quot;),(2,&quot;xxxx&quot;)]</span></span><br><span class="line">row_object = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).value_list(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;oid&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>).first()</span><br><span class="line">row_object[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>最好直接获取字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order_edit</span>(<span class="params">request</span>):</span><br><span class="line">    uid = request.GET.get(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line"></span><br><span class="line">    data = models.Orders.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;tips&quot;</span>: <span class="string">&quot;编辑失败，数据不存在&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    form = OrderModelForm(data=request.POST, instance=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;error&quot;</span>: form.errors&#125;)</span><br></pre></td></tr></table></figure><p>使用不同的返回值<code>tips</code>与<code>error</code>来分辨是哪种错误</p><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><ul><li>highchart 国外</li><li>echarts 国内百度开源</li></ul><ol><li>引入js</li><li>使用ajax传送数据</li></ol><h2 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h2><h3 id="获取文件对象"><a href="#获取文件对象" class="headerlink" title="获取文件对象"></a>获取文件对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ff&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于文件的上传，一定要加上<code>enctype=&quot;multipart/form-data&quot;</code>这个属性，如果不加，那么只能获得文件的名称，而不能获得相应的文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;upload.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(request.POST)</span><br><span class="line">    <span class="built_in">print</span>(request.FILES)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出的结果分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;&#x27;csrfmiddlewaretoken&#x27;: [&#x27;EJkSoxCazcl7eh3UVQSZMIKU5jcjJrXtcD9mTKJIuqPkpsRZNtr0zNMlo5AcKBcP&#x27;], &#x27;username&#x27;: [&#x27;BA&#x27;]&#125;&gt;</span><br><span class="line">&lt;MultiValueDict: &#123;&#x27;ff&#x27;: [&lt;InMemoryUploadedFile: b84fb4acde186f87aca35bb043b0ec9237507923.jpg (image/jpeg)&gt;]&#125;&gt;</span><br></pre></td></tr></table></figure><p>POST请求中并没有文件，文件在<code>request.FILES</code>中</p><p>获得的是一个文件对象，文件内部有许多的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">file_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;upload.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(request.POST)</span></span><br><span class="line">    <span class="comment"># print(request.FILES)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件对象</span></span><br><span class="line">    file_obj = request.FILES.get(<span class="string">&quot;ff&quot;</span>)</span><br><span class="line">    <span class="comment"># 获得文件名</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">    <span class="comment"># 获取文件大小</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.size)</span><br><span class="line">    <span class="comment"># 获取文件类型</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.content_type)</span><br><span class="line">    <span class="comment"># 获取文件内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># post请求的数据</span><br><span class="line">&lt;QueryDict: &#123;&#x27;csrfmiddlewaretoken&#x27;: [&#x27;34GFrzXsmFUL5b1vDccdGJZquoCrORzfBYv9WM40hToYgmPAvPLetO1RNa0kP1OB&#x27;], &#x27;username&#x27;: [&#x27;BA&#x27;]&#125;&gt;</span><br><span class="line"># 文件对象</span><br><span class="line">&lt;MultiValueDict: &#123;&#x27;ff&#x27;: [&lt;InMemoryUploadedFile: b84fb4acde186f87aca35bb043b0ec9237507923.jpg (image/jpeg)&gt;]&#125;&gt;</span><br><span class="line"># 文件名</span><br><span class="line">b84fb4acde186f87aca35bb043b0ec9237507923.jpg</span><br><span class="line"># 文件大小</span><br><span class="line">1079422</span><br><span class="line"># 文件类型</span><br><span class="line">image/jpeg</span><br></pre></td></tr></table></figure><h3 id="文件的校验：批量上传数据"><a href="#文件的校验：批量上传数据" class="headerlink" title="文件的校验：批量上传数据"></a>文件的校验：批量上传数据</h3><p>要进行数据的校验，需要使用Modelform和form，案例是使用excel批量上传数据</p><p>关于excel的处理问题，需要使用第三方库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&quot;文件路劲或者文件对象&quot;</span>)</span><br><span class="line"></span><br><span class="line">sheet = wb.worksheet[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>):</span><br><span class="line">    text = row[<span class="number">0</span>].value</span><br><span class="line">    exists: = models.Department.objects.<span class="built_in">filter</span>(<span class="string">&quot;title=text&quot;</span>).exists()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">        models.Department.objects.create(title=text)</span><br></pre></td></tr></table></figure><p>对应的前端页面为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;exampleModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                                                                                                  <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>上传Excel<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">novalidate</span> <span class="attr">id</span>=<span class="string">&quot;formAdd&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ff&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadExcelBtn&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">uploadBtnEvent</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">uploadExcel</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">uploadBtnEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#uploadBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">uploadExcel</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#uploadExcelBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止表单默认提交</span></span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取表单数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#formAdd&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/depart/upload&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: formData,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">// 告诉jQuery不要处理发送的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// 告诉jQuery不要设置Content-Type请求头</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#exampleModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：混合数据（form）"><a href="#案例：混合数据（form）" class="headerlink" title="案例：混合数据（form）"></a>案例：混合数据（form）</h3><p>提交页面时，用户输入数据+文件（输入不能为空，报错）</p><p>表单设计如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">uploadForm</span>(<span class="title class_ inherited__">BootStrapForm</span>):</span><br><span class="line">    name = forms.CharField(max_length=<span class="number">64</span>, label=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">    age = forms.IntegerField(label=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    img = forms.FileField(label=<span class="string">&quot;头像&quot;</span>)</span><br></pre></td></tr></table></figure><p>这边为了取消文件上传的样式修改了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrap</span>:</span><br><span class="line">    bootstrap_exclude_fields = [<span class="string">&quot;img&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 循环Modelform中的所有字段，在每个字段设置插件</span></span><br><span class="line">        <span class="keyword">for</span> name, item <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> self.bootstrap_exclude_fields:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            item.widget.attrs = &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>,</span><br><span class="line">                <span class="string">&quot;placeholder&quot;</span>: <span class="string">&quot;请输入%s&quot;</span> % (item.label,)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>数据库设计如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;老板表(处理混合数据)&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    <span class="comment"># 如何将文件内容存到数据库？</span></span><br><span class="line">    <span class="comment"># 将文件存到指定路径，然后将路径存到数据库</span></span><br><span class="line">    img = models.CharField(verbose_name=<span class="string">&quot;头像&quot;</span>, max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>这边要注意的就是为什么图像时charfield类型，因为我们一般不直接存图像数据，一般是改为存图像的路径。</p><p>对于文件路径，推荐采用os来拼接，这样能适应多样的系统环境</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_form</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = uploadForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;upload_form.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;上传文件&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 相比之前，如果有文件上传，需要传入request.FILES</span></span><br><span class="line">    form = uploadForm(data=request.POST, files=request.FILES)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># print(form.cleaned_data)</span></span><br><span class="line">        <span class="comment"># print(form.cleaned_data)</span></span><br><span class="line">        db_file_path = os.path.join(<span class="string">&quot;static/img&quot;</span>, form.cleaned_data.get(<span class="string">&quot;img&quot;</span>).name)</span><br><span class="line">        file_path = os.path.join(<span class="string">&quot;management_sys&quot;</span>, db_file_path)</span><br><span class="line">        img_data = form.cleaned_data.get(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> img_data.chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将文件路径存到数据库</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: form.cleaned_data.get(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: form.cleaned_data.get(<span class="string">&quot;age&quot;</span>),</span><br><span class="line">            <span class="string">&quot;img&quot;</span>: db_file_path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 这样的文件路径存储方式不好，用户是看不的</span></span><br><span class="line">        <span class="comment"># 因为Django是只能展示static文件夹下的文件</span></span><br><span class="line">        models.Boss.objects.create(**data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line">    <span class="comment"># 显示错位信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;upload_form.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;上传文件&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>对于路径存放问题，目前来说，Django只能读取static中的文件对象，当然它也可以读取其他的路径的文件，这在后续会说</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = os.path.join(&quot;management_sys&quot;, db_file_path)</span><br><span class="line">img_data = form.cleaned_data.get(&quot;img&quot;)</span><br></pre></td></tr></table></figure><h3 id="启用media目录"><a href="#启用media目录" class="headerlink" title="启用media目录"></a>启用media目录</h3><p>在Django的开发过程中两个特殊文件夹：</p><ul><li>static，存放静态文件的路径，包括：css，js，项目图片。</li><li>media，用户上传的数据的目录（需要启用）。</li></ul><p>在url.py中进行配置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&quot;^media/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="string">&quot;document_root&quot;</span>: settings.MEDIA_ROOT&#125;, name=<span class="string">&quot;media&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在settings.py中进行配置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;media&quot;</span>)</span><br><span class="line">MEDIA_URL = <span class="string">&quot;/media/&quot;</span></span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/48.png" alt="image-20240225115701386"  /><p>之后就可以在浏览器中访问这个文件</p><img src="https://www.z4a.net/images/2024/08/11/49.png" alt="image-20240225115736540" style="zoom:67%;" /><p><strong>这样就将上传与静态文件分开了</strong></p><p>修改之前的保存文件路径</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种方法得到的是绝对路径</span></span><br><span class="line"><span class="comment"># media_file_path = os.path.join(settings.MEDIA_ROOT, form.cleaned_data.get(&quot;img&quot;).name)</span></span><br><span class="line"><span class="comment"># 这种方法得到的是相对路径</span></span><br><span class="line">media_file_path = os.path.join(<span class="string">&quot;media&quot;</span>, form.cleaned_data.get(<span class="string">&quot;img&quot;</span>).name)</span><br><span class="line"></span><br><span class="line">img_data = form.cleaned_data.get(<span class="string">&quot;img&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(media_file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> img_data.chunks():</span><br><span class="line">        f.write(chunk)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/50.png" alt="image-20240225120713592" style="zoom:67%;" /><h3 id="Modelform案例"><a href="#Modelform案例" class="headerlink" title="Modelform案例"></a>Modelform案例</h3><p><strong>前提是配置好media目录</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;城市&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;名称&quot;</span>)</span><br><span class="line">    people = models.IntegerField(verbose_name=<span class="string">&quot;人口&quot;</span>)</span><br><span class="line">    <span class="comment"># FileField本质上也是CharField，但是它会自动帮你上传文件到指定路径且保存到数据库</span></span><br><span class="line">    img = models.FileField(max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;Logo&quot;</span>, upload_to=<span class="string">&quot;city/&quot;</span>)</span><br></pre></td></tr></table></figure><p>在视图函数中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_modelform</span>(<span class="params">request</span>):</span><br><span class="line">    title = <span class="string">&quot;modelform上传文件&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        form = UploadModelForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;upload_form.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">    form = UploadModelForm(data=request.POST, files=request.FILES)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        <span class="comment"># 不需要再手动写文件上传的代码</span></span><br><span class="line">        <span class="comment"># form.save()会自动帮你上传文件，并且将文件路径存到数据库</span></span><br><span class="line">        form.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;upload_form.html&quot;</span>, &#123;<span class="string">&quot;form&quot;</span>: form, <span class="string">&quot;title&quot;</span>: title&#125;)</span><br></pre></td></tr></table></figure><img src="https://www.z4a.net/images/2024/08/11/51.png" alt="image-20240225130914781" style="zoom:50%;" /><h3 id="上传文件小结"><a href="#上传文件小结" class="headerlink" title="上传文件小结"></a>上传文件小结</h3><ul><li><p>自己动手去写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form = request.FILES.get(<span class="string">&quot;ff&quot;</span>)</span><br><span class="line">……</span><br></pre></td></tr></table></figure></li><li><p>form组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">form = uploadForm(data=request.POST, files=request.FILES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件路径存到数据库</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: form.cleaned_data.get(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: form.cleaned_data.get(<span class="string">&quot;age&quot;</span>),</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: db_file_path</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这样的文件路径存储方式不好，用户是看不的</span></span><br><span class="line"><span class="comment"># 因为Django是只能展示static文件夹下的文件</span></span><br><span class="line">models.Boss.objects.create(**data)</span><br><span class="line"></span><br><span class="line">具体的文件操作还是得自己写（比如文件的保存）</span><br></pre></td></tr></table></figure></li><li><p>modelform组件（表单验证+自动保存数据库+自动保存文件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- media文件夹</span><br><span class="line">- model.py的类型定要</span><br><span class="line">img = models.FileField(max_length=<span class="number">128</span>, verbose_name=<span class="string">&quot;Logo&quot;</span>, upload_to=<span class="string">&quot;city/&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa-快速入门</title>
      <link href="/post/koa-kuai-su-ru-men/"/>
      <url>/post/koa-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Koa 是一个由 Express 的原始开发者创建的 Node.js 后端框架，旨在提供更小、更灵活的基础后端框架。</p><blockquote><p><a href="https://www.npmjs.com/package/koa">koa - npm (npmjs.com)</a></p></blockquote><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>安装nodemon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p>安装koa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><p>在package.json文件中使用es6规范且将调试改为使用nodemon</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kora&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>首先需要创建一个koa app 实例，使用ctx上下文对象来获取request，使用ctx.body来返回具体相应的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="string">&quot;8008&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port,hostname,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>koa app实例还可以对其他非法路由进行捕获处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">body</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ctx中具有request和response两个对象的性质，和nodejs中的使用方法相同，可以使用<code>ctx.request</code>和<code>ctx.response</code>获取特定的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试访问 http://127.0.0.1:8008/index?id=1&amp;name=koa，可以看到页面显示id: 1, name: koa。</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = ctx.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">let</span> name = ctx.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">        ctx.<span class="property">method</span> = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        ctx.<span class="property">type</span> = <span class="string">&quot;Application/json&quot;</span>;</span><br><span class="line">        ctx.<span class="property">path</span> = <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">id</span>: id,</span><br><span class="line">            <span class="attr">name</span>: name,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在网页中便可以看到显示格式为Json(JavaScript Object Notation)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;koa&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h2><p><code>app.use()</code>方法用于注册中间件，一个<code>use()</code> 就是一个中间件，可以使用<code>next()</code>进行中间件的阻断。</p><p>当程序遇到<code>next()</code>的时候，会暂停当前中间件的执行,将控制权传递给下一个中间件。控制权的来回切换符合洋葱模型，看如下的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//服务器监听的ip地址</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>; <span class="comment">//服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是洋葱模型的一个实现例子</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打印得到的结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>如果出现两次打印结果，这是因为浏览器默认会申请访问网站的ico（图标），可以在调试工具中禁用</p></blockquote><h2 id="安装与配置路由"><a href="#安装与配置路由" class="headerlink" title="安装与配置路由"></a>安装与配置路由</h2><p>安装@koa&#x2F;router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/router</span><br></pre></td></tr></table></figure><blockquote><p>koa-router 兼容 koa1 和 koa2 的历史版本<br>@koa&#x2F;router 专为 koa2 设计的新版本</p></blockquote><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kora&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@koa/router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^12.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>创建Router实例并将其运用到Koa app实例中，下面是一个简单的例子，访问默认的网址会显示Hello world</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//服务器监听的ip地址</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>; <span class="comment">//服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于带有参数的访问，可以使用query和params对象进行获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试访问 http://127.0.0.1:8008/index?id=1&amp;name=koa，可以看到页面显示id: 1, name: koa。</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试访问 http://127.0.0.1:8008/user/id/1/name/koa，可以看到页面显示id: 1, name: koa。</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/user/id/:id/name/:name&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">params</span>.<span class="property">name</span>;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br></pre></td></tr></table></figure><p>在创建路由的时候，可以使用prefix参数进行路由的分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router2 = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;<span class="attr">prefix</span>: <span class="string">&quot;/api&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/api/get，可以看到页面显示get。</span></span><br><span class="line">router2.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/api/post，可以看到页面显示post。</span></span><br><span class="line">router2.<span class="title function_">get</span>(<span class="string">&quot;/post&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router2.<span class="title function_">routers</span>())</span><br></pre></td></tr></table></figure><p>还可以使用Router对象的redirect方法进行网页重定向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/redirect，页面会自动跳转到b站首页。</span></span><br><span class="line">router.<span class="title function_">redirect</span>(<span class="string">&quot;/redirect&quot;</span>, <span class="string">&quot;https://www.bilibili.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routers</span>())</span><br></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>安装@koa&#x2F;post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/bodyparser</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kora&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@koa/bodyparser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@koa/router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^12.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>让中间件使用bodyparser，要获取请求体中的参数，使用<code>ctx.request.body.属性名</code>来获取参数数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> koaBody <span class="keyword">from</span> <span class="string">&quot;@koa/bodyparser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">koaBody</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问 http://127.0.0.1:8008/postUrl</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/postUrl&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问 http://127.0.0.1:8008/postJson</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/postJSon&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id:<span class="subst">$&#123;id&#125;</span>, name:<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404处理</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">body</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用apiPost工具进行模拟请求</p><img src="https://www.z4a.net/images/2024/08/08/imagebffa51d6a775735e.png" alt="alt text" style="zoom:67%;" /><img src="https://www.z4a.net/images/2024/08/08/image-1.png" alt="alt text" style="zoom:67%;" /><p>完整代码备份如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> koaBody <span class="keyword">from</span> <span class="string">&quot;@koa/bodyparser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//服务器监听的ip地址</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>; <span class="comment">//服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">koaBody</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问 http://127.0.0.1:8008/postUrl</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/postUrl&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问 http://127.0.0.1:8008/postJson</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/postJSon&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id:<span class="subst">$&#123;id&#125;</span>, name:<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试访问 http://127.0.0.1:8008/index?id=1&amp;name=koa，可以看到页面显示id: 1, name: koa。</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/index&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = ctx.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">let</span> name = ctx.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">        ctx.<span class="property">method</span> = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        ctx.<span class="property">type</span> = <span class="string">&quot;Application/json&quot;</span>;</span><br><span class="line">        ctx.<span class="property">path</span> = <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        <span class="comment">// ctx.body = `id: $&#123;id&#125;, name: $&#123;name&#125;`;</span></span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">id</span>: id,</span><br><span class="line">            <span class="attr">name</span>: name,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试访问 http://127.0.0.1:8008/user/id/1/name/koa，可以看到页面显示id: 1, name: koa。</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/user/id/:id/name/:name&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = ctx.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">params</span>.<span class="property">name</span>;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router2 = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123; <span class="attr">prefix</span>: <span class="string">&quot;/api&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/api/get，可以看到页面显示get。</span></span><br><span class="line">router2.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/api/post，可以看到页面显示post。</span></span><br><span class="line">router2.<span class="title function_">get</span>(<span class="string">&quot;/post&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 http://127.0.0.1:8008/redirect，页面会自动跳转到b站首页。</span></span><br><span class="line">router.<span class="title function_">redirect</span>(<span class="string">&quot;/redirect&quot;</span>, <span class="string">&quot;https://www.bilibili.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router2.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">body</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h2><p>使用<code>try catch</code>语句进行错误的捕获</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//服务器监听的ip地址</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>; <span class="comment">//服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接抛出一个错误，网页网络会直接显示500错误</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求先通过中间件，如果中间件没有捕获到错误，就会进入到路由处理函数，</span></span><br><span class="line"><span class="comment">// 如果路由处理函数抛出了错误，就会被中间件捕获到，然后返回给客户端。</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&quot;网络错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入路由处理函数</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="允许跨域请求"><a href="#允许跨域请求" class="headerlink" title="允许跨域请求"></a>允许跨域请求</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kora&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;nodemon index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@koa/bodyparser&quot;</span>: <span class="string">&quot;^5.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@koa/cors&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@koa/router&quot;</span>: <span class="string">&quot;^12.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;koa&quot;</span>: <span class="string">&quot;^2.15.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现跨域请求会出现报错：</p><blockquote><p>Access to fetch at ‘<a href="http://127.0.0.1:8008/">http://127.0.0.1:8008/</a>‘ from origin ‘null’ has been blocked by CORS policy:<br>No ‘Access-Control-Allow-Origin’ header is present on the requested resource.<br>If an opaque response serves your needs,<br>set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p></blockquote><p>什么情况下算跨域请求呢？</p><blockquote><p>在web开发中,”域” 主要指的是网络请求的来源(origin),由协议(如:http或https)、域名和端口三部分组成，任何一部分的不同都算跨域</p></blockquote><p>想要允许跨域请求，让app对象使用<code>Cors</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cors</span> <span class="keyword">from</span> <span class="string">&quot;@koa/cors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//服务器监听的ip地址</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>; <span class="comment">//服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>());</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入路由处理函数</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/multer</span><br></pre></td></tr></table></figure><p>首先创建一个磁盘存储引擎，并规定上传的路径（服务端的文件夹）和文件名规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Multer</span> <span class="keyword">from</span> <span class="string">&quot;@koa/multer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个磁盘存储引擎</span></span><br><span class="line"><span class="keyword">const</span> storage = <span class="title class_">Multer</span>.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//指定文件保存路径为upload文件夹</span></span><br><span class="line">        <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="string">&quot;./upload&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置文件名 为上传时间+文件原始后缀名</span></span><br><span class="line">        <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着定一个multer对象，可以限定文件的上传类型和文件大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 Multer 对象</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="title class_">Multer</span>(&#123;</span><br><span class="line">    storage, <span class="comment">//磁盘存储引擎</span></span><br><span class="line">    <span class="attr">limits</span>: &#123;</span><br><span class="line">        <span class="comment">//限制条件</span></span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">// 限制文件大小为2MB</span></span><br><span class="line">        <span class="comment">// 限制文件数量</span></span><br><span class="line">        <span class="comment">// files: 1,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fileFilter</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//文件过滤器</span></span><br><span class="line">        <span class="keyword">let</span> allowedTypes = [<span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;image/jpg&quot;</span>, <span class="string">&quot;image/png&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (allowedTypes.<span class="title function_">includes</span>(file.<span class="property">mimetype</span>)) &#123;</span><br><span class="line">            <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">callbackFunc</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不支持的文件类型&quot;</span>), <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建后，在对应路由中使用multer对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cors</span> <span class="keyword">from</span> <span class="string">&quot;@koa/cors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Koa</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问网址为：http://127.0.0.1:3000/upload</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, multer.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">file</span>;</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: file,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;文件上传失败&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routers</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>选择txt进行上传，打印不支持文件类型</p><img src="https://www.z4a.net/images/2024/08/08/image-2.png" alt="alt text" style="zoom:67%;" /><p>选择大于2MB文件进行上传，返回文件过大（file too large）</p><img src="https://www.z4a.net/images/2024/08/08/image-3.png" alt="alt text" style="zoom:67%;" /><p>以下为成功的例子</p><img src="https://www.z4a.net/images/2024/08/08/image-4.png" alt="alt text" style="zoom:67%;" /><p>上传的文件都会收集到服务端的<code>upload</code>文件夹中</p><p>完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cors</span> <span class="keyword">from</span> <span class="string">&quot;@koa/cors&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BodyParser</span> <span class="keyword">from</span> <span class="string">&quot;@koa/bodyparser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Multer</span> <span class="keyword">from</span> <span class="string">&quot;@koa/multer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Cors</span>());</span><br><span class="line"><span class="comment">// 解析请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">BodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个磁盘存储引擎</span></span><br><span class="line"><span class="keyword">const</span> storage = <span class="title class_">Multer</span>.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//指定文件保存路径为upload文件夹</span></span><br><span class="line">        <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="string">&quot;./upload&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置文件名 为上传时间+文件原始后缀名</span></span><br><span class="line">        <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 Multer 对象</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="title class_">Multer</span>(&#123;</span><br><span class="line">    storage, <span class="comment">//磁盘存储引擎</span></span><br><span class="line">    <span class="attr">limits</span>: &#123;</span><br><span class="line">        <span class="comment">//限制条件</span></span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">// 限制文件大小为2MB</span></span><br><span class="line">        <span class="comment">// 限制文件数量</span></span><br><span class="line">        <span class="comment">// files: 1,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fileFilter</span>: <span class="function">(<span class="params">request, file, callbackFunc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//文件过滤器</span></span><br><span class="line">        <span class="keyword">let</span> allowedTypes = [<span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;image/jpg&quot;</span>, <span class="string">&quot;image/png&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (allowedTypes.<span class="title function_">includes</span>(file.<span class="property">mimetype</span>)) &#123;</span><br><span class="line">            <span class="title function_">callbackFunc</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">callbackFunc</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不支持的文件类型&quot;</span>), <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问网址为：http://127.0.0.1:3000/upload</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, multer.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">file</span>;</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: file,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;文件上传失败&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//错误处理中间件</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">//console.log(&#x27;err:&#x27;, err)</span></span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&quot;err: &quot;</span> + err.<span class="property">message</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()); <span class="comment">//路由处理中间件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie通常用来存储用户当前的状态信息</p><p>在koa中通过<code>ctx.cookies.set()</code>来设置cookie信息，常用<code>maxAge</code>和<code>httpOnly</code>参数来分别设置cookie的保存时间和是否允许脚本获取cookie</p><p>如果设置的不是英文，而是其他字符，常见的是通过uri来进行加密和解密</p><p>后续可以通过<code>ctx.cookies.get</code>方法获取相应的cookie信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(); <span class="comment">//实例化一个 Router 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie可用于在浏览器中存储数据</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="built_in">encodeURIComponent</span>(<span class="string">&quot;百度&quot;</span>)); <span class="comment">//encodeURIComponent:uri编码</span></span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;web&quot;</span>, <span class="string">&quot;baidu.com&quot;</span>, &#123;</span><br><span class="line">        <span class="comment">//30秒 [maxAge:有效期 单位:毫秒]</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">30</span> * <span class="number">1000</span>,</span><br><span class="line">        <span class="comment">//httpOnly默认为true 可以防止跨站脚本攻击(XSS)、减少跨站请求伪造(CSRF)</span></span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">false</span>, <span class="comment">//false为允许浏览器通过js访问和修改该cookie</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值 - 在同一个请求内, 无法立即获取到刚刚设置的cookie的值</span></span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, <span class="built_in">decodeURIComponent</span>(name)); <span class="comment">//decodeURIComponent:uri解码</span></span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;欢迎访问百度&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()); </span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器已启动: http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以在调试工具中看到cookie信息</p><img src="https://www.z4a.net/images/2024/08/08/image-5.png" alt="alt text" style="zoom:67%;" /><p>如果要删除cookie，可以通过设置空白值的方法进行清除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除cookie</span></span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>,&#123;<span class="attr">maxAge</span>: <span class="number">0</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>session用于服务端存储状态信息，通过 Session ID 在 Cookie 中的存在，来识别和跟踪用户，同时在服务器端安全地存储用户的状态和数据。</p><p>和cookie不同的是，除了设置属性值和过期时间，session需要单独Session ID（存储在cookie中的唯一标识）和密钥（防止数据被篡改）</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-session</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，此方法会将Session存储到客户端的cookie中<br>编码部分采用的是base64编码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Session</span> <span class="keyword">from</span> <span class="string">&quot;koa-session&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//koa-session 默认将 session 数据存储在客户端的 cookie 中</span></span><br><span class="line">app.<span class="property">keys</span> = [<span class="string">&quot;session.koa&quot;</span>]; <span class="comment">//设置会话签名的密钥</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;koa&quot;</span>, <span class="comment">//存储在 cookie 中的键名</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">//24小时 有效期(单位:毫秒)</span></span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">//是否启用会话签名, 用于防止CSRF攻击</span></span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">//是否仅通过 https 协议发送 cookie</span></span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Session</span>(<span class="variable constant_">CONFIG</span>, app));</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    ctx.<span class="property">session</span>.<span class="property">name</span> = <span class="string">&quot;百度&quot;</span>;</span><br><span class="line">    ctx.<span class="property">session</span>.<span class="property">url</span> = <span class="string">&quot;baidu.com&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">session</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        ctx.<span class="property">session</span>.<span class="property">user</span> = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">session</span>.<span class="property">user</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    <span class="keyword">let</span> name = ctx.<span class="property">session</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;用户:&quot;</span> + ctx.<span class="property">session</span>.<span class="property">user</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()); </span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器已启动: http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在浏览器的调试工具中可以查看</p><img src="https://www.z4a.net/images/2024/08/08/image-6.png" alt="alt text" style="zoom:67%;" /><p>通过以下方法可以删除session</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">session</span> = <span class="literal">null</span> <span class="comment">//清空所有session信息</span></span><br><span class="line">    <span class="keyword">delete</span> ctx.<span class="property">session</span>.<span class="property">name</span> <span class="comment">//只删除 session 中的 name 属性</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>JWT（JSON Web Token）是一种用于安全传输信息的开放标准（RFC 7519），通常用于身份验证和信息交换。</p><p>JWT 由三部分组成：</p><ul><li>头部（Header）：通常包含令牌的类型（JWT）和所使用的签名算法（如 HMAC SHA256）。</li><li>载荷（Payload）：包含声明（claims），即要传输的数据，可以是用户信息、权限等。</li><li>签名（Signature）：通过头部和载荷生成的签名，用于验证令牌的完整性和来源。</li></ul><p>格式为：<code>header.payload.signature</code></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken</span><br></pre></td></tr></table></figure><p>需要定义一个生成token的函数，需要传入一个key作为加密的密匙。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">JWT</span> <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成token函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">generateToken</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="number">1</span>; <span class="comment">//用户唯一id</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>); <span class="comment">//当前时间戳 单位:秒</span></span><br><span class="line">    <span class="keyword">let</span> expire = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>; <span class="comment">//24小时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    <span class="keyword">let</span> payload = &#123;</span><br><span class="line">        <span class="attr">sub</span>: id, <span class="comment">//Subject 主题 (用户唯一id)</span></span><br><span class="line">        <span class="attr">iss</span>: <span class="string">&quot;baidu.com&quot;</span>, <span class="comment">//Issuer 发行者</span></span><br><span class="line">        <span class="attr">iat</span>: now, <span class="comment">//Issued At 发行时间</span></span><br><span class="line">        <span class="attr">nbf</span>: now, <span class="comment">//Not Before 生效时间</span></span><br><span class="line">        <span class="attr">exp</span>: now + expire, <span class="comment">//Expiration Time 过期时间</span></span><br><span class="line">        <span class="attr">aud</span>: [<span class="string">&quot;&quot;</span>], <span class="comment">//Audience 观众字段为空,表示没有观众限制,可以被任何接收方处理</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="comment">//自定义数据</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用负载(payload)、密钥(key)和指定的签名算法(HS256)生成token</span></span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable constant_">JWT</span>.<span class="title function_">sign</span>(payload, key, &#123; <span class="attr">algorithm</span>: <span class="string">&quot;HS256&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解密可以使用如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">parseToken</span> = (<span class="params">token, key</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> payload = <span class="variable constant_">JWT</span>.<span class="title function_">verify</span>(token, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果想要解析其中的信息，可以使用：<a href="https://jwt.io/">https://jwt.io/</a> 这个网站</p><p>其中得到的结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlzcyI6ImJhaWR1LmNvbSIsImlhdCI6MTcyMzEyOTc5NiwibmJmIjoxNzIzMTI5Nzk2LCJleHAiOjE3MjMyMTYxOTYsImF1ZCI6WyIiXSwiZGF0YSI6eyJuYW1lIjoiZ2NuYW5tdSIsImdlbmRlciI6Im1hbiJ9fQ.<span class="number">9</span>XLXbBDitorJG22p7aZ64OArcTI0EM2gJgtsHVQOEUE</span><br><span class="line">解析token: &#123;<span class="string">&quot;sub&quot;</span>:<span class="number">1</span>,<span class="string">&quot;iss&quot;</span>:<span class="string">&quot;baidu.com&quot;</span>,<span class="string">&quot;iat&quot;</span>:<span class="number">1723129796</span>,<span class="string">&quot;nbf&quot;</span>:<span class="number">1723129796</span>,<span class="string">&quot;exp&quot;</span>:<span class="number">1723216196</span>,<span class="string">&quot;aud&quot;</span>:[<span class="string">&quot;&quot;</span>],<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;gcnanmu&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;man&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&quot;koa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;@koa/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">JWT</span> <span class="keyword">from</span> <span class="string">&quot;jsonwebtoken&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">&quot;koa2&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(key);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">let</span> result =</span><br><span class="line">        <span class="string">&quot;生成token: &quot;</span> + token + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;解析token: &quot;</span> + <span class="title function_">parseToken</span>(token, key);</span><br><span class="line">    ctx.<span class="property">body</span> = result;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成token函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">generateToken</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="number">1</span>; <span class="comment">//用户唯一id</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>); <span class="comment">//当前时间戳 单位:秒</span></span><br><span class="line">    <span class="keyword">let</span> expire = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>; <span class="comment">//24小时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    <span class="keyword">let</span> payload = &#123;</span><br><span class="line">        <span class="attr">sub</span>: id, <span class="comment">//Subject 主题 (用户唯一id)</span></span><br><span class="line">        <span class="attr">iss</span>: <span class="string">&quot;baidu.com&quot;</span>, <span class="comment">//Issuer 发行者</span></span><br><span class="line">        <span class="attr">iat</span>: now, <span class="comment">//Issued At 发行时间</span></span><br><span class="line">        <span class="attr">nbf</span>: now, <span class="comment">//Not Before 生效时间</span></span><br><span class="line">        <span class="attr">exp</span>: now + expire, <span class="comment">//Expiration Time 过期时间</span></span><br><span class="line">        <span class="attr">aud</span>: [<span class="string">&quot;&quot;</span>], <span class="comment">//Audience 观众字段为空,表示没有观众限制,可以被任何接收方处理</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="comment">//自定义数据</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用负载(payload)、密钥(key)和指定的签名算法(HS256)生成token</span></span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable constant_">JWT</span>.<span class="title function_">sign</span>(payload, key, &#123; <span class="attr">algorithm</span>: <span class="string">&quot;HS256&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析token函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">parseToken</span> = (<span class="params">token, key</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> payload = <span class="variable constant_">JWT</span>.<span class="title function_">verify</span>(token, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器已启动: http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nodejs </tag>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-常见模块应用</title>
      <link href="/post/nodejs-chang-jian-mo-kuai-ying-yong/"/>
      <url>/post/nodejs-chang-jian-mo-kuai-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>nodejs是一个JavaScript的跨平台解释器，目的是run JavaScript everywhere，其中的LTS是long-term support(长期支持版本)</p><blockquote><p>Nodejs：<a href="https://nodejs.org/en">nodejs</a></p></blockquote><p>安装后可以通过以下命令进行检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>都能在控制台中打印出版本信息即安装成功。</p><h2 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h2><p>查看当前镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node get registry</span><br></pre></td></tr></table></figure><p>设置淘宝镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node config registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h2 id="常用的内置模块"><a href="#常用的内置模块" class="headerlink" title="常用的内置模块"></a>常用的内置模块</h2><table><thead><tr><th align="center">模块名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">url模块</td><td align="left">解析url请求 返回一个解析对象</td></tr><tr><td align="center">path模块</td><td align="left">用户获取文件的路径</td></tr><tr><td align="center">buffer模块</td><td align="left">处理二进制数据，可以看为一个存储二进制的固定数组</td></tr><tr><td align="center">fs模块</td><td align="left">用于操作文件（读取、写入、删除、创建）</td></tr><tr><td align="center">stream模块</td><td align="left">数据流处理，支持读取和写入流（处理大文件较为有效）</td></tr><tr><td align="center">os模块</td><td align="left">获取操作系统的信息，如类型，架构，CPU等</td></tr><tr><td align="center">http模块</td><td align="left">用于构建Web服务器，处理http请求和响应等</td></tr><tr><td align="center">crypto模块</td><td align="left">提供加密和解密的功能，支持各种hash算法，对称加密和非对称加密等</td></tr><tr><td align="center">util模块</td><td align="left">提供一些函数工具，如格式化输出</td></tr></tbody></table><p>在文件夹中的终端中输入以下指令来初始化一个nodejs项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>按照要求输入一系列的配置后会生成一个<code>package.json</code>文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcnanmu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果使用的是powerShell，会出现无法加载文件的报错，本质上是权限的原因（只有新版的nodejs会出现这个报错）</p><p>可以通过以下命令来查看当前的执行策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ExecutionPolicy</span><br></pre></td></tr></table></figure><p>可能出现下面四种情况：</p><ul><li>Restructed 禁止运行所有脚本</li><li>AllSigned 需要有效的数字签名</li><li>RemoteSigned 允许运行本地创建的脚本 网上来源需要数字签名</li><li>Unrestricted 允许所有运行</li></ul><p>更改策略为RemoteSigned即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned </span><br></pre></td></tr></table></figure><h2 id="更换标准"><a href="#更换标准" class="headerlink" title="更换标准"></a>更换标准</h2><p>假设此时我们想要使用url模块，我们可能会像下面这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"></span><br><span class="line">url.<span class="title function_">parse</span>(<span class="string">&#x27;http://www.example.com?name=Tom&amp;age=20&#x27;</span>, <span class="literal">true</span>).<span class="property">query</span>;</span><br></pre></td></tr></table></figure><p>但是一旦runcode，就会出现如下的报错：</p><blockquote><p>(node:7332) Warning: To load an ES module, set “type”: “module” in the package.json or use the .mjs extension.<br>(Use <code>node --trace-warnings ...</code> to show where the warning was created)<br>d:\Web\drNode\demo.js:1<br>import url from ‘url’;<br>^^^^^^</p><p>SyntaxError: Cannot use import statement outside a module<br>    at internalCompileFunction (node:internal&#x2F;vm:73:18)<br>    at wrapSafe (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1176:20)<br>    at Module._compile (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1218:27)<br>    at Module._extensions..js (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1308:10)<br>    at Module.load (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1117:32)<br>    at Module._load (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:958:12)<br>    at Function.executeUserEntryPoint [as runMain] (node:internal&#x2F;modules&#x2F;run_main:81:12)<br>    at node:internal&#x2F;main&#x2F;run_main_module:23:47</p><p>Node.js v18.15.0</p></blockquote><p>这是由于不同的模块标准导致的。</p><p>JavaScript有两种模块体系:<strong>CommonJS</strong>和<strong>ES模块（ECMAScript模块）</strong></p><p><strong>CommonJS</strong>是Node.js最早采用的模块系统，使用<code>require()</code>和<code>module.exports</code>来导入和导出模块。文件扩展名通常是<code>.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlParest = <span class="title function_">parse</span>(<span class="string">&#x27;http://www.example.com?name=Tom&amp;age=20&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> times = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;urlParest,times&#125;</span><br></pre></td></tr></table></figure><p><strong>ES模块</strong>是JavaScript的官方模块系统，使用<code>import</code>和<code>export</code>语法。文件扩展名通常是<code>.mjs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">&quot;url&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlParest = <span class="title function_">parse</span>(<span class="string">&#x27;http://www.example.com?name=Tom&amp;age=20&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> times = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;urlParest,times&#125;</span><br></pre></td></tr></table></figure><p>报错中给了两个解决方法：</p><ol><li><p>将文件名改为<code>.mjs</code></p></li><li><p>在<code>package.json</code>中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>考虑到与ES6的兼容性，建议使用第二种方法。</p><h2 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h2><p>可以将url生成一个URL对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://example.com:8000/hello.html?id=100&amp;status=active&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myUrl);</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">URL &#123;</span><br><span class="line">  href: <span class="string">&#x27;https://example.com:8000/hello.html?id=100&amp;status=active&#x27;</span>,</span><br><span class="line">  origin: <span class="string">&#x27;https://example.com:8000&#x27;</span>,</span><br><span class="line">  protocol: <span class="string">&#x27;https:&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  host: <span class="string">&#x27;example.com:8000&#x27;</span>,</span><br><span class="line">  hostname: <span class="string">&#x27;example.com&#x27;</span>,</span><br><span class="line">  port: <span class="string">&#x27;8000&#x27;</span>,</span><br><span class="line">  pathname: <span class="string">&#x27;/hello.html&#x27;</span>,</span><br><span class="line">  search: <span class="string">&#x27;?id=100&amp;status=active&#x27;</span>,</span><br><span class="line">  searchParams: URLSearchParams &#123; <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;active&#x27;</span> &#125;,</span><br><span class="line">  <span class="built_in">hash</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到生成了一个对象，其中的属性都可以使用<code>.</code>或者<code>[]</code>来获取。</p><p>也可以使用<code>parse</code>对url进行解析，得到的结果也是一样的（如果不使用true参数可能会显示已弃用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">&quot;url&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlParse = url.<span class="title function_">parse</span>(</span><br><span class="line">    <span class="string">&quot;https://example.com:8000/hello.html?id=100&amp;status=active&quot;</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(urlParse);</span><br></pre></td></tr></table></figure><p>如果你获取本地的文件，可能会出现<code>fileUrl</code>的形式（使用<code>file:///</code>作为前缀），这时候使用<code>url</code>模块的<code>fileURLToPath</code>即可将其解析为本地文件路径链接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>); <span class="comment">// file:///d:/Web/drNode/demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> __fileName = url.<span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__fileName); <span class="comment">// d:/Web/drNode/demo.js</span></span><br></pre></td></tr></table></figure><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><p>path模块的作用是对路径进行处理</p><p>首先要注意一下不同操作系统的路径规则是不同的，path模块也细分为两个领域：</p><ol><li>win32 windows系统 可以使用<code>path.win32</code>强制规定</li><li>posix Linux系统 可以使用<code>path.posix</code>强制规定</li></ol><blockquote><p>实际上nodejs是会自己判断操作系统的类型，不需要自己设定</p></blockquote><p>主要操作分为：</p><ul><li>获取文件名（带扩展名） <code>path.basename</code></li><li>获取所在文件夹路径 <code>path.dirname</code></li><li>获取扩展名  <code>path.extname</code></li><li>路径拼接 <code>path.join</code></li><li>路径解析 <code>path.parse</code></li><li>是否为绝对路径 <code>path.isAbsolute</code></li><li>转化为绝对路径 <code>path.basename</code></li><li>转化为相对路径 <code>path.relative(参考路径，当前路径)</code></li><li>路径合法化 <code>path.normalize</code></li></ul><p>一些操作展示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">&quot;url&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputPath = url.<span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> basename = path.<span class="title function_">basename</span>(inputPath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(basename); <span class="comment">// demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dirname = path.<span class="title function_">dirname</span>(inputPath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dirname); <span class="comment">// d:\Web\drNode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(inputPath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(extname); <span class="comment">// .js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径拼接</span></span><br><span class="line"><span class="keyword">let</span> joinPath = path.<span class="title function_">join</span>(dirname, basename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(joinPath); <span class="comment">// d:\Web\drNode\demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径解析</span></span><br><span class="line"><span class="keyword">let</span> parsePath = path.<span class="title function_">parse</span>(inputPath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    root: &#x27;d:\\&#x27;,</span></span><br><span class="line"><span class="comment">    dir: &#x27;d:\\Web\\drNode&#x27;,</span></span><br><span class="line"><span class="comment">    base: &#x27;demo.js&#x27;,</span></span><br><span class="line"><span class="comment">    ext: &#x27;.js&#x27;,</span></span><br><span class="line"><span class="comment">    name: &#x27;demo&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为绝对路径</span></span><br><span class="line"><span class="keyword">let</span> resolvePath = path.<span class="title function_">resolve</span>(inputPath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resolvePath); <span class="comment">// d:\Web\drNode\demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>); <span class="comment">// /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">isAbsolute</span>(inputPath)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径合法化</span></span><br><span class="line"><span class="keyword">let</span> normalizePath = path.<span class="title function_">normalize</span>(<span class="string">&quot;/Users/username/Documents/demo///demo.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(normalizePath); <span class="comment">// /Users/username/Documents/demo/demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径相对化</span></span><br><span class="line"><span class="keyword">let</span> relativePath = path.<span class="title function_">relative</span>(</span><br><span class="line">    <span class="string">&quot;/Users/username/Documents/demo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/Users/username/Documents/demo/demo.js&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(relativePath); <span class="comment">// demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url1 = path.<span class="property">win32</span>.<span class="title function_">parse</span>(<span class="string">&quot;C:\\Users\\username\\Documents\\demo\\demo.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    root: &#x27;C:\\&#x27;,</span></span><br><span class="line"><span class="comment">    dir: &#x27;C:\\Users\\username\\Documents\\demo&#x27;,</span></span><br><span class="line"><span class="comment">    base: &#x27;demo.js&#x27;,</span></span><br><span class="line"><span class="comment">    ext: &#x27;.js&#x27;,</span></span><br><span class="line"><span class="comment">    name: &#x27;demo&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> url2 = path.<span class="property">posix</span>.<span class="title function_">parse</span>(<span class="string">&quot;/Users/username/Documents/demo/demo.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    root: &#x27;/&#x27;,</span></span><br><span class="line"><span class="comment">    dir: &#x27;/Users/username/Documents/demo&#x27;,</span></span><br><span class="line"><span class="comment">    base: &#x27;demo.js&#x27;,</span></span><br><span class="line"><span class="comment">    ext: &#x27;.js&#x27;,</span></span><br><span class="line"><span class="comment">    name: &#x27;demo&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Buffer模块"><a href="#Buffer模块" class="headerlink" title="Buffer模块"></a>Buffer模块</h2><p>Buffer是用来处理二进制数据(0或者1)的模块，常见的操作是将字符串转化为二进制，将二进制转化为字符串（很多API返回的都是二进制数据）。</p><p>Base64编码是一种用于将二进制数据转换为文本字符串的编码方法。它的主要作用是使二进制数据能够以文本形式表示和传输，特别是在需要通过文本协议（如HTTP、SMTP等）传输二进制数据时非常有用。二进制与base64编码相互转化也是很常见的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为10字节以0填充的Buffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>)); <span class="comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"><span class="comment">// 创建一个长度为10字节以1填充的Buffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>, <span class="number">1</span>)); <span class="comment">// &lt;Buffer 01 01 01 01 01 01 01 01 01 01&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Name</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nameBuffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="title class_">Name</span>, <span class="string">&quot;utf-8&quot;</span>);  <span class="comment">// utf-8编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameBuffer); <span class="comment">// &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取二进制数据的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(nameBuffer)); <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameBuffer.<span class="property">length</span>); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="title class_">Name</span>, <span class="string">&quot;utf-8&quot;</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>)); <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 编码常用于网络传输，用来处理二进制数据</span></span><br><span class="line"><span class="comment">// 二进制转化为base64编码</span></span><br><span class="line"><span class="keyword">let</span> base64 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;hello world&quot;</span>).<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>); <span class="comment">//base64编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(base64); <span class="comment">// aGVsbG8gd29ybGQ=</span></span><br><span class="line"><span class="comment">// 将base64编码转化为二进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(base64, <span class="string">&quot;base64&quot;</span>)); <span class="comment">// &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>在nodejs中，fs的操作模块分为两种模式：同步与异步。</p><p>例如写入文件，分为<code>fs.writeFile</code>和<code>fs.writeFileSync</code>两种实现方式。两者的作用是相同的，但是<code>writeFileSync</code>是异步的实现方式，他不会因等待而阻塞，<code>writeFileSync</code>默认提供了回调函数的实现方式，其他的操作函数也同理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;demo/css&quot;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">&quot;demo/css&quot;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory created successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>JavaScript是解释性语言，他只能按从上到下的顺序一行一行执行代码，如果使用默认的回调函数是不符合日常编写程序的逻辑的</strong>，因此fs模块还提供了promise的实现方式，这可以使用同步的方式实现异步代码，这样程序的执行逻辑才更符合一般的编程习惯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createDir</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">mkdir</span>(dir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory created successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createDir</span>(<span class="string">&quot;demo/js&quot;</span>);</span><br></pre></td></tr></table></figure><p>因此更加推荐使用async的方法。</p><p>fs模块有以下的常见操作:</p><ul><li>mkdir 创建目录，如果想要创建多级目录设置<code>&#123;recursive:true&#125;</code></li><li>writeFile 覆盖写入 会覆盖之前的内容</li><li>appendFile 追加写入</li><li>readFile 读取文件，返回的是buffer对象，需要使用指定编码进行转化</li><li>access 判断文件或者目录是否存在 </li><li>stat 获取文件或者目录的详细信息，返回一个对象</li><li>rename 目录或者文件重命名</li><li>unlink 删除文件 不存在会报错</li><li>rmdir 删除文件夹 不存在则报错</li><li>readdir 获取当前文件夹下的目录或者文件</li></ul><p>一些操作的实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs, &#123; <span class="title class_">Dir</span>, <span class="title class_">Dirent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createDir</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// recursive是一个布尔值，指示是否应创建父目录。默认为false。</span></span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">mkdir</span>(dir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory created successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createDir(&quot;demo/js&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">writeFile</span> = <span class="keyword">async</span> (<span class="params">file, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">writeFile</span>(file, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// writeFile(&quot;demo/js/hello.txt&quot;, &quot;Hello, world!&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加写入文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">appendFile</span> = <span class="keyword">async</span> (<span class="params">file, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">appendFile</span>(file, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data appended successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFile(&quot;demo/js/hello.txt&quot;, &quot;\nHello, world again!&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readFile</span> = <span class="keyword">async</span> (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不指定解码，则返回原始的buffer对象。</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">readFile</span>(file, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;);</span><br><span class="line">        <span class="comment">// 或者使用toString()方法将其转化为字符串</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readFile(&quot;demo/js/hello.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    fs.promises.constants.F_OK - 检查文件或者目录是否存在</span></span><br><span class="line"><span class="comment">    fs.promises.constants.R_OK - 检查文件是否可读</span></span><br><span class="line"><span class="comment">    fs.promises.constants.W_OK - 检查文件是否可写</span></span><br><span class="line"><span class="comment">    fs.promises.constants.X_OK - 检查文件是否可执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果文件存在，则返回undefined，否则返回一个错误对象。</span></span><br><span class="line"><span class="comment">    Error: ENOENT: no such file or directory, access &#x27;demo/js&#x27; (如果文件不存在)</span></span><br><span class="line"><span class="comment">    EExist: file already exists, access &#x27;demo/js&#x27; (如果文件已存在)</span></span><br><span class="line"><span class="comment">    EACCES: permission denied, access &#x27;demo/js&#x27; (如果没有权限)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkDir</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">access</span>(dir, fs.<span class="property">promises</span>.<span class="property">constants</span>.<span class="property">F_OK</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory exists!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory does not exist!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkDir(&quot;&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件的详细信息 也可以检测文件是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getFileInfo</span> = <span class="keyword">async</span> (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> stats = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">stat</span>(file);</span><br><span class="line">        <span class="comment">// console.log(stats);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stats.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;file&#125;</span> is a file`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stats.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;file&#125;</span> is a directory`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getFileInfo(&quot;demo/js/hello.txt&quot;);</span></span><br><span class="line"><span class="comment">// getFileInfo(&quot;demo/js/hello2.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件或者目录的重命名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renameFile</span> = <span class="keyword">async</span> (<span class="params">oldPath, newPath</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">rename</span>(oldPath, newPath);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File renamed successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// renameFile(&quot;demo/js/&quot;, &quot;demo/newjs&quot;);</span></span><br><span class="line"><span class="comment">// renameFile(&quot;demo/js/hello.txt&quot;, &quot;demo/js/hello.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteFile</span> = <span class="keyword">async</span> (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">unlink</span>(file);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File deleted successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// deleteFile(&quot;demo/js/hello.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteDir</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果recursive为true，则删除目录及其所有子目录和文件。默认为false。</span></span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">rmdir</span>(dir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory deleted successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// deleteDir(&quot;demo/js&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录下的目录和文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readDir</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// const files = await fs.promises.readdir(dir);</span></span><br><span class="line">        <span class="comment">// 允许递归读取目录</span></span><br><span class="line">        <span class="keyword">const</span> files = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">readdir</span>(dir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="comment">// 读取目录下的目录和文件 通过withFileTypes选项指定 返回一个Dirent对象数组 </span></span><br><span class="line">        <span class="comment">// Dirent是一个类，用于表示文件系统目录中的条目。它包含文件或目录的名称以及其他信息。</span></span><br><span class="line">        <span class="comment">// const files = await fs.promises.readdir(dir, &#123; withFileTypes: true &#125;);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readDir(&quot;demo&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录下的目录 不能递归读取目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readDir2</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> files = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">opendir</span>(dir);</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(file.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readDir2</span>(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录下的目录和文件 递归读取目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readDir3</span> = <span class="keyword">async</span> (<span class="params">dir</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> files = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">opendir</span>(dir);</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Directory: <span class="subst">$&#123;file.name&#125;</span>`</span>);</span><br><span class="line">                <span class="title function_">readDir3</span>(<span class="string">`<span class="subst">$&#123;dir&#125;</span>/<span class="subst">$&#123;file.name&#125;</span>`</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`File: <span class="subst">$&#123;file.name&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readDir3</span>(<span class="string">&quot;demo&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="流式操作"><a href="#流式操作" class="headerlink" title="流式操作"></a>流式操作</h2><p>stream的作用是将数据按照设定好的大小一块一块的读取，而不是整个读入，这样可以节省内存，降低服务压力。</p><ul><li>对于读取流（[<code>fs.createReadStream</code>](vscode-file:&#x2F;&#x2F;vscode-app&#x2F;e:&#x2F;microsoft vs code&#x2F;resources&#x2F;app&#x2F;out&#x2F;vs&#x2F;code&#x2F;electron-sandbox&#x2F;workbench&#x2F;workbench-apc-extension.html)），默认缓冲区大小为64KB（65536字节）。</li><li>对于写入流（[<code>fs.createWriteStream</code>](vscode-file:&#x2F;&#x2F;vscode-app&#x2F;e:&#x2F;microsoft vs code&#x2F;resources&#x2F;app&#x2F;out&#x2F;vs&#x2F;code&#x2F;electron-sandbox&#x2F;workbench&#x2F;workbench-apc-extension.html)），默认缓冲区大小也是16KB（16384字节）</li></ul><p>可以通过单独设置<code>highWaterMark</code>属性来设定最大的模块大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未使用stream处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">writefile</span> = <span class="keyword">async</span> (<span class="params">path, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">writeFile</span>(path, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据写入文件成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用流式写入 默认大小为16kb 16*1024</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">writeFileStr</span> = (<span class="params">path, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(path, &#123; <span class="attr">highWaterMark</span>: <span class="number">1024</span> * <span class="number">12</span>&#125;); <span class="comment">// 设置为12kb</span></span><br><span class="line"></span><br><span class="line">    writeStream.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    writeStream.<span class="title function_">on</span>(<span class="string">&quot;finish&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;覆盖写入成功&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    writeStream.<span class="title function_">write</span>(data, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    writeStream.<span class="title function_">end</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// writeFileStr(&quot;demo/js/hello2.txt&quot;, &quot;你好&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 流式追加写入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">appendFileStr</span> = (<span class="params">path, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> appendFileStream = fs.<span class="title function_">createWriteStream</span>(path, &#123; <span class="attr">flags</span>: <span class="string">&quot;a&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    appendFileStream.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    appendFileStream.<span class="title function_">on</span>(<span class="string">&quot;finish&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加写入文件成功&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    appendFileStream.<span class="title function_">write</span>(data, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    appendFileStream.<span class="title function_">end</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFileStr(&quot;demo/js/hello2.txt&quot;, &quot;\n追加写入&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 流式读取 默认大小为64kb 64*1024</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readFileStr</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> readFileStream = fs.<span class="title function_">createReadStream</span>(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    readFileStream.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk);</span><br><span class="line">        content += chunk.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    readFileStream.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;读取文件成功&quot;);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    readFileStream.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFileStr</span>(<span class="string">&quot;demo/js/hello2.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><p>OS模块常用于获取系统信息，常见的系统信息如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="keyword">from</span> <span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内核版本：&quot;</span>, os.<span class="title function_">version</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统类型：&quot;</span>, os.<span class="title function_">type</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统架构：&quot;</span>, os.<span class="title function_">arch</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主机名：&quot;</span>, os.<span class="title function_">hostname</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统平台：&quot;</span>, os.<span class="title function_">platform</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统发行版本：&quot;</span>, os.<span class="title function_">release</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CPU核心数：&quot;</span>, os.<span class="title function_">cpus</span>().<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内存信息：&quot;</span>, os.<span class="title function_">totalmem</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空闲内存：&quot;</span>, os.<span class="title function_">freemem</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户目录：&quot;</span>, os.<span class="title function_">homedir</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户信息：&quot;</span>, os.<span class="title function_">userInfo</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;临时目录：&quot;</span>, os.<span class="title function_">tmpdir</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;系统运行时间：&quot;</span>, os.<span class="title function_">uptime</span>());</span><br><span class="line"><span class="comment">// console.log(&quot;网络接口信息：&quot;, os.networkInterfaces());</span></span><br></pre></td></tr></table></figure><h2 id="crypto模块"><a href="#crypto模块" class="headerlink" title="crypto模块"></a>crypto模块</h2><p>提供了加密和解密的功能</p><p>常见的加密算法有MD5，SHA_1，AES-GCM等，分为对称加密和非对称加密。对称与否在于解密时使用的密匙和加密是否相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> crypto <span class="keyword">from</span> <span class="string">&quot;crypto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">md5</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = crypto.<span class="title function_">createHash</span>(<span class="string">&quot;md5&quot;</span>); <span class="comment">// 创建MD5哈希对象</span></span><br><span class="line">    hash.<span class="title function_">update</span>(data); <span class="comment">// 更新哈希内容</span></span><br><span class="line">    <span class="keyword">return</span> hash.<span class="title function_">digest</span>(<span class="string">&quot;hex&quot;</span>); <span class="comment">// 计算并生成十六进制的MD5哈希值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sha1</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = crypto.<span class="title function_">createHash</span>(<span class="string">&quot;sha1&quot;</span>); <span class="comment">// 创建SHA-1哈希</span></span><br><span class="line">    hash.<span class="title function_">update</span>(data); <span class="comment">// 更新哈希内容</span></span><br><span class="line">    <span class="keyword">return</span> hash.<span class="title function_">digest</span>(<span class="string">&quot;hex&quot;</span>); <span class="comment">// 计算并生成十六进制的SHA-1哈希值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;md5:&quot;</span>, <span class="title function_">md5</span>(<span class="string">&quot;Hello, world!&quot;</span>)); <span class="comment">// 6cd3556deb0da54bca060b4c39479839</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha1:&quot;</span>, <span class="title function_">sha1</span>(<span class="string">&quot;Hello, world!&quot;</span>)); <span class="comment">// 943a702d06f34599aee1f8da8ef9f7296031d699</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机的密匙</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomBytes</span> = (<span class="params">size</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 将其转化为16进制字符串刚好是size的两倍</span></span><br><span class="line">    <span class="comment">// 如果size是奇数，那么size/2就是小数，需要向上取整，确保不会丢失数据</span></span><br><span class="line">    <span class="keyword">let</span> newSize = <span class="title class_">Math</span>.<span class="title function_">round</span>(size / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// console.log(&quot;newSize:&quot;, newSize);</span></span><br><span class="line">    <span class="keyword">let</span> buffer = crypto.<span class="title function_">randomBytes</span>(newSize);</span><br><span class="line">    <span class="keyword">let</span> hexStr = buffer.<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hexStr.<span class="title function_">slice</span>(<span class="number">0</span>, size); <span class="comment">// 截取指定长度的字符串并返回</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;随机的秘钥：&quot;</span>, <span class="title function_">randomBytes</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对称加密</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个随机的AES密钥</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateAESKey</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 秘钥的长度必须是16、24、32字节，对应AES-128、AES-192、AES-256</span></span><br><span class="line">    <span class="keyword">return</span> crypto.<span class="title function_">randomBytes</span>(<span class="number">32</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES-GCM模式加密</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">aesEncrypt</span> = (<span class="params">data, key</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// nonce（Number used ONCE）是一个只能使用一次的随机数（AES-GCM的长度应为12字节）</span></span><br><span class="line">    <span class="comment">// 用于确保每次加密的结果都是不同的，防止被破解 即使是相同的明文也会生成不同的密文</span></span><br><span class="line">    <span class="keyword">const</span> nonce = crypto.<span class="title function_">randomBytes</span>(<span class="number">12</span>); <span class="comment">// 生成一个随机的12字节的nonce</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个AES-GCM加密器</span></span><br><span class="line">    <span class="keyword">const</span> cipher = crypto.<span class="title function_">createCipheriv</span>(<span class="string">&quot;aes-256-gcm&quot;</span>, key, nonce);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用加密器对数据进行加密并将结果转化为十六进制字符串</span></span><br><span class="line">    <span class="comment">// update 用于加密数据的主体部分</span></span><br><span class="line">    <span class="keyword">let</span> encrypted = cipher.<span class="title function_">update</span>(data, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;hex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对最后一块数据进行加密</span></span><br><span class="line">    <span class="comment">// final 用于加密数据的结尾部分 确保数据被完整加密</span></span><br><span class="line">    encrypted += cipher.<span class="title function_">final</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取认证标签 用于验证数据完整性和来源的真实性，防止数据被篡改</span></span><br><span class="line">    <span class="comment">// 将其改为十六进制字符串</span></span><br><span class="line">    <span class="keyword">const</span> authTag = cipher.<span class="title function_">getAuthTag</span>().<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>); <span class="comment">// 获取认证标签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将nonce、加密后的数据和认证标签组合成一个JSON字符串</span></span><br><span class="line">    <span class="keyword">const</span> encryJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">nonce</span>: nonce.<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>),</span><br><span class="line">        <span class="attr">encrypted</span>: encrypted,</span><br><span class="line">        <span class="attr">authTag</span>: authTag,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> encryJson;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES解密</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">aesDecrypt</span> = (<span class="params">encrypted, key</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 将JSON字符串解析为JSON对象</span></span><br><span class="line">    <span class="keyword">const</span> encryJson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(encrypted);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从JSON对象中获取nonce、加密后的数据和认证标签</span></span><br><span class="line">    <span class="keyword">const</span> nonce = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(encryJson.<span class="property">nonce</span>, <span class="string">&quot;base64&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> encryptedData = encryJson.<span class="property">encrypted</span>;</span><br><span class="line">    <span class="keyword">const</span> authTag = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(encryJson.<span class="property">authTag</span>, <span class="string">&quot;hex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个AES-GCM解密器</span></span><br><span class="line">    <span class="keyword">const</span> decipher = crypto.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes-256-gcm&quot;</span>, key, nonce);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置认证标签</span></span><br><span class="line">    decipher.<span class="title function_">setAuthTag</span>(authTag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用解密器对数据进行解密并将结果转化为UTF-8字符串</span></span><br><span class="line">    <span class="keyword">let</span> decrypted = decipher.<span class="title function_">update</span>(encryptedData, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对最后一块数据进行解密</span></span><br><span class="line">    decrypted += decipher.<span class="title function_">final</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机的AES密钥</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="title function_">generateAESKey</span>();</span><br><span class="line"><span class="comment">// 对数据进行加密</span></span><br><span class="line"><span class="keyword">const</span> encrypted = <span class="title function_">aesEncrypt</span>(<span class="string">&quot;Hello, world!&quot;</span>, key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;encrypted:&quot;</span>, encrypted); <span class="comment">// &#123;&quot;nonce&quot;:&quot;aJ+l/lIYtteJBeOO&quot;,&quot;encrypted&quot;:&quot;5741338b2c5a9b98d3470ab803&quot;,&quot;authTag&quot;:&quot;51236a320d094a11fdf6e8dd57481799&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;decrypted:&quot;</span>, <span class="title function_">aesDecrypt</span>(encrypted, key)); <span class="comment">// Hello, world!</span></span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p>nodemon用来监视node.js应用程序中的任何更改并自动重启服务，其中mon是monitor（监视）的缩写。</p><p>安装nodemon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p>其中涉及到全局安装和局部安装的区别：</p><ol><li>全局安装可以在任何目录下使用</li><li>局部安装只能在当前目录下使用，均被安装到目录下的<code>node_modules</code>文件夹中</li></ol><p>在命令行中通过以下命令进行使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon filename.js</span><br></pre></td></tr></table></figure><p>如果想要在项目中配置<code>npm run dev</code>的方法运行<code>nodemon filename.js</code>，可以在package.json的<code>script</code>中添加如下的配置项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;nodemon index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>之后可以通过<code>npm run dev</code>运行设定好的<code>nodemon index.js</code>命令</p><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>http模块是一个用于创建服务器与发送请求的模块，可以通过创建server来对所有的请求作出回应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要使用https模块，因为它需要证书，会被浏览器拦截</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// res.write(&quot;Hello World&quot;);</span></span><br><span class="line">    <span class="comment">// 返回响应数据</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口，创建服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running on http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序通过http模块创建了一个server对象，这个对象会一直监听设定好的端口号，一旦有requset请求被发送到服务器，则按照写好的逻辑对请求进行回应。回应部分使用的是<code>res.end()</code>返回具体的响应体，如有必要，可以通过<code>res.writeHead()</code>设置请求头。使用<code>npm run dev</code>运行程序后，打开<code>127.0.0.1:8000</code>可以看到页面显示Hello World。</p><h2 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h2><p>在生产实际中，往往需要先根据请求所发送的信息来返回处理后的数据。</p><p>在server对象中，使用req来作为请求对象，可以获取req的属性（例如请求方式，请求体，请求头）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要使用https模块，因为它需要证书，会被浏览器拦截</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// 获取请求头</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>.<span class="property">referer</span>);</span><br><span class="line">    <span class="comment">// 有效划线的时候不能使用点语法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>[<span class="string">&quot;user-agent&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 告知请求的类型 否则不能正常显示</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置允许跨域</span></span><br><span class="line">    <span class="comment">// res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span><br><span class="line">    <span class="comment">// 返回html数据</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// res.write(&quot;Hello World&quot;);</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口，创建服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running on http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>访问<code>127.0.0.1:8000</code>后控制台得到的打印结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /</span><br><span class="line">undefined</span><br><span class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">127.0</span>.<span class="number">0.0</span> Safari/<span class="number">537.36</span> Edg/<span class="number">127.0</span>.<span class="number">0.0</span></span><br><span class="line">GET /favicon.ico</span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/</span><br><span class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">127.0</span>.<span class="number">0.0</span> Safari/<span class="number">537.36</span> Edg/<span class="number">127.0</span></span><br></pre></td></tr></table></figure><p>得到两次重复的打印结果，通过观察可以知道，这是因为每次请求的同时都会默认对网站图标进行请求。如果想要去掉这个请求可以通过<code>req.url</code>属性进行条件判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&quot;/favicon.ico&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以只得到一次的打印结果</p><h2 id="使用URL获取请求参数"><a href="#使用URL获取请求参数" class="headerlink" title="使用URL获取请求参数"></a>使用URL获取请求参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要使用https模块，因为它需要证书，会被浏览器拦截</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// http://127.0.0.1:8000/?id=1&amp;web=baidu.com</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/favicon.ico&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(`$&#123;req.method&#125; $&#123;req.url&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造完整的url</span></span><br><span class="line">    <span class="keyword">let</span> fullurl = <span class="string">`http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`fullurl:<span class="subst">$&#123;fullurl&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> urlObj = <span class="keyword">new</span> <span class="title function_">URL</span>(fullurl);</span><br><span class="line">    <span class="comment">// console.log(urlObj);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取查询参数</span></span><br><span class="line">    <span class="keyword">const</span> queryObj = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(urlObj.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取查询参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(queryObj);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;id：&quot;</span>, queryObj.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web：&quot;</span>, queryObj.<span class="title function_">get</span>(<span class="string">&quot;web&quot;</span>));</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;Application/json&quot;</span>,</span><br><span class="line">        <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">        <span class="comment">// &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回得到参数的json数据并显示在页面上</span></span><br><span class="line">    <span class="keyword">let</span> result = &#123;</span><br><span class="line">        <span class="attr">id</span>: queryObj.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">        <span class="attr">web</span>: queryObj.<span class="title function_">get</span>(<span class="string">&quot;web&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口，创建服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is running on http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<code>npm run dev</code>可以在控制台看到整个URL对象的属性信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">URL &#123;</span><br><span class="line">  href: <span class="string">&#x27;http://127.0.0.1:8000/?id=1&amp;web=baidu.com&#x27;</span>,</span><br><span class="line">  origin: <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>,</span><br><span class="line">  protocol: <span class="string">&#x27;http:&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  host: <span class="string">&#x27;127.0.0.1:8000&#x27;</span>,</span><br><span class="line">  hostname: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  port: <span class="string">&#x27;8000&#x27;</span>,</span><br><span class="line">  pathname: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  search: <span class="string">&#x27;?id=1&amp;web=baidu.com&#x27;</span>,</span><br><span class="line">  searchParams: URLSearchParams &#123; <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;web&#x27;</span> =&gt; <span class="string">&#x27;baidu.com&#x27;</span> &#125;,</span><br><span class="line">  hash: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，我们需要的是<code>searchParams</code>这个属性值</p><p>有两种处理方法：</p><ol><li>使用<code>urlObj.searchParams</code>获取</li><li>使用<code>new URLSearchParams(urlObj.search)</code>获取</li></ol><p>之后可以在网页中看到如下信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;web&quot;</span>: <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="readline模块"><a href="#readline模块" class="headerlink" title="readline模块"></a>readline模块</h2><p>是一个控制台的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 从控制台读取用户输入</span></span><br><span class="line"><span class="comment">// 控制台输入的内容是一个字符串</span></span><br><span class="line"><span class="comment">// 通过 process.stdin 流来读取用户输入</span></span><br><span class="line"><span class="comment">// 通过 process.stdout 流来输出内容</span></span><br><span class="line"><span class="comment">// 通过 createInterface 方法创建一个 readline.Interface 实例</span></span><br><span class="line"><span class="comment">// 通过 question 方法向用户提问</span></span><br><span class="line"><span class="comment">// 通过 close 方法关闭 readline.Interface 实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createInterface &#125; <span class="keyword">from</span> <span class="string">&quot;readline&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = <span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">&quot;What do you think of Node.js? &quot;</span>, <span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        answer === <span class="string">&quot;Yes&quot;</span> ||</span><br><span class="line">        answer === <span class="string">&quot;yes&quot;</span> ||</span><br><span class="line">        answer == <span class="string">&quot;y&quot;</span> ||</span><br><span class="line">        answer == <span class="string">&quot;Y&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;You are right!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;You are wrong!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Thank you for your valuable feedback: <span class="subst">$&#123;answer&#125;</span>`</span>);</span><br><span class="line">    rl.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 close 事件，当 readline.Interface 实例关闭时触发</span></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Readline interface closed!&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过上述的代码，可以看到如下的输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) <span class="built_in">PS</span> D:\Web\drNode&gt; node <span class="string">&quot;d:\Web\drNode\tempCodeRunnerFile.js&quot;</span></span><br><span class="line">What <span class="keyword">do</span> you think of Node.js? yes</span><br><span class="line">You are right!</span><br><span class="line">Thank you <span class="keyword">for</span> your valuable feedback: yes</span><br><span class="line">Readline interface closed!</span><br><span class="line">(base) <span class="built_in">PS</span> D:\Web\drNode&gt; node <span class="string">&quot;d:\Web\drNode\tempCodeRunnerFile.js&quot;</span></span><br><span class="line">What <span class="keyword">do</span> you think of Node.js? no</span><br><span class="line">You are wrong!</span><br><span class="line">Thank you <span class="keyword">for</span> your valuable feedback: no</span><br><span class="line">Readline interface closed!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-数据类型(02)</title>
      <link href="/post/js-02-shu-ju-lei-xing/"/>
      <url>/post/js-02-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JavaScript严格来说总有六中属性值：</p><ul><li><code>number</code></li><li><code>string</code></li><li><code>boolen</code></li><li><code>underfined</code></li><li><code>null</code></li><li><code>object</code>。</li></ul><p><code>object</code>又分为三类：</p><ul><li>狭义的对象</li><li>Array 数组</li><li>function 函数<br>在js中，<code>function</code>是一个数据类型，他可以被赋值给变量，这是非常特殊的一个点。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addNum</span> = (<span class="params">a,b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addNum</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>本文会先介绍<code>null</code>,<code>undefined</code>,<code>boolen</code>，其余在后续的小节介绍。</p><h2 id="Typeof"><a href="#Typeof" class="headerlink" title="Typeof"></a>Typeof</h2><p>判断数据的类型有三种方法：</p><ol><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString</code></li></ol><p>typeof会返回的值为<code>number</code>,<code>string</code>,<code>boolen</code>,<code>undefined</code>,<code>function</code></p><p>null返回的是<code>object</code>，数组返回的也是<code>object</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><h2 id="null与undefined"><a href="#null与undefined" class="headerlink" title="null与undefined"></a>null与undefined</h2><p>和常识不同，一个变量是可以被赋值为<code>undefined</code>的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>null</code>和<code>undefined</code>都可以表示没有，语法没有任何区别，在<code>==</code>中也表现为相等，在<code>if</code>中都表示<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;undefined is false&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;null is false&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// null is false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是两者转化的时候不同：</p><ul><li><code>undefined</code> 转化为 <code>NaN</code></li><li><code>null</code> 转化为0</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(num)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(num2)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>具体理解，<code>undefined</code>表示未定义，<code>null</code>表示为当前值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明了，但没有赋值</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象没有赋值的属性</span></span><br><span class="line"><span class="keyword">var</span>  o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">p</span> <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值时，默认返回 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值只有<code>true</code>和<code>false</code>两个值</p><p>在期望得到布尔值的情况下，会自动将一些值转化为布尔值</p><p>以下值都被转化为<code>false</code>:</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code>或者<code>&#39;&#39;</code></li></ul><p>其他的值都被转化为<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([]) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (&#123;&#125;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-变量与常见语法(01)</title>
      <link href="/post/js-01-bian-liang-yu-chang-jian-yu-fa/"/>
      <url>/post/js-01-bian-liang-yu-chang-jian-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本博客实际上更应该算是笔记，实际的内容都来自阮一峰的JavaScript教程，笔记几乎就是教程的简洁版本。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的本质是值的引用，当我们调用变量的时候，其实就是调用变量对应的值。</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这样会导致所有申明变量的语句都会提升到代码的头部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量提升机制，相当于如下代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印undefined</span></span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>用来识别各种值的合法名称，如变量名和函数名。JavaScript对大小写铭感，因此<code>a</code>和<code>A</code>是两个不同的标识符。</p><p>标识符不合法的情况：</p><ol><li>以数字或者其他字符开头</li><li>含有除了字母、下划线、$和数字以外的其他字符</li><li>使用关键字作为标识符<blockquote><p>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p></blockquote></li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>会被JavaScript解释器忽视的部分，作用是对代码进行说明</p><ul><li>单行注释： <code>//</code></li><li>多行注释： <code>/* */</code></li></ul><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>JavaScript使用大括号将语句组合在一起，成为区块。但<code>var</code>没有区块的限制，这估计是引入<code>let</code>和<code>const</code>的原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>（1）<code>if else</code> 语句<br>   <code>else</code>代码块总是与离自己最近的那个if语句配对。只要每次都写<code>&#123;&#125;</code>就不会出现问题。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fruit === <span class="string">&quot;apple&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fruit === <span class="string">&quot;banana&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fruit === <span class="string">&quot;cherry&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cherry&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）<code>switch</code>语句<br>   本质是为了不要写太多的<code>if else</code></p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (fruit)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;cherry&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cherry&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   在<code>case</code>中使用的是<code>===</code>运算符，这说明永远不会发生类型转化。<br>   且如果在<code>case</code>之后不添加<code>break</code>，他将一直执行下去。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x 等于1&#x27;</span>);</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x 等于2&#x27;</span>);</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x 等于其他值&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x 等于1</span></span><br><span class="line"><span class="comment">// x 等于2</span></span><br><span class="line"><span class="comment">// x 等于其他值</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>基本的语法<code>(条件) ? 表达式1 : 表达式2</code></p><p>正确执行表达式1，错误执行表达式2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = (num == str) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以视为if …… else语句的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == str) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>搞懂赋值<code>=</code>与比较<code>==</code>或<code>===</code>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == str) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num == str&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num != str&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>语法为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件的括号是必须的，如果条件是恒成立的，即构成一个死循环。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>基础语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 条件; 递增表达式) &#123;</span><br><span class="line">  语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化表达式:设置循环的初始值 </li><li>条件 每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。</li><li>递增表达式：每轮循环的最后一个操作，通常用来递增循环变量。</li></ul><p>所有for循环都可以改成while循环。</p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><p>和while循环的唯一区别就是会提前执行一次代码再判断</p><p>基于语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">label</span>:</span><br><span class="line">    语句;</span><br></pre></td></tr></table></figure><p>也可以用于跳出代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">foo</span>: &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">break</span> foo;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;本行不会输出&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-pathlib路径实践</title>
      <link href="/post/pathlib/"/>
      <url>/post/pathlib/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是pathlib？"><a href="#什么是pathlib？" class="headerlink" title="什么是pathlib？"></a>什么是pathlib？</h2><p><code>pathlib</code>是从Python3.4版本开始引入的一个路径操作的基本库，为了更加方便使用者创建和操作文件路径。</p><p>在<code>pathlib</code>没出来之前，我们都需要使用<code>str</code>或者<code>os.path</code>获取路径，但是有了<code>pathlib</code>之后，我们会获得一个名为<code>Path</code>的类对象，拥有许多可以对路径操作的方法，比起之前使用os模块更加方便。</p><p>使用前需要先导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br></pre></td></tr></table></figure><h2 id="转化为Path对象"><a href="#转化为Path对象" class="headerlink" title="转化为Path对象"></a>转化为Path对象</h2><p>假如你有一个字符串路径，你想要将它转化为Path对象，只需要将其放入Path中，他会根据操作系统的类型自动将其转化为合法的路径（即使你的路径不规范）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&quot;D:///Python_ProjectHouse\\\Hardcore_Python\\\print_format.py&quot;</span></span><br><span class="line"></span><br><span class="line">path = Path(path)</span><br><span class="line">path <span class="comment"># WindowsPath(&#x27;D:/Python_ProjectHouse/Hardcore_Python/print_format.py&#x27;)</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，放入了一个奇怪的路径格式，Path模块直接就将其转化为了<code>WindowsPath</code>对象，且路径问题也被修复了</p><h2 id="路径获取"><a href="#路径获取" class="headerlink" title="路径获取"></a>路径获取</h2><p>最常用的就是获取当前文件、文件夹的路径</p><p>Path内实现了<code>__str__</code>的方法，因此可以很容易转化为字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前工作目录的绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(Path.cwd()) <span class="comment"># d:\Code\Python</span></span><br><span class="line"><span class="comment"># 获得当前电脑的用户路径 </span></span><br><span class="line"><span class="built_in">print</span>(Path.home()) <span class="comment"># C:\Users\zhang</span></span><br><span class="line"><span class="comment"># 获取当前文件的路径</span></span><br><span class="line"><span class="built_in">print</span>(Path(__file__)) <span class="comment"># d:\Code\Python\pathlib_demo.py</span></span><br></pre></td></tr></table></figure><p>如果你输入的是一个相对路径，那么会返回一个绝对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得绝对路径</span></span><br><span class="line">path = Path(<span class="string">&quot;pathlib_demo.py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(path.resolve()) <span class="comment"># d:\Code\Python\pathlib_demo.py</span></span><br><span class="line"><span class="built_in">print</span>(path.absolute()) <span class="comment"># d:\Code\Python\pathlib_demo.py</span></span><br></pre></td></tr></table></figure><p>如果输入一个绝对路径，也可以使用下面的方法获得相对路径</p><p>children.relative_to(father)方法是指children相对于father的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = Path(<span class="string">&quot;pathlib_demo.py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(path.absolute().relative_to(Path.cwd())) <span class="comment"># pathlib_demo.py</span></span><br></pre></td></tr></table></figure><h2 id="父与子路径"><a href="#父与子路径" class="headerlink" title="父与子路径"></a>父与子路径</h2><p>有了路径之后我们为了实现路径的拼接，有时候需要获取上一级目录的路径,Path对象也是可以做到的。</p><p>找到父路径使用的是<code>parent</code>或者<code>parents</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">path = path.absolute()</span><br><span class="line"><span class="comment"># 获得上一级的路径</span></span><br><span class="line"><span class="built_in">print</span>(path.parent) <span class="comment"># d:\Code\Python</span></span><br><span class="line"><span class="comment"># 可以打印出所有的父路径 最上能到盘符 </span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> path.parents]) <span class="comment"># [WindowsPath(&#x27;d:/Code&#x27;), WindowsPath(&#x27;d:/&#x27;)]</span></span><br><span class="line"><span class="comment"># 获取路径组成</span></span><br><span class="line"><span class="built_in">print</span>(path.parts) <span class="comment"># (&#x27;d:\\&#x27;, &#x27;Code&#x27;, &#x27;Python&#x27;, &#x27;pathlib_demo.py&#x27;)</span></span><br><span class="line"><span class="comment"># 获取路径的根目录</span></span><br><span class="line"><span class="built_in">print</span>(path.drive) <span class="comment"># d:</span></span><br><span class="line"><span class="comment"># 获取路径的根目录</span></span><br><span class="line"><span class="built_in">print</span>(path.root) <span class="comment"># \</span></span><br><span class="line"><span class="comment"># 获取路径的名称</span></span><br><span class="line"><span class="built_in">print</span>(path.anchor) <span class="comment"># d:\</span></span><br></pre></td></tr></table></figure><p>找到当前目录下的所有文件路径，可以使用<code>iterdir()</code>，但是他不会递归查找子文件下的文件。</p><p>如果想要筛选文件的类型，使用<code>gloab()</code>和<code>rglob()</code>（会递归寻找子文件下的文件）是更好的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有子路径 不会递归搜索子文件夹</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> path.iterdir()])</span><br><span class="line"><span class="comment"># Path.glob() - 扫描子路径 不会递归搜索子文件夹</span></span><br><span class="line"><span class="comment"># Path.rglob() - 递归扫描子路径 会递归搜索子文件夹 可以指定文件类型</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> path.glob(<span class="string">&quot;*.py&quot;</span>)],<span class="built_in">len</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> path.glob(<span class="string">&quot;*.py&quot;</span>)]))</span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> path.rglob(<span class="string">&quot;*&quot;</span>)])</span><br></pre></td></tr></table></figure><h2 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h2><p>Path对象相比<code>os.path.join()</code>方法拼接路径要方便得多，直接在字符串和Path对象之间使用<code>/</code>即可拼接。</p><p>如果想要更加的直观，可以使用<code>Path.joinpath()</code>的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">path = Path.cwd() <span class="comment">#  d:\Code\Python</span></span><br><span class="line"><span class="built_in">print</span>(path / <span class="string">&quot;test&quot;</span> / <span class="string">&quot;test1&quot;</span>) <span class="comment"># d:\Code\Python\test\test1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(path.joinpath(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test1&quot;</span>)) <span class="comment"># d:\Code\Python\test\test1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(path.joinpath(<span class="string">&quot;test/test1&quot;</span>)) <span class="comment"># d:\Code\Python\test\test1</span></span><br></pre></td></tr></table></figure><h2 id="路径合法检查"><a href="#路径合法检查" class="headerlink" title="路径合法检查"></a>路径合法检查</h2><p>获得了一个路径，Path会自动合法化路径，但是不会检查路径是否存在，这时候需要自行判断是否为存在。</p><p>使用判断方法后会根据情况返回一个bool值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断路径是否存在</span></span><br><span class="line"><span class="built_in">print</span>(path.exists()) <span class="comment"># true</span></span><br><span class="line"><span class="comment"># 判断是否是文件</span></span><br><span class="line"><span class="built_in">print</span>(path.is_file()) <span class="comment"># true</span></span><br><span class="line"><span class="comment"># 判断是否是目录</span></span><br><span class="line"><span class="built_in">print</span>(path.is_dir()) <span class="comment"># false</span></span><br><span class="line"><span class="comment"># 判断是否是绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(path.is_absolute()) <span class="comment"># false</span></span><br><span class="line"><span class="comment"># 判断是否是软链接</span></span><br><span class="line"><span class="built_in">print</span>(path.is_symlink()) <span class="comment"># false</span></span><br></pre></td></tr></table></figure><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>如果当前路径为文件路径且存在的话，Path还提供了一些方法来获得文件的基本属性</p><p>文件的具体信息使用的是<code>stat()</code>方法，他会返回文件的所有属性信息，常用的有：</p><ul><li>st_size 文件大小 单位是byte</li><li>st_ctime 在 Windows 系统中，这是文件创建的时间。单位是秒</li><li>st_mtime 文件最后修改的时间，单位是秒</li><li>st_atime 文件最后访问的时间，单位是秒</li></ul><p>获得时间大小都是从 1970 年 1 月 1 日 00:00:00 UTC 开始计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得文件名</span></span><br><span class="line"><span class="built_in">print</span>(path.name)</span><br><span class="line"><span class="comment"># 获得文件后缀</span></span><br><span class="line"><span class="built_in">print</span>(path.suffix)</span><br><span class="line"><span class="comment"># 获得文件名不带后缀</span></span><br><span class="line"><span class="built_in">print</span>(path.stem)</span><br><span class="line"><span class="comment"># 获得文件具体信息</span></span><br><span class="line"><span class="built_in">print</span>(path.stat())</span><br><span class="line"><span class="comment"># 获取文件大小 单位byte</span></span><br><span class="line"><span class="built_in">print</span>(path.stat().st_size)</span><br><span class="line"><span class="comment"># 获取文件创建时间 时间戳</span></span><br><span class="line"><span class="built_in">print</span>(path.stat().st_ctime)</span><br><span class="line"><span class="comment"># 获取文件修改时间 时间戳</span></span><br><span class="line"><span class="built_in">print</span>(path.stat().st_mtime)</span><br><span class="line"><span class="comment"># 获取文件访问时间 时间戳</span></span><br><span class="line"><span class="built_in">print</span>(path.stat().st_atime)</span><br></pre></td></tr></table></figure><p>要注意的是<code>stat()</code>中返回的时间是时间戳的形式，如果要格式化，可以使用<code>datetime</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转化为规则时间</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="built_in">print</span>(datetime.fromtimestamp(path.stat().st_ctime)) <span class="comment"># 2024-04-10 18:13:35.900849</span></span><br></pre></td></tr></table></figure><p>还有些不常用的操作，比如修改文件名和文件后缀（只是修改了Path的值，真实的文件名和后缀没有被修改，要真正修改需要使用<code>path.rename()</code>方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改文件后缀</span></span><br><span class="line"><span class="built_in">print</span>(path.with_suffix(<span class="string">&quot;.txt&quot;</span>)) <span class="comment"># d:\Code\Python\pathlib_demo.txt</span></span><br><span class="line"><span class="comment"># 修改文件名</span></span><br><span class="line"><span class="built_in">print</span>(path.with_name(<span class="string">&quot;new_name.py&quot;</span>)) <span class="comment"># d:\Code\Python\new_name.py</span></span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>Path不仅支持对现有路径的操作，支持使用<code>touch()</code>创建一个文件或使用<code>mkdir()</code>创建一个目录</p><p>删除目录之前，最好要使用<code>path.exists()</code>来判断一下当前文件&#x2F;文件夹是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">path = Path(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">path.touch()</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">path.unlink()</span><br><span class="line"></span><br><span class="line">path = Path(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment"># 创建目录 目录不能存在 存在会报错</span></span><br><span class="line">path.mkdir()</span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">path.rmdir()</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">path = Path(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">path.rename(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line"><span class="comment"># 转移</span></span><br><span class="line">path = Path(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line">path.replace(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="打开和写入文件"><a href="#打开和写入文件" class="headerlink" title="打开和写入文件"></a>打开和写入文件</h2><p>Path还支持打开文件,而且还支持<code>with</code>这种上下文打开的方式。</p><p>常见的打开模式都是支持的</p><ul><li>w 写入 会覆盖之前的记录</li><li>a 追加 在原记录之下追加信息</li><li>r 读取 只读取文件</li></ul><p>写入和读取都支持<code>write_text()</code>和<code>write_bytes()</code>这两种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">path = Path(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path.write_text() - 写入文件 会覆盖原文件</span></span><br><span class="line">path.write_text(<span class="string">&quot;test text&quot;</span>)</span><br><span class="line"><span class="comment"># Path.read_text() - 读取文件 文本</span></span><br><span class="line"><span class="built_in">print</span>(path.read_text()) <span class="comment"># test text</span></span><br><span class="line"><span class="comment"># Path.write_bytes() - 写入文件 会覆盖原文件</span></span><br><span class="line">path.write_bytes(<span class="string">b&quot;test bytes&quot;</span>) </span><br><span class="line"><span class="comment"># Path.read_bytes() - 读取文件 二进制</span></span><br><span class="line"><span class="built_in">print</span>(path.read_bytes()) <span class="comment"># b&quot;test bytes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path.open() - 打开文件</span></span><br><span class="line"><span class="keyword">with</span> path.<span class="built_in">open</span>(<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> path.<span class="built_in">open</span>(<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read()) <span class="comment"># hello world</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 路径操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Typing类型注释实践</title>
      <link href="/post/typing/"/>
      <url>/post/typing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Python是一门动态类型的语言，它不需要你指定变量的类型，可以实现自动的类型判断，这方便了学习者和代码编写者，但是当项目越来越庞大的时候，很容易就会忘记之前编写的变量是什么类型，这可能会导致严重的错误。</p><p>另外，我们在日常的编程中其实也经常遇到，变量嵌套使用多了之后发现IDE已经无法给出方法补全提示，这是因为Python解释器已经无法得知变量的初始类型，默认将类型定义为<code>Any</code>。加上类型注释后，就能正确得到相应的方法补全提示。</p><h2 id="什么是typing？"><a href="#什么是typing？" class="headerlink" title="什么是typing？"></a>什么是typing？</h2><p>简单来说就是Python官方用来加强静态类型检查的一个库，有很多好处，本身更多是为了在大型项目规范数据的类型，以方便开发。</p><ul><li>可以运行前提前发现编写代码时出现的错误，通过<code>Pylance</code>和<code>Mypy</code>等静态检查器可以检查出错误</li><li>可以限制用户的输入,悬停可以得到函数的文档提示</li><li>写代码时可以有提示补全（如果不写变量的类型，默认为<code>Any</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="typing-和typing-extensions"><a href="#typing-和typing-extensions" class="headerlink" title="typing 和typing_extensions"></a>typing 和typing_extensions</h2><p><code>typing</code>是<code>Python3.5</code>引入的默认库，可以直接导入。为了让其他版本也能使用typing，官方创建了一个第三方库<code>typing_extension</code>来向下兼容</p><p>可以使用一下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install typing_extensions -U</span><br></pre></td></tr></table></figure><h2 id="VsCode设置类型检查"><a href="#VsCode设置类型检查" class="headerlink" title="VsCode设置类型检查"></a>VsCode设置类型检查</h2><p>在Pylance扩展中将 <code>Type Checking Mode</code> 从 off –&gt; basic</p><p>在Python扩展中将<code>Language Serve</code>改为Pylance</p><blockquote><p>PyCharm不需要自己设置</p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>类型注解写在变量或者函数的后面，变量需要加上<code>:</code>，函数返回值需要加上<code>-&gt;</code></p><p>基础的类型分为</p><ul><li>int</li><li>float</li><li>bool</li><li>str</li><li>bytes</li><li>Any</li><li>Tuple</li><li>List,</li><li>Dict</li></ul><p>在Python3.9之前，只能通过导入<code>List[int]</code>和<code>Dict[int]</code>来定义list和dict类型，Python3.9之后可以直接使用<code>list[int]</code>和<code>dict[str,int]</code>来做定义类型(前面是键，后面是值)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line">my_dict: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = &#123;<span class="string">&quot;壹&quot;</span>: <span class="number">1</span>, <span class="string">&quot;贰&quot;</span>: <span class="number">2</span>, <span class="string">&quot;叁&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br></pre></td></tr></table></figure><h2 id="使用类作为注解"><a href="#使用类作为注解" class="headerlink" title="使用类作为注解"></a>使用类作为注解</h2><p>如果类都是在一个完整的Python文件中定义，那么直接使用类名即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王老师&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_teacher_name</span>(<span class="params">self, student</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> student.get_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_teacher_name</span>(<span class="params">self, teacher: Teacher</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> teacher.get_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">t = Teacher()</span><br><span class="line"><span class="built_in">print</span>(s.get_name()) <span class="comment"># 张三</span></span><br><span class="line"><span class="built_in">print</span>(s.get_teacher_name(t)) <span class="comment"># 王老师</span></span><br></pre></td></tr></table></figure><p>如果<code>Teacher</code>在另一个Python文件中，那么我们就需要使用其他的方法。</p><p>如下需要给<code>get_student_name</code>写上类型提示，如果直接导入<code>Student</code>会出现<code>most likely due to a circular import</code>的报错，这时候需要使用<code>TYPE_CHECKING</code>来虚假导入，这样可以在不导入的情况下获得类型的提示。</p><p>因为是虚假导入，修改后报错为<code>NameError: name &#39;Student&#39; is not defined</code>，这时候可以给<code>Student</code>加上’’来消除报错。</p><p>最一劳永逸的方法是在开头（一定要在开头）导入<code>from __future__ import annotations</code>，这样就不需要写’’也不会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TYPE_CHECKING</span><br><span class="line"></span><br><span class="line"><span class="comment"># TYPE_CHECKING默认为False</span></span><br><span class="line"><span class="keyword">if</span> TYPE_CHECKING:</span><br><span class="line">    <span class="comment"># 虚假导入</span></span><br><span class="line">    <span class="keyword">from</span> student <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王老师&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_student_name</span>(<span class="params">self, student:Student</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> student.get_name()</span><br></pre></td></tr></table></figure><h2 id="final和Final"><a href="#final和Final" class="headerlink" title="final和Final"></a>final和Final</h2><p><code>Final</code>是一个类型，表示值不可被修改（实际上也只是一个警告，修改还是能成功的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A: Final[<span class="built_in">int</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">A = <span class="number">11</span> <span class="comment"># 出现警告</span></span><br></pre></td></tr></table></figure><p><code>final</code>是一个装饰器，用实现类中不可重写的方法，一旦被重写就会出现警告。（这个警告需要将<code>Pylance</code>的检查等级上升到standard）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"><span class="meta">    @final</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>: <span class="comment"># 警告</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_teacher_name</span>(<span class="params">self, teacher: Teacher</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> teacher.get_name()</span><br></pre></td></tr></table></figure><h2 id="cast强制类型转化"><a href="#cast强制类型转化" class="headerlink" title="cast强制类型转化"></a>cast强制类型转化</h2><p>实际上是欺骗类型检查器的。</p><p>需要先从<code>typing</code>中导入<code>cast</code>。</p><p><code>cast</code>有两个参数</p><ol><li>第一个 - 类型检查器希望得到的类型</li><li>第二个 - 实际返回的类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> cast</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># return None</span></span><br><span class="line">        <span class="keyword">return</span> cast(<span class="built_in">str</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_teacher_name</span>(<span class="params">self, teacher: Teacher</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> teacher.get_name()</span><br></pre></td></tr></table></figure><h2 id="类型注解选项"><a href="#类型注解选项" class="headerlink" title="类型注解选项"></a>类型注解选项</h2><p>常用在输入的值可以是多个类型的时候</p><ul><li><code>Union[T1,T2]</code> 表示既可以是T1类型，也可以是T2类型</li><li><code>Optional[T]</code> 表示既可以是T类型，也可以是None类型(只能写一个参数类型)</li></ul><p>如果是在Python3.10的版本，还可以使用<code>T1|T2</code>来表示可以是T1也可以是T2类型</p><blockquote><p>实际上Optional[T]等价于Union[T, None]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Final, final, cast, <span class="type">Union</span>,<span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 三种写法等价</span></span><br><span class="line">        <span class="comment"># self._teacher: Optional[Teacher] = None</span></span><br><span class="line">        <span class="comment"># self._teacher: Union[Teacher,None] = None</span></span><br><span class="line">        self._teacher: Teacher|<span class="literal">None</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="特殊的类型"><a href="#特殊的类型" class="headerlink" title="特殊的类型"></a>特殊的类型</h2><ul><li><code>Self</code> - 返回类本身 多用于链式编程</li><li><code>ClassVar</code> - 提示class属性值被实例化对象修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Self, ClassVar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._num: <span class="built_in">int</span> = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_one</span>(<span class="params">self</span>) -&gt; Self:</span><br><span class="line">        self._num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply_two</span>(<span class="params">self</span>) -&gt; Self:</span><br><span class="line">        self._num *= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self._num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n: Number = Number(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n.add_one().multiply_two().add_one()) <span class="comment"># 23</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ClassVar后，类的属性值就只能被类自身修改，而不能被实例化修改（实际上还是可以成功修改，只是会有警告）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ClassVar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    name: ClassVar[<span class="built_in">str</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p: Person = Person()</span><br><span class="line">    <span class="built_in">print</span>(p.name)  <span class="comment"># 张三</span></span><br><span class="line">    p.name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(p.name)  <span class="comment"># 李四</span></span><br><span class="line">    <span class="built_in">print</span>(Person.name)  <span class="comment"># 张三</span></span><br></pre></td></tr></table></figure><h2 id="Literal字符串补全"><a href="#Literal字符串补全" class="headerlink" title="Literal字符串补全"></a>Literal字符串补全</h2><p>相比之前的类型定义只能进行检查，<code>Literal</code>可以在我们输入的时候直接给出<strong>预设的类型补全</strong>（只能是预设的类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span>,<span class="type">Any</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">data_type:<span class="type">Literal</span>[<span class="string">&quot;json&quot;</span>,<span class="string">&quot;csv&quot;</span>]</span>)-&gt;<span class="type">Any</span>:</span><br><span class="line">    <span class="keyword">if</span> data_type == <span class="string">&quot;json&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;data&quot;</span>:<span class="string">&quot;json data&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">elif</span> data_type == <span class="string">&quot;csv&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;data&quot;</span>:<span class="string">&quot;csv data&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid data type&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_data(<span class="string">&quot;json&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li><code>TypeVar</code> 确保前后的类型一致性</li><li><code>Generic</code> 实例化的时候才指定对应的类型</li></ul><p><code>TyperVar</code>实际上是为了解决<code>Union</code>前后不一致的问题，如下面的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line">U = <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">a: U, b: U</span>) -&gt; U:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>在一开始就已经报错为预期类型为“U”时，类型“int”和“str”不支持运算符“+”。预期类型为“U”时，类型“str”和“int”不支持运算符“+”</p><p><strong>这说明前后的类型不是一一对应的，a的类型是int的时候，b的类型可以是int也可以是str</strong>。这时候就可以使用<code>TypeVar</code>，他可以实现前后严格的一一对应关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, TypeVar</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&quot;T&quot;</span>, <span class="built_in">int</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">a: T, b: T</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_data(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line">get_data(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># &quot;ab&quot;</span></span><br></pre></td></tr></table></figure><p><code>Generic</code>主要用于定义泛型类，泛型类是指类中的属性或方法的类型不是固定的，而是可以根据实例化时传入的类型来确定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, TypeVar, <span class="type">Generic</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&quot;T&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Generic主要用于定义泛型类，</span></span><br><span class="line"><span class="comment"># 泛型类是指类中的属性或方法的类型不是固定的，</span></span><br><span class="line"><span class="comment"># 而是可以根据实例化时传入的类型来确定。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mylist</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, items: <span class="type">List</span>[T]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.items = items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, item: T</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_list: Mylist[<span class="built_in">int</span>] = Mylist([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    my_list.append(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(my_list)</span><br><span class="line"></span><br><span class="line">    my_list2: Mylist[<span class="built_in">str</span>] = Mylist([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])</span><br><span class="line">    my_list2.append(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(my_list2)</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>Literal 如果需要限制变量的值并提示，可以使用Literal</li><li>TypeVar 如果需要表示”任意类型”，可以使用TypeVar，相比Union可以确保类型的一致性</li><li>Generic 如果需要定义泛型类，可以使用Generic，在定义的时候不直接指定类型，而是使用Generic，使用的时候在进行指定</li></ol><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载一般都意味着在一定的规则上进行改写。</p><ul><li><code>overload</code> 用来重写函数签名</li><li><code>override</code> 用来检查子类重写函数名是否则正确</li></ul><p><code>overload</code>装饰器用于声明函数的重载，可以在不改写方法体的情况下，进行签名的重载（也就是提示）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> overload</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">overload装饰器用于声明函数的重载</span></span><br><span class="line"><span class="string">如下面的add函数，我们定义了两个函数签名，</span></span><br><span class="line"><span class="string">一个用于整数相加，一个用于字符串相加</span></span><br><span class="line"><span class="string">然后再定义一个不带装饰器的add函数，用于实际的实现</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于两个整数相加</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于两个字符串相加</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 两个函数所得到的提示信息是不同的</span></span><br><span class="line">    add(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>override</code>使用来检查子类继承的函数名是否正确的检查，他可以让重写方法变得更加的规范，如下面的<code>make_sound</code>函数，如果子类中写成<code>make_sounds</code>就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> overload, override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_sound</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @override</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_sound</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;汪汪汪&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @override</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_sound</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;喵喵喵&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d: Dog = Dog(<span class="string">&quot;dog&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d.make_sound())</span><br><span class="line"></span><br><span class="line">c: Cat = Cat(<span class="string">&quot;cat&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.make_sound())</span><br></pre></td></tr></table></figure><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><code>Protocol</code>是一个抽象基类，它的作用是用来定义协议。它的子类可以用来表示协议，在实现的过程中子类的方法必须和父类完全一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> Protocol</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">Protocol</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog eat&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog sleep&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Cat eat&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Cat sleep&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animal_do</span>(<span class="params">animal: Animal</span>):</span><br><span class="line">    animal.eat()</span><br><span class="line">    animal.sleep()</span><br><span class="line"></span><br><span class="line">animal_do(Dog())</span><br><span class="line">animal_do(Cat())</span><br></pre></td></tr></table></figure><h2 id="TypeDict"><a href="#TypeDict" class="headerlink" title="TypeDict"></a>TypeDict</h2><p><code>TypeDict</code>也是一个特殊的类型，他可以用来定义字典的键和值的类型（和数据类很相似）</p><p>这边使用了<code>Required</code>和<code>NotRequired</code>来表示可选字段与必须字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Required, NotRequired</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Required表示必须的字段</span></span><br><span class="line"><span class="string">NotRequired表示可选的字段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    name: Required[<span class="built_in">str</span>]</span><br><span class="line">    age: Required[<span class="built_in">int</span>]</span><br><span class="line">    email: NotRequired[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_dict:Student = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&quot;name&quot;</span>])</span><br></pre></td></tr></table></figure><p>数据类<code>dataclass</code>的实现方法也回忆一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line">    name:<span class="built_in">str</span></span><br><span class="line">    age:<span class="built_in">int</span></span><br><span class="line">    email:<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">teacher:Teacher = Teacher(name=<span class="string">&quot;Tom&quot;</span>, age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure><h2 id="unpack解包"><a href="#unpack解包" class="headerlink" title="unpack解包"></a>unpack解包</h2><p><code>unpack</code>是一个特殊的类型，他可以用来解包一个字典。可以给<code>**kwargs</code>提供更加精确的类型提示，可以提供类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict, Unpack</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Required, NotRequired, AnyStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    name: Required[<span class="built_in">str</span>]</span><br><span class="line">    age: Required[<span class="built_in">int</span>]</span><br><span class="line">    email: NotRequired[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_information</span>(<span class="params">*args, **kwargs: Unpack[Teacher]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Name:<span class="subst">&#123;kwargs[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,Age:<span class="subst">&#123;kwargs[<span class="string">&#x27;age&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_dict: Teacher = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(get_information(**my_dict))</span><br></pre></td></tr></table></figure><h2 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h2><p>如果写一个项目不太清楚用户使用的是否支持typing库，可以使用<code>import_module</code>进行动态导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> import_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    typing = import_module(<span class="string">&#x27;typing&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    typing = import_module(<span class="string">&#x27;typing_extensions&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> typing </tag>
            
            <tag> 类型注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-输出格式化</title>
      <link href="/post/print-format/"/>
      <url>/post/print-format/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用<code>print</code>输出结果的时候，有时候会需要指定特定的格式。比如打印保留两位小数，这时候可能会直接想到<code>round</code>方法将结果多进行一次处理。事实上还有更简单的格式化方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num1:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>本篇博客会总结一些常用的输出格式化形式。</p><h2 id="大数字格式化"><a href="#大数字格式化" class="headerlink" title="大数字格式化"></a>大数字格式化</h2><p>假设你定义了一个值为<code>10000000000</code>的变量。如果直接输出的话非常不直观，因为你很难一次性看清到底有多少个零。</p><p>在生活中我们常见处理方法是每三个零添加一个分隔符，如<code>10,000,000,000</code></p><p>Python中也提供了相应的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num: <span class="built_in">int</span> = <span class="number">10000000000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:,&#125;</span>&#x27;</span>) <span class="comment"># 10,000,000,000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:_&#125;</span>&#x27;</span>) <span class="comment"># 10_000_000_000</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上默认只支持这两个分隔符</p></blockquote><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>有时候字符串输出长短不一，为了美观输出，我们通常会使用<code>\t</code>制表符(相当于八个字符长度)来填充字符来达到整齐格式输出的效果。</p><p>现在有了更加简便的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var: <span class="built_in">str</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;var:^<span class="number">10</span>&#125;</span>World&#x27;</span>) <span class="comment">#    Hello   World</span></span><br></pre></td></tr></table></figure><p>其中数字10表示将输出填充到10个字符，假如字符串不到10个字符，默认使用空格进行填充，也可以在冒号后指定符号进行填充，如：<code>_</code>,<code>.</code>,<code>*</code>。</p><p>中间的符号含义为：</p><ul><li>^ 居中对齐</li><li>&lt; 左对齐</li><li>&gt; 右对齐</li></ul><p>这样可以灵活定制各种输出格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;var:_&gt;<span class="number">10</span>&#125;</span>World&quot;</span>) <span class="comment"># _____HelloWorld</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;var:.&lt;<span class="number">10</span>&#125;</span>World&#x27;</span>) <span class="comment"># Hello.....World</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;var:*^<span class="number">10</span>&#125;</span>World&#x27;</span>) <span class="comment"># **Hello***World</span></span><br></pre></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>我们使用各种时间库获取的时间都是时间戳的形式，可以使用各种哭将其转化为我们想要的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> babel.dates <span class="keyword">import</span> format_datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(format_datetime(now, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>, locale=<span class="string">&#x27;en&#x27;</span>)) <span class="comment"># 2024-05-23 16:44:10</span></span><br><span class="line"><span class="built_in">print</span>(strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)) <span class="comment"># 2024-05-23 16:44:10</span></span><br><span class="line"><span class="built_in">print</span>(datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)) <span class="comment"># 2024-05-23 16:44:10</span></span><br></pre></td></tr></table></figure><p>如果只想输出的话，可以使用更加简单的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now: datetime = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%Y-%m-%d %H:%M:%S&#125;</span>&#x27;</span>) <span class="comment"># 2024-05-23 16:44:10</span></span><br></pre></td></tr></table></figure><p>关键参数的解释：</p><ul><li>%Y-%m-%d 依次为 年-月-日 </li><li>%H:%M:%S 依次为 时-分-秒 默认为24小时制</li><li>%p 表示上午或下午的标识，AM 或 PM。</li><li>%c 表示日期和时间的完整格式，例如：’Tue Aug 16 21:30:00 1988’。</li><li>%x 表示日期（月&#x2F;日&#x2F;年）的格式</li><li>%I 表示12小时制</li><li>%H 表示24小时制</li><li>%A 表示星期</li></ul><p>可以使用这些参数灵活输出时间信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%Y-%m-%d %I:%M:%S %p&#125;</span>&#x27;</span>) <span class="comment"># 2024-05-23 04:44:10 PM</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%Y-%m-%d&#125;</span>&#x27;</span>) <span class="comment"># 2024-05-23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%c&#125;</span>&#x27;</span>) <span class="comment"># Tue May 23 16:44:10 2024</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%x&#125;</span>&#x27;</span>) <span class="comment"># 05/23/24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%A&#125;</span>&#x27;</span>) <span class="comment"># Tuesday</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%I%p&#125;</span>&#x27;</span>) <span class="comment"># 04PM</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%H%p&#125;</span>&#x27;</span>) <span class="comment"># 16PM</span></span><br></pre></td></tr></table></figure><h2 id="浮点数格式化"><a href="#浮点数格式化" class="headerlink" title="浮点数格式化"></a>浮点数格式化</h2><p>根据项目要求的精度的不同，我们可能需要不同的精度格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n: <span class="built_in">float</span> = <span class="number">1234.5678</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n:,<span class="number">.2</span>f&#125;</span>&#x27;</span>) <span class="comment"># 1,234.57</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n:<span class="number">.2</span>%&#125;</span>&#x27;</span>)  <span class="comment"># 123456.78%</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n:<span class="number">.2</span>e&#125;</span>&#x27;</span>) <span class="comment"># 1.23e+03</span></span><br></pre></td></tr></table></figure><p>甚至支持进制的相互转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num: <span class="built_in">int</span> = <span class="number">10000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小写16进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:x&#125;</span>&#x27;</span>) <span class="comment"># 2540be400</span></span><br><span class="line"><span class="comment"># 大写16进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:X&#125;</span>&#x27;</span>) <span class="comment"># 2540BE400</span></span><br><span class="line"><span class="comment"># 二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:b&#125;</span>&#x27;</span>) <span class="comment"># 101111101000000110101000000000000</span></span><br><span class="line"><span class="comment"># 八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:o&#125;</span>&#x27;</span>) <span class="comment"># 113705140000</span></span><br><span class="line"><span class="comment"># 十进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num:d&#125;</span>&#x27;</span>) <span class="comment"># 10000000000</span></span><br></pre></td></tr></table></figure><h2 id="奇怪的特性"><a href="#奇怪的特性" class="headerlink" title="奇怪的特性"></a>奇怪的特性</h2><p>我们在输出等式的时候一般都会这么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="built_in">int</span> = <span class="number">2</span></span><br><span class="line">b:<span class="built_in">int</span> = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a+b = <span class="subst">&#123;a+b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>事实上在Python3.8之后引入了一个新的特性，我们可以省去前面的说明文字，直接使用<code>&#123;表达式=&#125;</code>的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line">b: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">my_var: <span class="built_in">str</span> = <span class="string">&#x27;Format Hit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a+b=&#125;</span>&quot;</span>) <span class="comment"># a+b=15</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">bool</span>(a) = &#125;</span>&quot;</span>) <span class="comment"># bool(a) = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_var = &#125;</span>&quot;</span>) <span class="comment"># my_var = &#x27;Format Hit&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> format </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-ElementPlus组件库</title>
      <link href="/post/element-plus/"/>
      <url>/post/element-plus/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ElementUI是基于Vue框架的组件库，由饿了么团队开源，具有非常全面的组件数量，Vue3后改名为ElementPlus。本文只会介绍常用的组件。</p><blockquote><p><a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus (element-plus.org)</a></p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><p>安装成功后可以在<code>package.json</code>中看到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elementui&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库的所有组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ELementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库所需要的全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.full.min.mjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 将插件注册到 app 中</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ELementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后就可以在项目中使用elementPlus组件。</p><h2 id="VsCode插件"><a href="#VsCode插件" class="headerlink" title="VsCode插件"></a>VsCode插件</h2><p>对于组件来说，可能有非常多的属性，如果每次都要去官网查看相应的属性值就太麻烦了，如果使用ElementPlus推荐使用<code>element-ui-helper</code>插件，作者是胡浪。</p><p>安装后鼠标悬停在组件标签上即可看到所有的属性提示，对于一些简单的就不需要去官网查看。</p><h2 id="按钮-button"><a href="#按钮-button" class="headerlink" title="按钮 button"></a>按钮 button</h2><p>常用的属性有样式、形状和大小。</p><p>在<code>App.vue</code>中编写组件标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮形状<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>round<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">circle</span>&gt;</span>circle<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>plain<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">loading</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">disabled</span>&gt;</span>disabled<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以组合起来使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span> <span class="attr">loading</span>&gt;</span>round loading<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮尺寸<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>default<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;el-button size=&quot;mini&quot;&gt;mini&lt;/el-button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span>&gt;</span>medium<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>large<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图标-icon"><a href="#图标-icon" class="headerlink" title="图标 icon"></a>图标 icon</h2><p>需要先在<code>main.js</code>中导入图标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库的所有组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ELementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库所需要的全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span></span><br><span class="line"><span class="comment">// 导入图标库</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ELementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册图标库</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key,component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ELementPlusIconsVue</span>))&#123;</span><br><span class="line">    app.<span class="title function_">component</span>(key,component)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将插件注册到 app 中</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ELementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就可以在组件中编写代码，也可以将图标和按钮组合起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>图标<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Plus</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Delete</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Setting</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Upload</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Download</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Back</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Close</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Check</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">More</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Plus</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Delete</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮和图标组合<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;span&gt;搜索&lt;/span&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮组<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Back</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Close</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Check</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="./Element_Plusimage/image-20240517174814516.png" alt="image-20240517174814516" style="zoom:80%;" /><h2 id="提示框-Message"><a href="#提示框-Message" class="headerlink" title="提示框 Message"></a>提示框 Message</h2><p>有三种常见的提示框：</p><ul><li>ElMessage -  上侧滑下的消息条</li><li>ElMessageBox - 消息组合框 可选择确认或者取消</li><li>ElNotification - 右侧出来的消息弹窗</li></ul><p>type都默认有四种：success | info | error | warning</p><p>可以和按钮图标组合来展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElMessageBox</span>, <span class="title class_">ElNotification</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openMessage</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ElMessage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="string">&#x27;打开成功&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示关闭按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 自定义图标</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">shapeFlag</span>: <span class="string">&#x27;el-icon-success&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 持续时间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">duration</span>: <span class="number">2000</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">closeConfirm</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;是否关闭&#x27;</span>, <span class="string">&#x27;标题&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;关闭成功&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ElMessage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;已取消关闭&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openNotification</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ElNotification</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="string">&#x27;打开成功&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">duration</span>: <span class="number">2000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">position</span>: <span class="string">&#x27;top-right&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openNotification2</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ElNotification</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="string">&#x27;打开失败&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">duration</span>: <span class="number">2000</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">position</span>: <span class="string">&#x27;bottom-right&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openMessage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Open</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeConfirm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Close</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openNotification&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">More</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>通知1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openNotification2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Setting</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>通知2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="导航-menu"><a href="#导航-menu" class="headerlink" title="导航 menu"></a>导航 menu</h2><p>常用的导航分为<code>menu</code>、<code>breadcrumb</code>和<code>dropdown</code>三种</p><p>具体的如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selectedIndex = <span class="title function_">ref</span>(<span class="string">&quot;1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 默认展开的子菜单</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> defaultOpeneds = <span class="title function_">ref</span>([<span class="string">&quot;1&quot;</span>,<span class="string">&quot;3&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">selected</span> = (<span class="params">index, indexPath</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// indexPath是标签的索引路径，index是当前标签的索引</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;index:&quot;</span>, index, <span class="string">&quot;indexPath:&quot;</span>, indexPath)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">userCommand</span> = (<span class="params">command</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;command:&quot;</span>,command)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>垂直导航<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认的宽度为100% --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">mode</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">:default-active</span>=<span class="string">&quot;selectedIndex&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span>About<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>Company<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span>Team<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-3&quot;</span>&gt;</span>Careers<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>面包屑<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>Company<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>Me<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dropdown</span> @<span class="attr">command</span>=<span class="string">&quot;userCommand&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      个人中心<span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">User</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">dropdown</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">&quot;order&quot;</span>&gt;</span>订单<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>垂直导航-默认展开和自定义样式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-active</span>=<span class="string">&quot;selectedIndex&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;defaultOpeneds&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span> <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Edit</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Setting</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span>导航四<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签页-tabs"><a href="#标签页-tabs" class="headerlink" title="标签页 tabs"></a>标签页 tabs</h2><p>标签页最重要的是动态添加和删除的逻辑。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 默认选中的标签页</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selectedName = <span class="title function_">ref</span>(<span class="string">&#x27;2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">tabClick</span> = (<span class="params">tab, event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tab&quot;</span>, tab.<span class="property">props</span>, <span class="string">&quot;event&quot;</span>, event);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tab = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">arr</span>: [</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&quot;主页&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;内容1&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">name</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&quot;我&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;内容2&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">name</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&quot;订单&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;内容3&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  ]</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">tabAdd</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> index = tab.<span class="property">arr</span>.<span class="property">length</span> + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  tab.<span class="property">arr</span>.<span class="title function_">push</span>(</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: index,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">label</span>: <span class="string">`标签<span class="subst">$&#123;index&#125;</span>`</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">content</span>: <span class="string">`内容<span class="subst">$&#123;index&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">tabRemove</span> = (<span class="params">name</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span>, name);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> index = tab.<span class="property">arr</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === name);</span></span><br><span class="line"><span class="language-javascript">  tab.<span class="property">arr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">v-model</span>=<span class="string">&quot;selectedName&quot;</span> @<span class="attr">tab-click</span>=<span class="string">&quot;tabClick&quot;</span> <span class="attr">type</span>=<span class="string">&quot;border-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">label</span>=<span class="string">&quot;主页&quot;</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">label</span>=<span class="string">&quot;我&quot;</span> <span class="attr">name</span>=<span class="string">&quot;2&quot;</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">label</span>=<span class="string">&quot;订单&quot;</span> <span class="attr">name</span>=<span class="string">&quot;3&quot;</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>动态添加/删除<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;tabAdd&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">v-model</span>=<span class="string">&quot;selectedName&quot;</span> <span class="attr">closable</span> @<span class="attr">tab-remove</span>=<span class="string">&quot;tabRemove&quot;</span> <span class="attr">type</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">v-for</span>=<span class="string">&quot;item in tab.arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.content &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入框-input"><a href="#输入框-input" class="headerlink" title="输入框 input"></a>输入框 input</h2><p>输入框主种类繁多。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; el &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locales.mjs&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> password = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> content = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selected = <span class="title function_">ref</span>(<span class="string">&#x27;1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>输入框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- clearable: 是否可清空 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">clearable</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>密码框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- show-password: 是否显示切换密码显示隐藏的按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">show-password</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- rows: 文本域默认行数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>输入框-输入内容的限制<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">show-word-limit</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本域-输入内容的限制<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">show-word-limit</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>前置<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prepend</span>&gt;</span>http://<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>后置<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">append</span>&gt;</span>.com<span class="tag">&lt;/<span class="name">template</span>&gt;</span>、</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>前置加后置<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prepend</span>&gt;</span>http://<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">append</span>&gt;</span>.com<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>混合案例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prepend</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;前端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;后端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;服务端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">append</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">Search</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单选框、复选框-radio-checkbox"><a href="#单选框、复选框-radio-checkbox" class="headerlink" title="单选框、复选框 radio checkbox"></a>单选框、复选框 radio checkbox</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> radio = <span class="title function_">ref</span>(<span class="string">&quot;3&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> radio2 = <span class="title function_">ref</span>(<span class="string">&quot;c&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> radio3 = <span class="title function_">ref</span>(<span class="string">&quot;C&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> check = <span class="title function_">ref</span>([<span class="string">&quot;1&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> check2 = <span class="title function_">ref</span>([<span class="string">&quot;2&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeRadio</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;radio value change&quot;</span>, value)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">checkGroupChange</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 得到的是一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check value change&quot;</span>, value)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单选框 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>后端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>服务端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单选框-事件绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeRadio&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeRadio&quot;</span>&gt;</span>后端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeRadio&quot;</span>&gt;</span>服务端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单选框组<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只需要对el-radio-group绑定v-model即可 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;radio3&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeRadio&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>后端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>服务端<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;check&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>后端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>服务端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>复选框-事件绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;check2&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkGroupChange&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>后端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>服务端<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下拉框-select"><a href="#下拉框-select" class="headerlink" title="下拉框 select"></a>下拉框 select</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> checked = <span class="title function_">ref</span>(<span class="string">&quot;2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> checked2 = <span class="title function_">ref</span>(<span class="string">&quot;C&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">selectChange</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选中的值&quot;</span>, val);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">options</span>: [</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">label</span>: <span class="string">&quot;前端&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;A&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">label</span>: <span class="string">&quot;后端&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;B&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">label</span>: <span class="string">&quot;服务端&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;C&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  ]</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">selectMultipleChange</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选中的值&quot;</span>, val);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;前端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;后端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;服务端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框-绑定事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;selectChange&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;前端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;后端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;服务端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>动态下拉框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in data.options&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.label &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框多选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只需要添加一个属性 multiple 即可 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">multiple</span> @<span class="attr">change</span>=<span class="string">&quot;selectMultipleChange&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;前端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;后端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;服务端&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="日期选择器-date-picker"><a href="#日期选择器-date-picker" class="headerlink" title="日期选择器 date-picker"></a>日期选择器 date-picker</h2><p>日期的获取如果不使用<code>value-format</code>，那么控制台打印的就是时间戳的形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> date = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">dateChenge</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;change&quot;</span>, val)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>日期时间<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期时间&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不添加value-format属性，返回的是时间戳 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;dateChenge&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将控件转化为中文的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库的所有组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ELementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 导入组件库所需要的全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span></span><br><span class="line"><span class="comment">// 导入图标库</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ELementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; zhCn &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locales.mjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册图标库</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key,component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ELementPlusIconsVue</span>))&#123;</span><br><span class="line">    app.<span class="title function_">component</span>(key,component)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将插件注册到 app 中</span></span><br><span class="line"><span class="comment">// app.use(ELementPlus)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置区域语言为中文简体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ELementPlus</span>,&#123;<span class="attr">locale</span>:zhCn&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表单-form"><a href="#表单-form" class="headerlink" title="表单 form"></a>表单 form</h2><p>将之前的所有控件使用<code>el-form-item</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">radio</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">checkbox</span>: [],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">select</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">date</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">multipleSelect</span>: [],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">textarea</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">radio</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">checkbox</span>: [],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">select</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">multipleSelect</span>: [],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">textarea</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;文本框&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;data.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;单选框&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;复选框&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;日期选择器&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;data.date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;下拉选择框&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.select&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;多选下拉框&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.multipleSelect&quot;</span> <span class="attr">multiple</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;文本域&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.textarea&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对话框-dialog"><a href="#对话框-dialog" class="headerlink" title="对话框 dialog"></a>对话框 dialog</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">radio</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">checkbox</span>: [],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">select</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">date</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">multipleSelect</span>: [],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">textarea</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">radio</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">checkbox</span>: [],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">select</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">multipleSelect</span>: [],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">textarea</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialog = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openDialog</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  dialog.<span class="property">value</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">dialogClose</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  dialog.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;关闭&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>对话框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openDialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Open</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 如果要拖拽 draggable --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">draggable</span> @<span class="attr">close</span>=<span class="string">&quot;dialogClose&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;文本框&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;data.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;单选框&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;复选框&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;日期选择器&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;data.date&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;下拉选择框&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.select&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;多选下拉框&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.multipleSelect&quot;</span> <span class="attr">multiple</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;选项3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;文本域&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.textarea&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分页-pagination"><a href="#分页-pagination" class="headerlink" title="分页 pagination"></a>分页 pagination</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentPage = <span class="title function_">ref</span>(<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">current_change</span> = (<span class="params">val</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前页: &quot;</span>, val);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>page-size:每页显示记录数 total:总记录数<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">layout</span>=<span class="string">&quot;prev,pager,next&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;10&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>background:背景色<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">background</span> <span class="attr">layout</span>=<span class="string">&quot;prev,pager,next&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>跳转和总数 打印当前的页码 默认的页码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span> <span class="attr">background</span> <span class="attr">layout</span>=<span class="string">&quot;prev,pager,next,jumper,total&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">current-change</span>=<span class="string">&quot;current_change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格-table"><a href="#表格-table" class="headerlink" title="表格 table"></a>表格 table</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> idArr = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">selected</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(&quot;data&quot;, data)</span></span></span><br><span class="line"><span class="language-javascript">  idArr = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    idArr.<span class="title function_">push</span>(data[i].<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;idArr&quot;</span>, idArr)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">arr</span>: [</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-01&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-02&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-03&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-04&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  ]</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params">index, row</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;index:&quot;</span>, index, <span class="string">&quot;row:&quot;</span>, row)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">arr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">currentChange</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value&quot;</span>, value)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;data.arr&quot;</span> <span class="attr">border</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;网站&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;web&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>多选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;data.arr&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;网站&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;web&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表格+分页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- select-change是多选框的事件，current-change点击行的事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> @<span class="attr">selection-change</span>=<span class="string">&quot;selected&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;currentChange&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;data.arr&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;网站&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;web&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;edit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h2><p>对于组件需要安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure><p>可以在<code>package.json</code>文件中看到效果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elementui&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-auto-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-vue-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.27.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后需要配置<code>vite.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line"></span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">        <span class="comment">// 自动注册图标组件</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后修改<code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>对于组件来说，也需要安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-icons</span><br></pre></td></tr></table></figure><p><code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elementui&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-auto-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-icons&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-vue-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.27.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>vite.config.js</code>中添加代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-icons/vite&#x27;</span> <span class="comment">//图标</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IconsResolver</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-icons/resolver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line"></span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">        <span class="comment">// 自动导入图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">        <span class="comment">// 自动注册图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">          <span class="attr">enabledCollections</span>: [<span class="string">&quot;ep&quot;</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Icons</span>(&#123;</span><br><span class="line">      <span class="attr">autoInstall</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在所有图标的前面加上<code>i-ep-</code></p><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> idArr = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">selected</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(&quot;data&quot;, data)</span></span></span><br><span class="line"><span class="language-javascript">  idArr = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    idArr.<span class="title function_">push</span>(data[i].<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;idArr&quot;</span>, idArr)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">arr</span>: [</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-01&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-02&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-03&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;赵六&#x27;</span>, <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="attr">date</span>: <span class="string">&#x27;2021-09-04&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  ]</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params">index, row</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;index:&quot;</span>, index, <span class="string">&quot;row:&quot;</span>, row)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">arr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">currentChange</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value&quot;</span>, value)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表格+分页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- select-change是多选框的事件，current-change点击行的事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> @<span class="attr">selection-change</span>=<span class="string">&quot;selected&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;currentChange&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;data.arr&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;网站&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;web&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;edit(scope.$index, scope.row)&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">i-ep-Edit</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">i-ep-Delete</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
            <tag> ElementPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-路由配置实践</title>
      <link href="/post/vuerouter/"/>
      <url>/post/vuerouter/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们编写前端的时候肯定不只有一个页面，有多个页面的时候需要使用路由配置将用户引导到另一个页面，这时候就需要使用Router插件。Vue可以使用官方的VueRouter插件。</p><blockquote><p><a href="https://router.vuejs.org/zh/">Vue Router | Vue.js 的官方路由 (vuejs.org)</a></p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中可看到对应的版本信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pinia-plugin-persistedstate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们需要创建两个新文件夹，<code>views</code>用来存放页面组件，<code>router</code>用来存放路由信息，在<code>Router</code>文件夹中创建<code>index.js</code>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/index.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路由实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>routes</code>的<code>component</code>中所导入的就是<code>views</code>中的页面组件。对于<code>createRouter</code>中的<code>history</code>参数一般有<code>createWebHistory</code>和<code>createWebHashHistory</code>（在链接后面多了个#）选择。</p><p>之后在<code>main.js</code>中导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router/index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后在<code>App.vue</code>中添加一个组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行项目，在<code>http://localhost:5173</code>显示的是<code>index.vue</code>，在<code>http://localhost:5173/content/</code>显示的是<code>content.vue</code></p><h2 id="配置路径别名"><a href="#配置路径别名" class="headerlink" title="配置路径别名 @"></a>配置路径别名 @</h2><p>在实践中可以发现，我们使用src目录的次数是最为频繁的，为了省去麻烦，可以使用一个别名<code>@</code>来代替<code>../</code></p><p>首先在项目的根目录文件夹下的<code>vite.config.js</code>中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span> <span class="comment">// path来自node.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这时候就将<code>src</code>换成了<code>@</code>，</p><p>这时候就可以将之前在<code>index.js</code>中编写的路径改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>但这时候发现使用<code>@</code>没有路径提示，在根目录下再创建一个<code>jsconfig.json</code>的文件，在文件中写入如下信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span> <span class="comment">// 配置 @ 符号指向 src 目录及其子目录</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样我们使用<code>@</code>的时候就有提示了。</p><h2 id="查询字符串和路径传参"><a href="#查询字符串和路径传参" class="headerlink" title="查询字符串和路径传参"></a>查询字符串和路径传参</h2><p>查询字符串传参是一个常见的传参方法，在链接之后添加?后传递参数，最经典的一个例子：<code>https://vuejobs.com/?ref=vuejs</code>，通过？向后端传递了<code>ref:vuejs</code>参数。</p><p>我们可以在对应页面的组件中使用<code>$route.query.属性名</code>获得它的值，如在<code>index.js</code>中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    id:&#123;&#123; $route.query.id &#125;&#125;</span><br><span class="line">    name:&#123;&#123; $route.query.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:5173/?id=1&amp;name=gc</code>，会看到页面显示出id和name。</p><p>路径传参也是常用的一个做法，比如微博的图片链接：<code>https://wx4.sinaimg.cn/mw2000/008B0C4dly1himvdwnl32j31hc0sak6i.jpg</code>。例如访问content页面需要传递id和title两个参数。</p><p>首先需要修改路由规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content/id/:id/title/:title&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在组件中需要通过<code>$route.params.属性名</code>来获得传递的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内容页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    id:&#123;&#123; $route.params.id &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    name:&#123;&#123; $route.params.title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>http://localhost:5173/content/id/1/title/vuerouter</code>即可访问且看到传递的数据。</p><blockquote><p>后续访问<code>http://localhost:5173/content</code>会出现报错<code>vue-router.mjs:35  [Vue Router warn]: No match found for location with path &quot;/content&quot;</code>。</p></blockquote><p>如果相设置非严格传递，可以在参数后添加?，这表示这个参数不是必须传递的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content/id/:id/title/:title?&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="路由别名-alias"><a href="#路由别名-alias" class="headerlink" title="路由别名 alias"></a>路由别名 alias</h2><p>顾名思义，就是给当前的路由添加一个新的链接，这两个链接访问的页面完全一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 添加别名</span></span><br><span class="line">        <span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content/id/:id/title/:title?&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>之后无论是访问<code>/</code>，<code>/home</code>和<code>/index</code>就都会是<code>index.vue</code>组件</p><h2 id="定义路由名称-name"><a href="#定义路由名称-name" class="headerlink" title="定义路由名称 name"></a>定义路由名称 name</h2><p>其实就是给路由设置一个唯一的名字，是为了方便后续使用router-link进行链接传参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 添加别名</span></span><br><span class="line">        <span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/index&#x27;</span>],</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content/id/:id/title/:title?&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Router-link"><a href="#Router-link" class="headerlink" title="Router-link"></a>Router-link</h2><p>router-link是用来进行链接转移的，本质是生成一个a标签。</p><p>为了更好演示创建一个新的组件<code>user.vue</code>和新的路由规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 添加别名</span></span><br><span class="line">        <span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/index&#x27;</span>],</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/id/:id/name/:name?&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/user.vue&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在<code>index.vue</code>中创建router-link：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    id:&#123;&#123; $route.query.id &#125;&#125;</span><br><span class="line">    name:&#123;&#123; $route.query.name &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/content/?id=1&amp;title=vue&quot;</span>&gt;</span>内容页1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/id/1/name/张三&quot;</span>&gt;</span>用户页：张三<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击后可以正常跳转，打开调试工具发现本质是生成a标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/content/?id=1<span class="symbol">&amp;amp;</span>title=vue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>内容页1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/id/1/name/张三&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户页：张三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以将连接写成<strong>动态属性绑定</strong>的形式，得到的效果是一样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/content&#x27;,query:&#123;id:2,title:&#x27;vuerouter&#x27;&#125;&#125;&quot;</span> &gt;</span>内容2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;user&#x27;,params:&#123;id:2,name:&#x27;李四&#x27;&#125;&#125;&quot;</span>&gt;</span>用户页：李四<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以看到对于链接式传参，需要提供name，而不是path</strong>。</p><p>也可以使用编程式的方式，使用<code>useRouter</code>进行跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> route  = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">goTo1</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        route.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;vue&#x27;</span>&#125;&#125;); <span class="comment">// 跳转到内容页</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">goTo2</span> =(<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        route.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;&#125;); <span class="comment">// 跳转到用户页</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    id:&#123;&#123; $route.query.id &#125;&#125;</span><br><span class="line">    name:&#123;&#123; $route.query.name &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/content/?id=1&amp;title=vue&quot;</span>&gt;</span>内容页1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/id/1/name/张三&quot;</span>&gt;</span>用户页：张三<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/content&#x27;,query:&#123;id:2,title:&#x27;vuerouter&#x27;&#125;&#125;&quot;</span> &gt;</span>内容2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;user&#x27;,params:&#123;id:2,name:&#x27;李四&#x27;&#125;&#125;&quot;</span>&gt;</span>用户页：李四<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goTo1&quot;</span>&gt;</span>跳转到内容页<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goTo2&quot;</span>&gt;</span>跳转到用户页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套路由-children"><a href="#嵌套路由-children" class="headerlink" title="嵌套路由 children"></a>嵌套路由 children</h2><p>新建一个<code>vip</code>文件夹，在文件夹下创建<code>default.vue</code>、<code>info.vue</code>、<code>order.vue</code>，并在<code>src</code>目录下新建一个<code>vip.vue</code>作为所有组件的父组件。等于新建了一个完整的新页面，这个页面下有很多其他功能需要实现，那就需要使用嵌套路由。</p><p>首先新建路由匹配，需要定义子路由:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// http://localhost:5173/</span></span><br><span class="line">        <span class="comment">// 添加别名</span></span><br><span class="line">        <span class="attr">alias</span>: [<span class="string">&#x27;/home&#x27;</span>,<span class="string">&#x27;/index&#x27;</span>],</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/index.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>, <span class="comment">// http://localhost:5173/content</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/content.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/vip&quot;</span>, <span class="comment">// http://localhost:5173/vip</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/vip.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 默认页面</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// http://localhost:5173/vip</span></span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/vip/default.vue&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;order&#x27;</span>, <span class="comment">// http://localhost:5173/vip/order</span></span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/vip/order.vue&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;info&#x27;</span>, <span class="comment">// http://localhost:5173/vip/info</span></span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/vip/info.vue&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需要在<code>vip.vue</code>编写如下代码，使用<code> &lt;router-view/&gt;</code>进行渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/header.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/footer.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的<code>&lt;Header /&gt;</code>和<code>&lt;Footer /&gt;</code>是可以直接继承到子页面的，不需要每个组件都进行导入。</p><h2 id="重定向-redirect"><a href="#重定向-redirect" class="headerlink" title="重定向 redirect"></a>重定向 redirect</h2><p>只需要在路由配置的时候添加<code>redirect</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path : <span class="string">&#x27;/svip&#x27;</span>,</span><br><span class="line">        <span class="comment">// redirect: &#x27;/vip&#x27;, 跳转到http://localhost:5173/vip</span></span><br><span class="line">        <span class="attr">redirect</span>: &#123;<span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">&#x27;vuerouter&#x27;</span>&#125;&#125;, <span class="comment">// 跳转到http://localhost:5173/content?id=2&amp;title=vuerouter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后访问<code>/svip</code>就会跳转到<code>/vip</code>，如果想要传递参数重定向，可以参考上述<code>router-link</code>中的<code>:to</code>的写法。</p><h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><p>后端一般叫它全局中间件，是用来拦截请求的，全局的意思是在整个项目中进行拦截。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router/index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to:&#x27;</span>, to) <span class="comment">// to:要去的路由</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from:&#x27;</span>, <span class="keyword">from</span>) <span class="comment">// from:从哪来的路由</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/vip/&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;需要登录&#x27;</span>)</span><br><span class="line">        <span class="title function_">next</span>(<span class="literal">false</span>) <span class="comment">// 拦截</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&#x27;content&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/vip&#x27;</span> &#125;) <span class="comment">// 跳转到http://localhost:5173/vip</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一般使用<code>path</code>和<code>name</code>进行判断</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-Pinia持久化插件</title>
      <link href="/post/pinia/"/>
      <url>/post/pinia/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Pinia？"><a href="#什么是Pinia？" class="headerlink" title="什么是Pinia？"></a>什么是Pinia？</h2><p>Pinia是一个轻量级的状态管理库，用来管理全局状态的工具。</p><blockquote><p><a href="https://pinia.vuejs.org/zh/">Pinia | The intuitive store for Vue.js (vuejs.org)</a></p></blockquote><p>它能够解决如下问题：</p><ol><li>全局状态管理：所有组件都可以访问和修改状态，不用在每个组件的内部进行管理</li><li>简化组件之间的通信：避免使用大量的prop和provide</li><li>状态持久化：可以将数据储存在本地存储中，在应用重启后仍然会保留状态，本质是将数据存储在LocalStorage中。</li></ol><p>常见的应用在保持用户的登录状态。</p><p>Pinia和LocalStorage有一些区别：</p><ul><li>LocalStorage只允许存储字符串类型，大小限制为5MB（适合简单场景）</li><li>Pinia可以存储任何的数据类型，没有数据大小的限制（适合复杂场景）</li></ul><h2 id="安装Pinia"><a href="#安装Pinia" class="headerlink" title="安装Pinia"></a>安装Pinia</h2><p>在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>之后在<code>package.json</code>文件中就可以找到pinia的版本信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>安装之后就可以在<code>main.js</code>中创建一个pinia实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后我们在<code>src</code>目录下创建一个<code>stores</code>的文件夹，创建一个<code>web.js</code>文件，在文件中创建一个store对象.</p><p>defineStore有两个参数:id（最好和js文件名相同）和setup函数（或者是Option对象）</p><p>下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineStore</span>(<span class="string">&quot;web&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;百度&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> users = <span class="title function_">ref</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">userAdd</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        users.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        web,</span><br><span class="line">        users,</span><br><span class="line">        userAdd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>定义后使用<code>export</code>导出，变量的命名是由<code>use</code>+<code>Id</code>+<code>Store</code>组成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useWebStore = <span class="title function_">defineStore</span>(<span class="string">&quot;web&quot;</span>,……)</span><br></pre></td></tr></table></figure><p>导出后就可以在组件中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useWebStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./stores/web&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> useWeb = <span class="title function_">useWebStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(useWeb.<span class="property">web</span>.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(useWeb.<span class="property">users</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; useWeb.web.title &#125;&#125;</span><br><span class="line">    &#123;&#123; useWeb.users &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;useWeb.userAdd&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出pinia就是将状态组件进行了集中的管理。</p><h2 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h2><p>为了关闭浏览器的时候用户的状态不发生丢失，需要使用localStorage将数据保存下来。</p><p>这里需要使用到一个本地持久化存储插件：pinia-plugin-persistedstate</p><blockquote><p><a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">Home | pinia-plugin-persistedstate (prazdevs.github.io)</a></p></blockquote><p>首先要安装插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><p>安装后在<code>package.json</code>中可以可看到对应的版本信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pinia-plugin-persistedstate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后在<code>main.js</code>中创建一个实例，并作用于pinia：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPersistedState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(<span class="title function_">createPersistedState</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>web.js</code>的<code>defineStore</code>的末尾添加一个参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useWebStore = <span class="title function_">defineStore</span>(<span class="string">&quot;web&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;百度&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> users = <span class="title function_">ref</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">userAdd</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        users.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        web,</span><br><span class="line">        users,</span><br><span class="line">        userAdd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">persist</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就开启了持久化存储，在浏览器调试工具的应用程序中的本地存储即可看到数据的内容，且刷新后内容不丢失。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-Vite项目初识</title>
      <link href="/post/vite/"/>
      <url>/post/vite/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于hexo不单独支持vue的语法高亮，因此部分vue的高亮使用的是html。</p><h2 id="什么是Vite？"><a href="#什么是Vite？" class="headerlink" title="什么是Vite？"></a>什么是Vite？</h2><p>vite是一个现在化的前端开发构建工具，能够帮助开发者更加便捷管理安装的npm包，更快的启动和更新修改后的前端页面，是Vue官方主推的构建工具。</p><blockquote><p><a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链 (vitejs.dev)</a></p></blockquote><h2 id="创建一个Vite项目"><a href="#创建一个Vite项目" class="headerlink" title="创建一个Vite项目"></a>创建一个Vite项目</h2><p>在项目文件夹中使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>输入后会让我们输入一些指令，按照提示输入即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\Web\vite_test&gt;npm create vite@latest</span><br><span class="line">√ Project name: ... demo</span><br><span class="line">√ Select a framework: » Vue</span><br><span class="line">√ Select a variant: » JavaScript</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> D:\Web\vite_test\demo...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> demo</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br></pre></td></tr></table></figure><p>之后就会看见一个名为demo的文件夹，其中的文件为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">─demo</span><br><span class="line">    ├─.vscode</span><br><span class="line">    ├─public</span><br><span class="line">    └─src</span><br><span class="line">        ├─assets</span><br><span class="line">        └─components</span><br></pre></td></tr></table></figure><p>按照提示继续输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:\Web\vite_test&gt;<span class="built_in">cd</span> demo</span><br><span class="line"></span><br><span class="line">D:\Web\vite_test\demo&gt;npm install</span><br><span class="line"></span><br><span class="line">added 27 packages <span class="keyword">in</span> 6s</span><br><span class="line"></span><br><span class="line">D:\Web\vite_test\demo&gt;npm run dev</span><br><span class="line"></span><br><span class="line">&gt; demo@0.0.0 dev</span><br><span class="line">&gt; vite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  VITE v5.2.11  ready <span class="keyword">in</span> 467 ms</span><br><span class="line"></span><br><span class="line">  ➜  Local:   http://localhost:5173/</span><br><span class="line">  ➜  Network: use --host to expose</span><br><span class="line">  ➜  press h + enter to show <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>点击链接打开本地服务器即可看到vite的原始界面。</p><p>之后可以将默认的HelloWorld.vue和style.css删除，并在main.js和App.vue中删除导入即可。</p><p>之后你就会得到一个空的vue文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h2><p>VSCode本身其实就是一个文本编辑器，如果想要让他支持vue的开发，那么必须下载一些其他的插件。</p><ol><li>Vue-Official - 支持Vue语法高亮</li><li>Vue VSCode Snippets - 快速生成vue3模版</li><li>别名路径跳转  - 替换@和&#x2F;</li></ol><p>安装了2之后可以通过以下命令创建初始模版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vbase-3-setup</span><br></pre></td></tr></table></figure><p>创建一个如下的空模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是现在vue默认的模版中template已经不需要div包裹了，因此我们需要修改一下插件的格式,进入<code>C:\Users\用户名\.vscode\extensions\sdras.vue-vscode-snippets-3.1.1\snippets</code>，找到<code>vue.json</code>,搜索<code>vbase-3-setup</code>和<code>vbase-3-ts-setup</code>，将<code>div</code>和<code>lang=&quot;scss&quot;</code>删除，将template和script调换位置。</p><p>修改为如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Vue Single File Component Setup Composition API&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vbase-3-setup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&lt;script setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;style scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Base for Vue File Setup Composition API with SCSS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Vue Single File Component Setup Composition API with Typescript&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vbase-3-ts-setup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&lt;script setup lang=\&quot;ts\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;style scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Base for Vue File Setup Composition API - Typescript&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>修改完记得重启VSCode</p></blockquote><p>接下来在vue文件中编写html标签会出现没有提示的情况，这时候可以在设置中搜索<code>includeLanguages</code>,在<code>Emmet</code>中添加至如下参数,重启后编写就有提示。</p><img src="./Viteimage/image-20240510163949692.png" alt="image-20240510163949692" style="zoom: 67%;" /><p>或者直接在<code>settings.json</code>中添加如下设置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue-html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这时候如果返回去打开其他html文件会发现<code>ts-plugin</code>这个插件导致全部Code冒红，这时候在在设置中搜索<code>Validate</code>，然后关闭TyScript的语法检查。</p><blockquote><p>这个插件开启后VSCode的所有html都会冒红</p></blockquote><h2 id="代码迁移到Vue"><a href="#代码迁移到Vue" class="headerlink" title="代码迁移到Vue"></a>代码迁移到Vue</h2><p>之前使用html编写vue代码，可以体会到还是很麻烦的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;web.show&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!--    v-show本质是生成了css的display属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>gcnanmu学Vue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>切换显示状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">show</span> = !web.<span class="property">show</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                toggle</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要将其迁移到vue文件中只需要这样编写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    web.<span class="property">show</span> = !web.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; web.show &#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!--    v-show本质是生成了css的display属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>gcnanmu学Vue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>切换显示状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到</p><ol><li>不再需要编写return 和 setup</li><li>导入的时候只需要指定<code>vue</code>，不再需要指定到特定的<code>vue.js</code></li><li>想要预览需要在终端使用<code>npm run dev</code>命令</li></ol><h2 id="父组件与子组件"><a href="#父组件与子组件" class="headerlink" title="父组件与子组件"></a>父组件与子组件</h2><p>在Vite中，我们一般都将vue组件放在<code>components</code>文件夹中，组件其实就是vue文件，我们先在<code>components</code>中创建<code>header.vue</code>和<code>footer.vue</code>两个组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- header组件写header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- footer组件写footer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后在<code>App.vue</code>中导入两个组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./components/header&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;./components/footer&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到导入和在template中使用的时候<strong>组件的名字需要大写</strong>。在这个例子中，<code>App.vue</code>是父组件，<code>header.vue</code>和<code>footer.vue</code>是子组件。</p><p>使用<code>npm run dev</code>命令运行，可以在显示出的页面中看到效果。</p><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><h3 id="父传子-defineProps"><a href="#父传子-defineProps" class="headerlink" title="父传子 defineProps"></a>父传子 defineProps</h3><p>使用语法为：</p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span> <span class="attr">propsName</span>=<span class="string">&quot;百度&quot;</span> <span class="attr">propWeb</span>=<span class="string">&quot;baidu.com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;userAdd&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传递响应式数据 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;Footer v-bind=&quot;propWeb&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Footer</span> <span class="attr">:</span>=<span class="string">&quot;propWeb&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&quot;propsName&quot;</span>, <span class="string">&quot;propWeb&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者以对象的方式接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">users</span>:<span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">users</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">url</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在组件中设定一些传递的规则：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">users</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置为必传的属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置初始值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="string">&quot;baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./components/header.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;./components/footer.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> propWeb = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">users</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&quot;www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">userAdd</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    propWeb.<span class="property">users</span>++;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(propWeb.<span class="property">users</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> <span class="attr">propsName</span>=<span class="string">&quot;百度&quot;</span> <span class="attr">propWeb</span>=<span class="string">&quot;baidu.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;userAdd&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递响应式数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;Footer v-bind=&quot;propWeb&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">:</span>=<span class="string">&quot;propWeb&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&quot;propsName&quot;</span>, <span class="string">&quot;propWeb&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Footer.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">users</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置为必传的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置初始值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&quot;baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header组件写header --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> &#123;&#123; props.users &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子传父-defineEmits"><a href="#子传父-defineEmits" class="headerlink" title="子传父 defineEmits"></a>子传父 defineEmits</h3><p>语法为：</p><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&quot;getWeb&quot;</span>,<span class="string">&quot;addUser&quot;</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emits</span>(<span class="string">&quot;getWeb&quot;</span>,<span class="string">&quot;www.baidu.com&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emits</span>(<span class="string">&quot;addUser&quot;</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> @<span class="attr">getWeb</span>=<span class="string">&quot;emitsGetWeb&quot;</span> @<span class="attr">addUser</span>=<span class="string">&quot;emitsUserAdd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./components/header.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&quot;baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> users = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">emitsGetWeb</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    web.<span class="property">url</span> = data;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="property">url</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">emitsUserAdd</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    users.<span class="property">value</span> += data;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> @<span class="attr">getWeb</span>=<span class="string">&quot;emitsGetWeb&quot;</span> @<span class="attr">addUser</span>=<span class="string">&quot;emitsUserAdd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; web.url &#125;&#125;</span><br><span class="line">    &#123;&#123; users &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&quot;getWeb&quot;</span>,<span class="string">&quot;addUser&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">emits</span>(<span class="string">&quot;getWeb&quot;</span>,<span class="string">&quot;www.baidu.com&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emits</span>(<span class="string">&quot;addUser&quot;</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跨组件通信-provide-inject"><a href="#跨组件通信-provide-inject" class="headerlink" title="跨组件通信 provide inject"></a>跨组件通信 provide inject</h2><p>这个方法只能实现父组件向子组件传递数据，父组件使用provide，子组件使用的是inject</p><p>语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./components/header.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive, ref, provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="string">&quot;provideWeb&quot;</span>, web);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> users = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">userAdd</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        users.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="string">&quot;provideFuncUserAdd&quot;</span>, userAdd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> web = <span class="title function_">inject</span>(<span class="string">&quot;provideWeb&quot;</span>);   </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> funcUserAdd = <span class="title function_">inject</span>(<span class="string">&quot;provideFuncUserAdd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码为：</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./components/header.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, ref, provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&quot;baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&quot;provideWeb&quot;</span>, web);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> users = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">userAdd</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    users.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&quot;provideFuncUserAdd&quot;</span>, userAdd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App top<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    users:&#123;&#123; users &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Nav</span> <span class="keyword">from</span> <span class="string">&quot;./nav.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> funcUserAdd = <span class="title function_">inject</span>(<span class="string">&quot;provideFuncUserAdd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;funcUserAdd&quot;</span>, funcUserAdd);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>header middle<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nav</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;funcUserAdd&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nav.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> web = <span class="title function_">inject</span>(<span class="string">&quot;provideWeb&quot;</span>);   </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;provideWeb&quot;</span>,web);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>nav button<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="匿名插槽-v-slot"><a href="#匿名插槽-v-slot" class="headerlink" title="匿名插槽 v-slot"></a>匿名插槽 v-slot</h2><p>我们一开始渲染子组件使用的都是自闭和的形式<code>&lt;Header /&gt;</code>和<code>&lt;Footer /&gt;</code>，插槽即为<code>&lt;Header&gt;&lt;Header/&gt;</code></p><p>匿名插槽的语法为：</p><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果想要使用name进行标签的定义，可以这样写：</p><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Footer</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;template v-slot:url&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以简写为如下形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tencent.com&quot;</span>&gt;</span>腾旭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/header.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&#x27;./components/footer.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>App vue<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Footer</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;template v-slot:url&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以简写为如下形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tencent.com&quot;</span>&gt;</span>腾旭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>header vue<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Footer.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>footer vue<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽-name"><a href="#作用域插槽-name" class="headerlink" title="作用域插槽 #name"></a>作用域插槽 #name</h2><p>他的作用是来让子组件向父组件传递数据，并在父组件的模版中渲染</p><p>语法为：</p><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">title</span>=<span class="string">&quot;vue&quot;</span> <span class="attr">url</span>=<span class="string">&quot;vuejs.org&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;template #url=&quot;data&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123; data.title &#125;&#125;</span></span><br><span class="line"><span class="comment">&#123;&#123; data.url &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">url</span>=<span class="string">&quot;&#123;title, url&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; title &#125;&#125;</span><br><span class="line">    &#123;&#123; url &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tencent.com&quot;</span>&gt;</span>腾旭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><ul><li>挂载阶段 - onMounted onBeforeMount</li><li>更新阶段 - onBeforeUpdate onUpdated</li><li>卸载阶段 - onBeforeUnmout onUnmounted</li><li>错误处理 - onErrorCoptured</li></ul><p>下面是一个挂载和更新的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,onUpdated,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App.vue mounted&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App.vue updated&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user  =<span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user:&quot;</span>,user);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; user &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;user++&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当网页刚加载时，会打印“App.vue mounted”，当按钮被点击的时候，控制台会打印出多次”App.vue updated”。</p><h2 id="toRef和toRefs"><a href="#toRef和toRefs" class="headerlink" title="toRef和toRefs"></a>toRef和toRefs</h2><p>这两个方式是为了将响应式对象的属性转化为Ref对象。</p><ul><li>toRef - 将单个属性转化</li><li>toRefs - 将整个对象转化</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, toRefs, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&quot;www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 结构后打印得到的类型是字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> web.<span class="property">url</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 将整个对象转化为toRefs</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; name, url &#125; = <span class="title function_">toRefs</span>(web)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 结构后打印得到的类型是对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;url:&quot;</span>, url)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 将整个对象的某个属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> changeUrl = <span class="title function_">toRef</span>(web.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; web.url &#125;&#125;</span><br><span class="line">    &#123;&#123; changeUrl &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-ES6入门</title>
      <link href="/post/js-es6/"/>
      <url>/post/js-es6/</url>
      
        <content type="html"><![CDATA[<h2 id="ECMAScript是什么"><a href="#ECMAScript是什么" class="headerlink" title="ECMAScript是什么"></a>ECMAScript是什么</h2><p>简单来说就是JavaScript具有划时代意义的一个版本（2015 年 6 月正式发布），具体为什么叫ECMAScript，可以看阮一峰的<a href="https://es6.ruanyifeng.com/#docs/intro">《ECMAScript6入门》</a>。</p><p>本文的写作目的其实是回忆起一些常用的ES6变量、方法，作为一个个人的学习记录。本机使用的是<code>Node.js v18.15.0</code></p><blockquote><p>关于版本的兼容性问题可以看： <a href="https://compat-table.github.io/compat-table/es6">https://compat-table.github.io/compat-table/es6</a></p></blockquote><h2 id="变量与常量-let-const"><a href="#变量与常量-let-const" class="headerlink" title="变量与常量 let const"></a>变量与常量 let const</h2><p>早期学习过js或者看了老资料的都看过一个关键字——<code>var</code>，这个关键字存在变量提升的问题，这时候就容易出现指针混乱。</p><p>在ES6中使用更加规范的<code>const</code>和<code>let</code>作为<code>var</code>关键字的替代，将声明的变量都限制在代码块中且不允许变量的提升。</p><ul><li>let 变量 可后期修改，只服务于当前的块级作用域{ }</li><li>const 常量 不可后期修改，在声明后即可使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 经常改变的数据类型</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;gcnanmu&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> balance = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(balance)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> balance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;PI&quot;</span>,pi)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量与变量的区别</span></span><br><span class="line">name = <span class="string">&quot;gcnanmu2&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">pi=<span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi)</span><br></pre></td></tr></table></figure><blockquote><p>提一嘴，在ES6之后都不用在代码的末尾添加;</p></blockquote><h2 id="数据类型-typeof"><a href="#数据类型-typeof" class="headerlink" title="数据类型 typeof"></a>数据类型 typeof</h2><p>我们日常说ES6基本指的是2015年之后的所有版本，所以网上对ES6有几种数据类型说法很多，但是常用的就那么几个数据类型，分别是数组（array），数字（number）、字符串（string）、对象（object）、集合（set）、布尔（boolen），函数（function），类（class），map等八种类型。</p><blockquote><p>想要查看当前的数据类型，有三种常用的方法：</p><ol><li>typeof 变量</li><li>Object.prototype.toString.call(变量)</li><li>变量.constructor</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;gcnanmu&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="comment">// js没有浮点数类型的说法</span></span><br><span class="line"><span class="keyword">let</span> balance = -<span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> weight = <span class="number">60.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// boolen true/false</span></span><br><span class="line"><span class="keyword">let</span> tv1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> tv2 = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tv1&quot;</span>, tv1, <span class="keyword">typeof</span> tv1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tv2&quot;</span>, tv2, <span class="keyword">typeof</span> tv2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="comment">// 可以包裹其他数据类型，是一个集合体</span></span><br><span class="line"><span class="comment">// 有多个键值对组成 每个键值对之间要使用逗号分隔</span></span><br><span class="line"><span class="keyword">let</span> boy = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">60.5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boy&quot;</span>, boy, <span class="keyword">typeof</span> boy)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map集合</span></span><br><span class="line"><span class="comment">// 用于储存键值对的数据类型</span></span><br><span class="line"><span class="comment">// 使用箭头进行指向 打印出的类型还是object</span></span><br><span class="line"><span class="keyword">let</span> girl = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;luna&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;age&quot;</span>, <span class="number">18</span>]</span><br><span class="line">])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;girl&quot;</span>, girl, <span class="keyword">typeof</span> girl)</span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// 元素是不能重复的</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;number&quot;</span>, number, <span class="keyword">typeof</span> number)</span><br><span class="line"></span><br><span class="line"><span class="comment">// array</span></span><br><span class="line"><span class="comment">// 可以添加重复的数据</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr, <span class="keyword">typeof</span> arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">myFunction</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="comment">// 创建相同属性的和方法的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// constructor是构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&quot;age&quot;</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> my = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;gcnanmu&quot;</span>, <span class="number">23</span>)</span><br><span class="line">my.<span class="title function_">info</span>()</span><br></pre></td></tr></table></figure><p>其中数据类型又可以继续划分为两种：</p><ul><li>基本数据类型：number，string，boolen等</li><li>引用数据类型：object，map，function等</li></ul><p>对于这两种数据类型，<strong>需要注意的就是引用数据类型的赋值操作赋值的是地址，而不是数据本身。</strong></p><h2 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h2><p>函数很像数学的概念，输入一个x，根据编写的逻辑处理得到一个新的值。在ES6中为了方便函数的书写（偷懒），引入了箭头函数和隐士返回两个新特性。</p><p>箭头函数是为了方便匿名函数书写的，有了箭头函数后，可以将匿名函数省略大半：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的写法</span></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">plus</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你只有一个返回值，那么还可以进一步将return省略（即隐士返回）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略前</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">plus</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略后</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">plus</span> = (<span class="params">a , b</span>) =&gt; (a+b)</span><br></pre></td></tr></table></figure><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><p>数组可能是我们编写函数最常用的数据类型。因为使用的评率太高，所以方法都必须要牢记。基本操作分为增删改查和排序。常用的属性为length。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// push 向末尾添加一个或多个元素，返回数组的长度</span></span><br><span class="line"><span class="keyword">let</span> arrlength = arr.<span class="title function_">push</span>(<span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arrlength&quot;</span>, arrlength)</span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift 向开头添加元素，返回数组的长度</span></span><br><span class="line">arrlength = arr.<span class="title function_">unshift</span>(<span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arrlength&quot;</span>, arrlength)</span><br><span class="line"></span><br><span class="line"><span class="comment">// shift 删除第一个元素，返回删除的元素</span></span><br><span class="line"><span class="keyword">let</span> delElement = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delElement&quot;</span>, delElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop 删除末尾的一个元素 返回被删除的元素</span></span><br><span class="line">delElement = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delElement&quot;</span>, delElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// splice 删除指定的元素 返回被删除元素的数组</span></span><br><span class="line"><span class="keyword">let</span> delArr = arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, delArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse 颠倒元素 无返回值</span></span><br><span class="line">arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort 按照首字母排列</span></span><br><span class="line"><span class="comment">// 注意对数组进行排序的时候也是按照首字母来排序的</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line">arr2.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr2&quot;</span>, arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照数字大小排序</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">5</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">arr3.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr3&quot;</span>, arr3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 筛选符合条件的数组 返回一个新的数组</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr4.<span class="title function_">filter</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">12</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newArr&quot;</span>, newArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// each方法</span></span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组切片</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">//apple</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>)); <span class="comment">//apple banana</span></span><br></pre></td></tr></table></figure><p>这边要提一嘴两个不同的for循环：</p><ul><li><p>for of 取出的是其中的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> number) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for in 按顺序遍历下标，而不是元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">in</span> number) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(number[num]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(number[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在很多公司的面试题中还出现了reduce方法，这个方法常见的用法是累计的计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = number.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pre, cur);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">4 3</span><br><span class="line">7</span><br></pre></td></tr></table></figure><blockquote><p>另外，个人感觉js的循环也挺反直觉的，一般的语言都是(index,key,value)组合，而js是(value,key,index)</p></blockquote><h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合 Set"></a>集合 Set</h2><p>集合和数学上的集合一样，常用来存储简单的数据类型，里面不存在重复的元素，常见的用法是用来去重。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add</span></span><br><span class="line">fruits.<span class="title function_">add</span>(<span class="string">&quot;mango&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete</span></span><br><span class="line">fruits.<span class="title function_">delete</span>(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment">// has 是否在集合之内</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">has</span>(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">has</span>(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">size</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// change to array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fruits)</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(fruits)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符 展开可迭代对象</span></span><br><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;gcnanmu3125.xyz&quot;</span></span><br><span class="line"><span class="keyword">let</span> web2 = <span class="string">&quot;工程楠木&quot;</span></span><br><span class="line"><span class="keyword">let</span> webArr = [...web]</span><br><span class="line"><span class="keyword">let</span> webArr2 = [...web2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(webArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(webArr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可使用扩展运算符将set转化为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...fruits])</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// set集合没有索引 索引还是他自身</span></span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组去重</span></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> numberSet = <span class="keyword">new</span> <span class="title class_">Set</span>(numberArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    numberSet</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这边有提到一个打散的语法，可以将string这种对象直接打散为列表形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;gcnanmu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...name]);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;g&#x27;, &#x27;c&#x27;, &#x27;n&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;a&#x27;, &#x27;n&#x27;, &#x27;m&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;u&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h2><p>字符串和array的使用频率差不了太多，因此也需要单独记忆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;www.BaiDu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// length</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="title function_">toLowerCase</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="title function_">toUpperCase</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取特定位置的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打散转化为数组</span></span><br><span class="line"><span class="keyword">let</span> strArr = [...web]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为int</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="built_in">parseInt</span>(<span class="string">&quot;168&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替代</span></span><br><span class="line"><span class="keyword">let</span> str1 = web.<span class="title function_">replaceAll</span>(<span class="string">&quot;co&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;替换全部&quot;</span>, str1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = web.<span class="title function_">replace</span>(<span class="string">&quot;co&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;替换第一个出现&quot;</span>, str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉两侧指定字符</span></span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">&quot;   baidu.com   &quot;</span>.<span class="title function_">trim</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否包含某个字符串</span></span><br><span class="line"><span class="keyword">let</span> result = web.<span class="title function_">includes</span>(<span class="string">&quot;Baidu&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是否包含某个字符串:&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字符串中第一次出现某个字符串的位置,若不存在则返回-1</span></span><br><span class="line"><span class="keyword">let</span> result2 = web.<span class="title function_">indexOf</span>(<span class="string">&quot;Baidu&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回字符串中第一次出现某个字符串的位置:&quot;</span>, result2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个字符串是否以指定的前缀开头</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="string">&quot;www.baidu.com&quot;</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;www&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断一个字符串是否以指定的前缀开头:&quot;</span>, result4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个字符串是否以指定的后缀结尾</span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="string">&quot;www.baidu.com&quot;</span>.<span class="title function_">endsWith</span>(<span class="string">&quot;net&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;判断一个字符串是否以指定的后缀结尾:&quot;</span>, result5)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串分割为数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="string">&quot;a,b,c,d&quot;</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;将字符串按照指定字符分割成数组:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串截取 substr(开始位置,截取长度)</span></span><br><span class="line"><span class="keyword">let</span> subStr = web.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">7</span>) <span class="comment">//dengrui</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;截取字符串的前7个字符:&quot;</span>, subStr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// subString不接收负数</span></span><br><span class="line"><span class="keyword">let</span> subStr2 = web.<span class="title function_">substring</span>(web.<span class="property">length</span> - <span class="number">3</span>) <span class="comment">//com</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;截取字符串的最后3个字符:&quot;</span>, subStr2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subStr3 = web.<span class="title function_">substring</span>(<span class="number">4</span>) <span class="comment">//baidu.com [字符串下标是从 0 开始]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从字符串的第5个位置开始截取直至字符串末尾:&quot;</span>, subStr3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//重复字符串</span></span><br><span class="line"><span class="keyword">let</span> repeatstr = <span class="string">&quot;David&quot;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;重复3次字符串&quot;</span>, repeatstr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在字符串前添加指定数量的填充字符, 直到该字符串达到指定的长度</span></span><br><span class="line"><span class="keyword">let</span> padStart = <span class="string">&quot;David&quot;</span>.<span class="title function_">padStart</span>(<span class="number">15</span>, <span class="string">&quot;-&quot;</span>) <span class="comment">//由于 David 占 5 个字符, 因此只需要再添加 10 个横线, 即可达到总长度 15</span></span><br><span class="line"><span class="comment">//let padStart = &quot;David&quot;.padStart(15) //默认空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;padStart:&quot;</span>, padStart)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在字符串后添加指定数量的填充字符, 直到该字符串达到指定的长度</span></span><br><span class="line"><span class="keyword">let</span> padEnd = <span class="string">&quot;David&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">15</span>, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;padEnd:&quot;</span>, padEnd)</span><br></pre></td></tr></table></figure><h2 id="集合-Map"><a href="#集合-Map" class="headerlink" title="集合 Map"></a>集合 Map</h2><p>Map集合存储键值对的数组，使用键值对来存储信息。下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> website = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;百度&quot;</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;谷歌&quot;</span>, <span class="string">&quot;https://www.google.com&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;bing&quot;</span>, <span class="string">&quot;https://www.bing.com&quot;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的都是可迭代对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(website.<span class="title function_">keys</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(website.<span class="title function_">values</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(website.<span class="title function_">entries</span>());</span><br></pre></td></tr></table></figure><p>打印的输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Map Iterator] &#123; <span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;谷歌&#x27;</span>, <span class="string">&#x27;bing&#x27;</span> &#125;</span><br><span class="line">[Map Iterator] &#123;</span><br><span class="line">  <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;https://www.google.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;https://www.bing.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">[Map Entries] &#123;</span><br><span class="line">  [ <span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;https://www.baidu.com&#x27;</span> ],</span><br><span class="line">  [ <span class="string">&#x27;谷歌&#x27;</span>, <span class="string">&#x27;https://www.google.com&#x27;</span> ],</span><br><span class="line">  [ <span class="string">&#x27;bing&#x27;</span>, <span class="string">&#x27;https://www.bing.com&#x27;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些常见的操作如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储键值对的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> teacher = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;gcnanmu&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;man&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;web&quot;</span>, <span class="string">&quot;baidu.com&quot;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add</span></span><br><span class="line">teacher.<span class="title function_">set</span>(<span class="string">&quot;height&quot;</span>, <span class="number">175</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete</span></span><br><span class="line">teacher.<span class="title function_">delete</span>(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// has</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="title function_">has</span>(<span class="string">&quot;gender&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="title function_">has</span>(<span class="string">&quot;web&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// edit</span></span><br><span class="line"><span class="comment">// 每个键都是唯一的</span></span><br><span class="line">teacher.<span class="title function_">set</span>(<span class="string">&quot;web&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">size</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// change to array</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(teacher)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [...teacher]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 将键值对转化为数组并打印</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> teacher) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"><span class="comment">// 有键值对可以进行解构</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> teacher) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// each 记住index是写在后面的</span></span><br><span class="line">teacher.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear</span></span><br><span class="line">teacher.<span class="title function_">clear</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br></pre></td></tr></table></figure><h2 id="对象-object"><a href="#对象-object" class="headerlink" title="对象 object"></a>对象 object</h2><p>这个对象挺像Python中的dict，更像Python的数据类（@dataclass），使用.来获取属性值，它是不可迭代的，写法也很简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> teacher = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="attr">web</span>: <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add</span></span><br><span class="line">teacher.<span class="property">height</span> = <span class="number">175</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// edit</span></span><br><span class="line">teacher.<span class="property">web</span> = <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete</span></span><br><span class="line"><span class="keyword">delete</span> teacher.<span class="property">gender</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br><span class="line"></span><br><span class="line"><span class="comment">// container</span></span><br><span class="line"><span class="keyword">let</span> has = <span class="string">&quot;gender&quot;</span> <span class="keyword">in</span> teacher</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(has)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> has2 = <span class="string">&quot;name&quot;</span> <span class="keyword">in</span> teacher</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(has2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印对象的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(teacher));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(teacher).<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="comment">// 不可以使用of进行 因为不可迭代</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> teacher) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;for……in key&quot;</span>, key, teacher[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为键值对数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(teacher));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(teacher).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foreach &quot;</span>,key, value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear</span></span><br><span class="line">teacher =  &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher)</span><br></pre></td></tr></table></figure><h2 id="类和私有属性-class"><a href="#类和私有属性-class" class="headerlink" title="类和私有属性 class"></a>类和私有属性 class</h2><p>类是面向对象的起始方法，用于将具有相同属性或相同方法的数据结构放在一起,一般来说构造方法（constructor）内都是可访问的数据，也可以使用语法将其私有化。</p><p>方法有两种：</p><ol><li>变量名前加#，此方法前面不能加this</li><li>变量前加_</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    #web = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="comment">// 将age设为私有变量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加上后私有变量就会失效</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">web</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#web;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">web</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#web = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使外界能够访问私有变量</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法和Python十分相似，甚至私有化也非常相似。</p><h2 id="类的继承-extends"><a href="#类的继承-extends" class="headerlink" title="类的继承 extends"></a>类的继承 extends</h2><p>在数学中，集合与集合之间肯定存在交集的情况，类与类也是类似，比如我属于Person类，我有人一些共有的属性，比如我要吃饭和睡觉，这时候就不需要再重写编写相应的函数，只需要从父类中继承即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name</span><br><span class="line">    gender</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>休息中……`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Me</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    web</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, gender, web</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, gender);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">web</span> = web</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在吃饭……`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在睡觉……`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Me</span>(<span class="string">&quot;wo&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">eat</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">sleep</span>())</span><br></pre></td></tr></table></figure><p>打印的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wo</span><br><span class="line">wo在吃饭……</span><br><span class="line">wo在睡觉……</span><br></pre></td></tr></table></figure><h2 id="解构-属性名"><a href="#解构-属性名" class="headerlink" title="解构 {属性名}"></a>解构 {属性名}</h2><p>解构的作用是将对象中的部分元素或者数组通过命名提取的方法来取出个别元素（可非连续）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组并赋值给x，y</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x:<span class="subst">$&#123;x&#125;</span> y:<span class="subst">$&#123;y&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, , c] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [A, ...B] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A, B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x2, y2 = <span class="number">200</span>] = [<span class="number">100</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x2, y2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数交换</span></span><br><span class="line"><span class="keyword">let</span> x3 = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> y3 = <span class="number">20</span>;<span class="comment">// 不加分号会报错</span></span><br><span class="line">[x3, y3] = [y3, x3]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象结构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="attr">web</span>: <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了对象重命名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: userName, gender, web&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userName, gender, web)</span><br></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>promise是异步编程操作函数，和Python的try用法相同。promise是通过fulfilled和reject来判断是否成功运行，当然也可以直接不写，交给函数来判断。</p><ul><li>fulfill - 走then（resolve）</li><li>reject - 走catch（reject）</li><li>pending  - 正在处理中</li><li>finally - 无论是fulfill还是reject都会执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接拼接在一起</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fulfilled-执行成功 可以进一步执行then函数</span></span><br><span class="line">    <span class="comment">// resolve(&quot;还钱了&quot;)</span></span><br><span class="line">    <span class="comment">// reject - 执行错误 可以进一步进入catch函数</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;没有还钱&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回的结果就是resolve中的结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步执行结束&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不写</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步执行结束&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 是用于异步网络请求的函数，可以用来获取或发送数据，接收后会返回promise对象。常见的请求方式有get和post两种，因为网络中一般都发送json格式的数据，接收后还需要转化一下格式。</p><p>这里需要展示一下API请求工具，来自邓瑞。</p><p>访问<a href="http://127.0.0.1/get%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A">http://127.0.0.1/get可看到数据的格式：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;邓瑞&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;web&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dengruicode.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get请求&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>data为具体的数据，msg为请求的描述，status用来展示请求是否有效</p><ul><li><p>获取接收get请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost/get&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get-data&quot;</span>, data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get-error&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get-finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发送post请求</p><p>post请求一般是键值对的形式，可以使用<code>URLSearchParams</code>来获得键值对数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 显示定义</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//URLSearchParams 用于处理键值对类型的数据,并将其编码为url查询字符串</span></span><br><span class="line">    <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">        <span class="attr">web</span>: <span class="string">&#x27;baidu.com&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.data:&quot;</span>, data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.error:&quot;</span>, error.<span class="property">message</span>)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果想要直接获得Json数据，可以使用<code>JSON.stringify</code>对象，且在于请求头请求类型不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json参数</span></span><br><span class="line"><span class="comment">//post请求 postJson</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/postJson&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="comment">//JSON.stringify 用于将对象转换为json字符串</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">        <span class="attr">web</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.data:&quot;</span>, data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.error:&quot;</span>, error.<span class="property">message</span>)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js其实是JavaScript的一个解释器，npm则是Node Package Manager的缩写，就是一个Node.js的一个管理包的工具，网站为<a href="https://www.npmjs.com/">npmjs.com</a>，可以从上面下载包，也可以使用命令进行下载。</p><p>下载Node.js,LTS是稳定版，Current是最新发行版。</p><blockquote><p><a href="https://nodejs.org/en/download">Node.js — Download Node.js® (nodejs.org)</a></p></blockquote><p>下载后使用下面的命令查看node.js版本和npm版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看当前npm的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><blockquote><p>默认输出是 <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p></blockquote><p>和Python一样，如果想要访问默认的镜像源下载，很容易出现超时的问题，这里推荐更换镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><p>这里更换的是淘宝的镜像源。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>axios是基于promise的请求库，他可以发送http请求并接受服务器返回相应的数据，返回的是一个Promise对象 既可以应用于浏览器，也可用于[Node.js](<a href="https://nodejs.org/en">Node.js — Run JavaScript Everywhere (nodejs.org)</a>)。</p><p>可以通过npm命令进行下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>可能发现下载了很多模块，只需要导入名为<code>axios.min.js</code>文件即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以直接使用cdn</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>获取get</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不需要再返回json格式 默认就是json格式</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取post请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post请求 post</span></span><br><span class="line"><span class="keyword">let</span> data = &#123; <span class="comment">//参数</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">    <span class="attr">web</span>: <span class="string">&#x27;baidu.com&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要再将数据转化为json字符串 直接传递</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1/post&#x27;</span>, data, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.error:&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为axios 的默认请求头是 application&#x2F;json，因此可以不用指定headers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1/postJson&#x27;</span>, data).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.error:&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;postJson.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块化开发-export-import"><a href="#模块化开发-export-import" class="headerlink" title="模块化开发 export import"></a>模块化开发 export import</h2><p>模块化开发的本质就是将需要使用的数据或方法使用export导出，后续就可以在其他js中使用import导入export导出的数据或者方法</p><p>先创建一个index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="string">&quot;百度&quot;</span></span><br><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getWeb</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`title: <span class="subst">$&#123;title&#125;</span>, web: <span class="subst">$&#123;web&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;title,web,getWeb&#125; </span><br></pre></td></tr></table></figure><p>后续便可以在html模版中导入（Node.js不支持在模版之外的其他地方使用import）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;title <span class="keyword">as</span> webTitle, web, getWeb&#125; <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(webTitle)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(web)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getWeb</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想要将导入的数据作为一个对象整体使用可以在导入时候作为一个obj：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">web</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getWeb</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以修改index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="string">&quot;百度&quot;</span></span><br><span class="line"><span class="keyword">let</span> web = <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getWeb</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`title: <span class="subst">$&#123;title&#125;</span>, web: <span class="subst">$&#123;web&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;title,web,getWeb&#125; </span><br></pre></td></tr></table></figure><p>后续就可以直接导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">web</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getWeb</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异步-async"><a href="#异步-async" class="headerlink" title="异步 async"></a>异步 async</h2><p>async关键字一般要配合await关键字使用，用来完成异步请求操作。使用异步的好处是不会因为等待耗时的操作而影响主线程的执行（主线程阻塞）。可以使用同步的方式编写异步代码。</p><ol><li>当一个函数被标记为async后，该函数会返回一个Promise对象</li><li>await只能在async内部使用，加上await关键字后，会执行到这一行暂停函数的部分</li><li>等到网络请求完成，然后继续执行并获取到请求返回的数据</li></ol><p>非异步操作的话是这样写的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;https://localhost/get&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get_data&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get_error&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果使用异步关键字，可改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://localhost/get&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.data&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get_error&quot;</span>, error)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><p>还有一个作用是避免回调地狱，。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">web</span> == <span class="string">&quot;dengruicode.com&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get请求2</span></span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/id/1&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response2</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get2.data:&quot;</span>, response2.<span class="property">data</span>)</span><br><span class="line">            <span class="keyword">if</span> (response2.<span class="property">data</span>.<span class="property">data</span>.<span class="property">name</span> == <span class="string">&quot;邓瑞&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//get请求3</span></span><br><span class="line">                <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/search/title/入门&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response3</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get3.data:&quot;</span>, response3.<span class="property">data</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error:&quot;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用async和wait后会变成如下，简洁了不少：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//async/await 使用同步的方式编写异步代码, 避免回调地狱</span></span><br><span class="line"><span class="comment">//优势 在处理多个异步操作的情况下, 可以使代码更简洁易读</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//get请求</span></span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/get&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.data:&quot;</span>, response.<span class="property">data</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">web</span> === <span class="string">&quot;dengruicode.com&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//get请求2</span></span><br><span class="line">            <span class="keyword">const</span> response2 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/id/1&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get2.data:&quot;</span>, response2.<span class="property">data</span>)</span><br><span class="line">            <span class="keyword">if</span> (response2.<span class="property">data</span>.<span class="property">data</span>.<span class="property">name</span> === <span class="string">&quot;邓瑞&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//get请求3</span></span><br><span class="line">                <span class="keyword">const</span> response3 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1/article/get/search/title/入门&#x27;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get3.data:&quot;</span>, response3.<span class="property">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.error:&quot;</span>, error)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async.get.finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-基础语法笔记</title>
      <link href="/post/vue-xue-xi-bi-ji/"/>
      <url>/post/vue-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于写完了毕业论文，匆忙的一天突然空闲下来，终于有时间将前期学习的东西作为笔记搬上博客了。这个月发生了很多事，下面这些Vue的相关知识也是我在匆忙之中学习的，有错误的请见谅。</p><h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><p>简单来说就是一个JavaScript框架，但是他有个特点叫<strong>渐进式</strong>，即不需要一次性学会所有的内容，可以根据需要选择学习，是一个易学易用，性能出色，使用场景丰富的Web前端框架。相比于React，它关注于数据的流向，而不是数据的样式。</p><blockquote><p><a href="https://cn.vuejs.org/">Vue.js - 渐进式 JavaScript 框架 | Vue.js (vuejs.org)</a></p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>和我们学其他前端一样，可以使用线上的CND链接，也可以下载后使用离线的版本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--CDN的形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里是非min的形式，也可以下载min的形式（本质就是将换行去除）</p><p>然后就可以开始创建Vue应用，都是固定的写法，最后的<code>mount(&quot;#app&quot;)</code>别忘写，他确实容易让人忘记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue3.global.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    插值表达式--&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;web.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import &#123;createApp, reactive, ref&#125; from &quot;vue&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> msg = <span class="title class_">Vue</span>.<span class="title function_">ref</span>(<span class="string">&quot;success&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title class_">Vue</span>.<span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">web</span>: web,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: msg</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你熟悉ES6，那么还可以使用解构的写法，将<code>createApp</code>, <code>reactive</code>结构出来，这样就可以不用再写Vue这个前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值语法 去除Vue</span></span><br><span class="line"><span class="keyword">const</span> &#123;createApp, reactive&#125; = <span class="title class_">Vue</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">// setup选项 用于设置响应式数据与方法</span></span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 返回是一个对象 使用reactive</span></span><br><span class="line">        <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;gcnanmucode&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">web</span>: web</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br><span class="line"><span class="comment">// 与id进行绑定</span></span><br></pre></td></tr></table></figure><p>这边出现了模版语法和响应式数据的知识，我们在后面会学习到，对于模版插值语法，使用过后端框架的人应该已经见过了。</p><h2 id="模块化开发-import"><a href="#模块化开发-import" class="headerlink" title="模块化开发 import"></a>模块化开发 import</h2><p>上述创建vue应用的时候都是使用<code>vue3.global.js</code>全局导入的，但是有时候我们并不需要使用它全部的模块，学过es6之后我们了解到相关模块可以使用<code>import</code>按需导入。如果想要使用按需导入可以使用<code>vue.esm-browser.js</code>这个js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.esm-browser.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开文件划到最下面可以发现<code>export</code>，导出了所有的模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123; &#123; msg &#125; &#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                web</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><p>又称模版语法，是一种用来在html标签中给数据占位的一种语法。在vue中常用的有三种</p><ol><li><p>文本插值 <code>&#123; &#123; &#125; &#125;</code> 默认是纯文本的形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>纯文本数据 v-text 和<code>&#123;&#123;&#125;&#125;</code>的用法很像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>原始HTML v-html 会将文本渲染为HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    以前都是使用插值表达式来实现数据站位--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    vue中提供了v-text和v-html来实现数据的渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;web.title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">&quot;web.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;&lt;i style=&#x27;color:red;&#x27;&gt;www.baidu.com&lt;/i&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                web</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式数据-ref-reactive"><a href="#响应式数据-ref-reactive" class="headerlink" title="响应式数据 ref reactive"></a>响应式数据 ref reactive</h2><p>基本语法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> number = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>响应式数据顾名思义，通俗的理解就是源数据会顺应实时修改而变化，如果学过其他编程语言，我觉得可以理解成js封装好的特殊对象。</p><p>有两种形式：</p><ol><li>ref 用于存储基本的数据类型 这并不意味着ref只能存储单个数据，如果想要修改响应式数据的值，需要使用<code>value</code>属性。</li><li>reactive 用于存储复杂的数据类型 <strong>可以直接修改其中的值</strong>。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;arr&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive, ref&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ref用于存储基本的数据类型 单个类型的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> number = <span class="title function_">ref</span>(<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改值</span></span></span><br><span class="line"><span class="language-javascript">            number.<span class="property">value</span> = <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> arr = <span class="title function_">ref</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span></span><br><span class="line"><span class="language-javascript">            arr.<span class="property">value</span>[<span class="number">1</span>] = <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// reactive用于存储复杂的数据类型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&quot;邓睿编程&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;dengruicode.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            web.<span class="property">url</span> = <span class="string">&quot;www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                number,</span></span><br><span class="line"><span class="language-javascript">                arr</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态属性绑定-v-bind"><a href="#动态属性绑定-v-bind" class="headerlink" title="动态属性绑定 v-bind"></a>动态属性绑定 v-bind</h2><p>以input标签作为例子，指令书写的格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以缩写为<code>:</code>，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.textColor</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>dengruicode<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dengruicode.com&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind:value=&quot;web.url&quot;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>src=&quot;./img/二专.jpg&quot;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/二专.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind:src=&quot;web.url&quot;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;web.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>class=&quot;textColor&quot;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;textColor&quot;</span>&gt;</span>邓瑞编程<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>:class=&quot;&#123;textColor:web.fontStatus&#125;&quot;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;textColor:web.fontStatus&#125;&quot;</span>&gt;</span>邓瑞编程<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;wwww.dengruicode.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">img</span>: <span class="string">&quot;./img/二专.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontStatus</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                web</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件绑定-v-on"><a href="#事件绑定-v-on" class="headerlink" title="事件绑定 v-on"></a>事件绑定 v-on</h2><p>以button标签为例子，语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可缩写为@--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>click</code>来监听DOM的点击事件的，本质就是使用了将js原生的一些方法绑定到Vue函数上，如果你的处理比较简单，还可以直接使用内联式，在html标签处就完成操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果还想要同时传入数据和原生DOM事件，可以使用<code>$event</code>变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用特殊的 $event 变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用内联箭头函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;(event) =&gt; warn(&#x27;Form cannot be submitted yet.&#x27;, event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">warn</span>(<span class="params">message, event</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里可以访问原生事件</span></span><br><span class="line">  <span class="keyword">if</span> (event) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">alert</span>(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue甚至还提供了对键盘的监听，比较常见的有两种:</p><ol><li>keydown 按下键盘就触发</li><li>keyup 按下后回弹才触发</li></ol><p>在<code>keydown</code>和<code>keyup</code>后面可以添加键盘字符名，以下是一些常见的字符键盘：</p><table><thead><tr><th>别名</th><th>说明</th></tr></thead><tbody><tr><td><code>.enter</code></td><td>回车</td></tr><tr><td><code>.tab</code></td><td>tab</td></tr><tr><td><code>.delete</code></td><td>delete和backspace</td></tr><tr><td><code>.esc</code></td><td>esc</td></tr><tr><td><code>.space</code></td><td>空格</td></tr><tr><td><code>.ctrl</code></td><td>ctrl</td></tr><tr><td><code>.alt</code></td><td>alt</td></tr><tr><td><code>.meta</code></td><td>在 Mac 键盘上，meta 是 Command 键 (⌘)。在 Windows 键盘上，meta 键是 Windows 键 (⊞)</td></tr></tbody></table><p>以上的监听是非严格监听，意思是如果你按下其中某一个键，其余的键同时按下也会触发，如果想要严格监听，可以在末尾加上<code>.exact</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看了上面的例子，你应该明白他也支持组合键监听</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;add(40, 60)&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;web.user&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>@修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--keydown是按下就直接触发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;add(40,60)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    回车<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add(40,60)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    空格 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.space</span>=<span class="string">&quot;add(20, 30)&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Tab <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.tab</span>=<span class="string">&quot;add(10, 20)&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    w <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.w</span>=<span class="string">&quot;add(5, 10)&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 组合快捷键 --&gt;</span></span><br><span class="line">    Ctrl + Enter <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;add(40, 60)&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Ctrl + A <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.a</span>=<span class="string">&quot;add(20, 30)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;dengruicode.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">url</span> = <span class="string">&quot;www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">user</span> += a + b</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                edit,</span></span><br><span class="line"><span class="language-javascript">                add</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="显示与隐藏-v-show"><a href="#显示与隐藏-v-show" class="headerlink" title="显示与隐藏 v-show"></a>显示与隐藏 v-show</h2><p>以input标签作为例子，语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本质上是通过操作css属性中的display属性来控制标签的显示与否，需要传入一个布尔值，如果为true就显示，false即不显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;web.show&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- v-show本质是生成了css的display属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>gcnanmu学Vue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>切换显示状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">show</span> = !web.<span class="property">show</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                toggle</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染-v-if"><a href="#条件渲染-v-if" class="headerlink" title="条件渲染 v-if"></a>条件渲染 v-if</h2><p>以p标签作为例子，语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;web.user &lt; 1000&quot;</span>&gt;</span>新网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;web.user &gt;= 1000 &amp;&amp; web.user &lt; 10000&quot;</span>&gt;</span>优秀网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>资深网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个语法和<code>v-show</code>很像，如果不满足判断的条件就会不显示标签，<strong>但是这与v-show操作display属性不太一样，他会直接将标签删除</strong>，因此会造成很大的性能开销。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;web.show&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>百度 baidu.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    相比v-show v-if直接将元素进行了剔除--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    不适合频繁切换元素的显示状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;web.show&quot;</span>&gt;</span>github github.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>切换显示状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;web.user &lt; 1000&quot;</span>&gt;</span>新网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;web.user &gt;= 1000 &amp;&amp; web.user &lt; 10000&quot;</span>&gt;</span>优秀网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>资深网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> web = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>: <span class="number">20000</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                web.<span class="property">show</span> = !web.<span class="property">show</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                web,</span></span><br><span class="line"><span class="language-javascript">                toggle</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="遍历-v-for"><a href="#遍历-v-for" class="headerlink" title="遍历 v-for"></a>遍历 v-for</h2><p>以li标签作为例子，语法如下：</p><p>对于数组对象，可以拿到index和value两个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.number&quot;</span>&gt;</span></span><br><span class="line">        index:&#123;&#123;index&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于自定义对象，可以拿到index,key,index三个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in data.user&quot;</span>&gt;</span></span><br><span class="line">        index:&#123;&#123;index&#125;&#125; key:&#123;&#123;key&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in data.number&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.number&quot;</span>&gt;</span></span><br><span class="line">            index:&#123;&#123;index&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in data.user&quot;</span>&gt;</span></span><br><span class="line">            key:&#123;&#123;key&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in data.user&quot;</span>&gt;</span></span><br><span class="line">            index:&#123;&#123;index&#125;&#125; key:&#123;&#123;key&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in data.user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">&quot;index == 1&quot;</span>&gt;</span></span><br><span class="line">                index:&#123;&#123;index&#125;&#125; key:&#123;&#123;key&#125;&#125; value:&#123;&#123;value&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用动态属性来设定标签属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">:title</span>=<span class="string">&quot;value.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;value.id&quot;</span>&gt;</span></span><br><span class="line">                index:&#123;&#123;index&#125;&#125; id:&#123;&#123;value.id&#125;&#125; name:&#123;&#123;value.name&#125;&#125; web:&#123;&#123;value.web&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">number</span>: [<span class="string">&quot;十&quot;</span>, <span class="string">&quot;十一&quot;</span>, <span class="string">&quot;十二&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;gcnanmu&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">teacher</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;百度&quot;</span>, <span class="attr">web</span>: <span class="string">&quot;baidu.com&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;码云&quot;</span>, <span class="attr">web</span>: <span class="string">&quot;gitee.com&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双向数据绑定-v-model"><a href="#双向数据绑定-v-model" class="headerlink" title="双向数据绑定 v-model"></a>双向数据绑定 v-model</h2><p>虽然<code>ref</code>和<code>reactive</code>确保了数据的响应式，但是它们本身并不实现自动收集用户输入并更新状态的逻辑。<code>v-model</code>正是为了简化这个过程：它自动更新绑定的响应式变量，无需手动编写事件监听器和数据更新逻辑。这对于表单数据的绑定尤其有用，可以极大简化代码。</p><p>区别在于</p><ul><li>单向数据绑定 当数据发生改变时, 视图会自动更新. 但用户手动更改 input 的值, 数据不会自动更新</li><li>双向数据绑定 当数据发生改变时, 视图会自动更新. 当用户手动更改 input 的值, 数据也会自动更新</li></ul><p>以input标签作为例子，语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框：&#123;&#123;data.text&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单选框：&#123;&#123;data.radio&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>多选框：&#123;&#123;data.checkbox&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>记住密码：&#123;&#123;data.remember&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框：&#123;&#123;data.select&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    单项数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;data.text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    双向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>写作<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span>&gt;</span>写作</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span>&gt;</span>画画</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkbox&quot;</span>&gt;</span>编程</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.remember&quot;</span>&gt;</span>记住密码</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.select&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>写作<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&quot;dengruicode.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">radio</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checkbox</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">remember</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">select</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h2><p><code>computed</code>是Vue中一个新的数据类型，语法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sub = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="property">x</span> - data.<span class="property">y</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>他作用是为计算添加本地缓存，相比无缓存的计算，如果出现相同的计算表达式，就不需要重复计算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>add:&#123;&#123;add()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>add:&#123;&#123;add()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>add:&#123;&#123;sub&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>add:&#123;&#123;sub&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果不使用v-model.number返回的值是str类型--&gt;</span></span><br><span class="line">    x <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;data.x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    y <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;data.y&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive, computed&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">x</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">y</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 无缓存</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add&quot;</span>) <span class="comment">// 打印两次</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> data.<span class="property">x</span> + data.<span class="property">y</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 有缓存 计算属性根据其依赖的响应式数据发生变化而重新计算</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 有缓存不需要重复计算</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> sub = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sub&quot;</span>) <span class="comment">//打印一次</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> data.<span class="property">x</span> - data.<span class="property">y</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data,</span></span><br><span class="line"><span class="language-javascript">                add,</span></span><br><span class="line"><span class="language-javascript">                sub</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="监听器-watch"><a href="#监听器-watch" class="headerlink" title="监听器 watch"></a>监听器 watch</h2><p><code>watch</code>是Vue中一个特殊的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过监听hobby变量可以知道是否选择发生了改变</span></span><br><span class="line"><span class="title function_">watch</span>(hobby, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue&quot;</span>, newValue, <span class="string">&quot;oldValue&quot;</span>, oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听date的year变化</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> date.<span class="property">year</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldValue&quot;</span>, oldValue, <span class="string">&quot;newValue&quot;</span>, newValue)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (date.year === &quot;2024&quot;) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot;2024&quot;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newValue === <span class="string">&quot;2024&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2024&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它可以监听绑定变量的数据变化情况，需要自己手动安装指定要监听的变量或者数据，可以实时查看值是否发生变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>写作<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;date.year&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2023&quot;</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2024&quot;</span>&gt;</span>2024<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2025&quot;</span>&gt;</span>2025<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;date.month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive, ref&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;watch&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> hobby = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 爱好</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> date = <span class="title function_">reactive</span>(&#123; <span class="comment">// 日期</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">year</span>: <span class="string">&quot;2023&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">month</span>: <span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过监听可以知道是否选择发生了改变</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watch</span>(hobby, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue&quot;</span>, newValue, <span class="string">&quot;oldValue&quot;</span>, oldValue)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue === <span class="string">&quot;2&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;画画&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// JS中对象和数组是通过引用传递的，而不是通过值传递</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当修改对象或数组的值时，实际上修改的是对象或数组的引用，而不是创建一个新的对象或数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 所以，如果修改了对象或数组的值，那么打印出来的结果则是修改后的值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watch</span>(date, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue&quot;</span>, newValue, <span class="string">&quot;oldValue&quot;</span>, oldValue)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue.<span class="property">year</span> === <span class="string">&quot;2025&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2025</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue.<span class="property">month</span> === <span class="string">&quot;11&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听某个属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watch</span>(<span class="function">() =&gt;</span> date.<span class="property">year</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldValue&quot;</span>, oldValue, <span class="string">&quot;newValue&quot;</span>, newValue)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// if (date.year === &quot;2024&quot;) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     console.log(&quot;2024&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue === <span class="string">&quot;2024&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2024&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                hobby,</span></span><br><span class="line"><span class="language-javascript">                date</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动监听器-watchEffect"><a href="#自动监听器-watchEffect" class="headerlink" title="自动监听器 watchEffect"></a>自动监听器 watchEffect</h2><p>它是相对于<code>watch</code>模块需要手动监听的特点反过来提供一种自动监听的Vue函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------ 监听开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hobby.<span class="property">value</span> == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;画画&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (date.<span class="property">year</span> == <span class="string">&quot;2025&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2025&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (date.<span class="property">month</span> == <span class="string">&quot;11&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------ 监听结束&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>他会监听网站上的所有数据变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>写作<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;date.year&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2023&quot;</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2024&quot;</span>&gt;</span>2024<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2025&quot;</span>&gt;</span>2025<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;date.month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive, ref, watchEffect&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> hobby = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 爱好</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> date = <span class="title function_">reactive</span>(&#123; <span class="comment">// 日期</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">year</span>: <span class="string">&quot;2023&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">month</span>: <span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//自动监听</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 网页已加载就会自动执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------ 监听开始&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (hobby.<span class="property">value</span> == <span class="string">&quot;2&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;画画&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (date.<span class="property">year</span> == <span class="string">&quot;2025&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2025&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (date.<span class="property">month</span> == <span class="string">&quot;11&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------ 监听结束&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                hobby,</span></span><br><span class="line"><span class="language-javascript">                date</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue案例"><a href="#Vue案例" class="headerlink" title="Vue案例"></a>Vue案例</h2><p>学了很多知识后，为了方便融汇贯通最好还是要做点综合案例来检测自己的学习的知识是否牢固。</p><h3 id="图片轮播图"><a href="#图片轮播图" class="headerlink" title="图片轮播图"></a>图片轮播图</h3><p>在没有使用前端框架的时候，我们需要大段的js代码去修改图片的链接，但是有了Vue之后，代码就显得非常简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">&quot;当前为num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=`<span class="attr">.</span>/<span class="attr">img</span>/$&#123;<span class="attr">num</span>&#125;<span class="attr">.png</span>` <span class="attr">:alt</span>=<span class="string">&quot;num&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    $event.target是得到触发事件后的元素本身即input标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;jump($event.target.value)&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in 4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;jump(value)&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, ref&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (num.<span class="property">value</span> &lt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (num.<span class="property">value</span> &gt;= <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">jump</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> numValue = <span class="built_in">parseInt</span>(value); <span class="comment">// 将输入的字符串转换为数字</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="built_in">isNaN</span>(numValue)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>; <span class="comment">// 如果转换结果是 NaN，则不做任何操作</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (numValue &gt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = <span class="number">4</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numValue &lt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    num.<span class="property">value</span> = numValue; <span class="comment">// 确保 num.value 被更新为数字类型的值</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                num,</span></span><br><span class="line"><span class="language-javascript">                add,</span></span><br><span class="line"><span class="language-javascript">                sub,</span></span><br><span class="line"><span class="language-javascript">                jump</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h3><p>如果是在使用vue框架之前，如果想要完成一个todolist的效果，需要使用大量的js操作dom的函数，但是有了vue之后，我们只需要通过双向数据绑定操作原本的数据，再将数据通过v-for来展示在界面上即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.list&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;value&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;data.list.length&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>: <span class="string">&quot;邓瑞编程&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [<span class="string">&quot;baidu.net&quot;</span>, <span class="string">&quot;www.github.com&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将文本输入框的值绑定为一个数据双向绑定的值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span>.<span class="title function_">push</span>(data.<span class="property">content</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">list</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span> = []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data,</span></span><br><span class="line"><span class="language-javascript">                add,</span></span><br><span class="line"><span class="language-javascript">                del,</span></span><br><span class="line"><span class="language-javascript">                clear</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>这个案例就稍微复杂很多，加入了多选框之后要判断的情况会较多，但是依然能体会到vue框架的便捷之处。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8f8e8e</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">thead</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#F5F5F5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.selected&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;selectAll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>库存<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 相邻边框合并为单一边框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从 data.list 中删除一个项目时，Vue.js 的响应式系统会自动更新 DOM，以反映数据的变化。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.list&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  需要特定的value作为唯一的标识  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  Vue.js 内部会根据 v-model 绑定的数组和当前复选框的值来决定复选框是否应该被勾选  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkboxList&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkSelect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.stock&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(value)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                &#123;&#123;value.number&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(value)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index,value.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总价&#123;&#123;totalPrice()&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">selectAll</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">selected</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">selected</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">checkboxList</span> = data.<span class="property">list</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">checkboxList</span> = []</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果商品被删完了就取消全选状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">checkSelect</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">checkSelect</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">checkboxList</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里要注意购物车为空的情况</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">checkboxList</span>.<span class="property">length</span> === data.<span class="property">list</span>.<span class="property">length</span> &amp;&amp; data.<span class="property">list</span>.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">selected</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">selected</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index, id</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 其实是不用自己去删除checklist中的数据的</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 由于 data.checkboxList 是通过 v-model 与复选框绑定的，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.js 会自动处理 data.checkboxList 与复选框的同步。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当 data.list 更新时，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.js 会检查 data.checkboxList 中的每一项是否仍然存在于 data.list 中，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果不存在，相应的复选框将不再被勾选。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">selected</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checkboxList</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;铅笔&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;鼠标&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;键盘&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">totalPrice</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">checkboxList</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    total += data.<span class="property">checkboxList</span>[i].<span class="property">price</span> * data.<span class="property">checkboxList</span>[i].<span class="property">number</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> total</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (value.<span class="property">number</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    value.<span class="property">number</span>--</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (value.<span class="property">number</span> &lt; value.<span class="property">stock</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    value.<span class="property">number</span>++</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data,</span></span><br><span class="line"><span class="language-javascript">                selectAll,</span></span><br><span class="line"><span class="language-javascript">                checkSelect,</span></span><br><span class="line"><span class="language-javascript">                totalPrice,</span></span><br><span class="line"><span class="language-javascript">                sub,</span></span><br><span class="line"><span class="language-javascript">                add,</span></span><br><span class="line"><span class="language-javascript">                del</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="购物车（优化）"><a href="#购物车（优化）" class="headerlink" title="购物车（优化）"></a>购物车（优化）</h3><p>我们不再单独写函数来处理数据的变化，使用watch函数来监听数据的变化并做出反应：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#8f8e8e</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">thead</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#F5F5F5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;td&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;data.selected&quot; @change=&quot;selectAll&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>库存<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从 data.list 中删除一个项目时，Vue.js 的响应式系统会自动更新 DOM，以反映数据的变化。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.list&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  需要特定的value作为唯一的标识  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  Vue.js 内部会根据 v-model 绑定的数组和当前复选框的值来决定复选框是否应该被勾选  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.checkboxList&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkSelect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.stock&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(value)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                &#123;&#123;value.number&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(value)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index,value.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总价&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive, watch, computed&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index, id</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 其实是不用自己去删除checklist中的数据的</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 由于 data.checkboxList 是通过 v-model 与复选框绑定的，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.js 会自动处理 data.checkboxList 与复选框的同步。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当 data.list 更新时，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.js 会检查 data.checkboxList 中的每一项是否仍然存在于 data.list 中，</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果不存在，相应的复选框将不再被勾选。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">selected</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">checkboxList</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;铅笔&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;鼠标&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;键盘&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stock</span>: <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> totalPrice = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                * reduce：用于对数组元素中的所有元素进行迭代操作，并将每次操作累加到一个初始值上</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                * 接受两个参数：一个是累加函数、另一个是初值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                * reduce将data.checkboxList数组中的每个checkbox对象的price和number属性进行相乘</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                * 并将结果累加到初始值0上，最后返回相加的结果</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                * */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> data.<span class="property">checkboxList</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total + item.<span class="property">price</span> * item.<span class="property">number</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (value.<span class="property">number</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    value.<span class="property">number</span>--</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">value</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (value.<span class="property">number</span> &lt; value.<span class="property">stock</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    value.<span class="property">number</span>++</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watch</span>(<span class="function">() =&gt;</span> data.<span class="property">selected</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(&quot;newValue&quot;, newValue, &quot;oldValue&quot;, oldValue)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue) &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">checkboxList</span> = data.<span class="property">list</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    data.<span class="property">checkboxList</span> = []</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">watch</span>(<span class="function">() =&gt;</span> data.<span class="property">checkboxList</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue&quot;</span>, newValue, <span class="string">&quot;oldValue&quot;</span>, oldValue)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这句不用写，实际已经变为了新值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// data.checkboxList = newValue</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// selectAll,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// checkSelect,</span></span></span><br><span class="line"><span class="language-javascript">                totalPrice,</span></span><br><span class="line"><span class="language-javascript">                sub,</span></span><br><span class="line"><span class="language-javascript">                add,</span></span><br><span class="line"><span class="language-javascript">                del</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文章搜索"><a href="#文章搜索" class="headerlink" title="文章搜索"></a>文章搜索</h3><p>一般来说网页的数据都是通过API文档发送的，API中的格式一般为json格式，下面是一个通过API来实现文章搜索的案例。</p><p>请求的方式也分为get和post请求两种。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;data.type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;data.content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;search()&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in data.list&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp, reactive&#125; <span class="keyword">from</span> <span class="string">&quot;./js/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">// 搜索类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 搜索内容</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: []</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">search</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;搜索类型&quot;</span>, data.<span class="property">type</span>, <span class="string">&quot;搜索内容&quot;</span>, data.<span class="property">content</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">list</span> = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&quot;1&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> id = data.<span class="property">content</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">`http://localhost/article/get/id/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get,data&quot;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">status</span> === <span class="string">&quot;success&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                data.<span class="property">list</span>.<span class="title function_">push</span>(response.<span class="property">data</span>.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    ).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get.error&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&quot;2&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> param = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: data.<span class="property">content</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1/article/postJson/search&#x27;</span>, param).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.data&quot;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">status</span> === <span class="string">&quot;success&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    data.<span class="property">list</span>.<span class="title function_">push</span>(response.<span class="property">data</span>.<span class="property">data</span>[i])</span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    ).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;post.error&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                data,</span></span><br><span class="line"><span class="language-javascript">                search</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-正则表达式</title>
      <link href="/post/zheng-ze-biao-da-shi/"/>
      <url>/post/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离上一次更新已经是五个月以前了，时光荏苒，已经到2024年了。由于自己会的是Python，所以不太清楚自己能否找到合适的工作，思来想去还是准备学习一下前端的知识，希望能在当前艰难的大环境下生存下来。</p><p>正则表达式其实就是字符串的一个匹配规则，能方便匹配一系列符合规则的字符串，让开发效率变高，这次也是趁着学完了来做个笔记记录一下，毕竟如果后续不常用还是容易忘记。<strong>以下部分均以Javascript作为示范语言，Python语言实际也大差不差。</strong></p><p>以下是一个匹配24小时时间的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg4 = <span class="regexp">/^(([01][0-9])|([2][0123])):[0-5][0-9]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;23:59&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;00:00&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;24:00&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;23:60&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>其中<code>/^(([01][0-9])|([2][0123])):[0-5][0-9]$/</code>即为一个正则表达式。由<code>//</code>包裹，在第二个&#x2F;之后可添加修饰符来约束正则中执行的某些细节，如<code>//g</code>，表示全局匹配。</p><h2 id="常见的字符串匹配函数"><a href="#常见的字符串匹配函数" class="headerlink" title="常见的字符串匹配函数"></a>常见的字符串匹配函数</h2><p>在学习正则表达式之前，我们需要了解js中一些常用的字符串匹配方法，这样才能方便后续学习时的测试。</p><p>本段落使用的测试字符串为：<code>&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</code>，固定的正则表达式为：<code>/前端/g</code>，即在字符串中匹配前端这两个字符，g的含义为全局匹配，这里不必深究。</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>正则表达式的一个方法（并非字符串的方法，后续学习记得区分一下）。用来检测字符串是否符合正则表达式的规则，如果符合返回true，否则返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;前端开发&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;Java开发&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这边有一个注意点。</p><p>test 方法在被连续调用时会从上一次匹配的下一个位置开始查找，而不是每次都从第一个位置开始匹配，如果不注意可能会出现反常的结果，如下的一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg.<span class="title function_">test</span>(<span class="string">&#x27;前端开发,用js&#x27;</span>)</span><br><span class="line"><span class="comment">// 能匹配到可以返回true，否则返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;前端开发&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;Java开发&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这是因为test方法在被连续调用时会从上一次匹配的下一个位置开始查找，当<code>reg.test(&#39;前端开发,用js&#39;)</code>执行后，第二次调用 test 方法时将从字符串的第3个字符开始匹配，而不是从第 0 个字符开始，因此出现了反常的错误。</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>是正则表达式的一个方法，作用是查找符合规则的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(<span class="string">&quot;前端开发&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出为：<code>[ &#39;前端&#39;, index: 0, input: &#39;前端开发&#39;, groups: undefined ]</code></p><p>返回值为数组，如果匹配失败则返回<code>NULL</code>，匹配成功的返回值有三个参数：</p><ul><li>第一项为匹配到的字符串 ‘前端’</li><li>第二项为匹配到的字符串的索引 index:0</li><li>第三项为原字符串 input: ‘前端开发’</li></ul><blockquote><p>需要注意的是exec方法也会从上一次匹配的下一个位置开始查找，这点和text一样。</p></blockquote><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p><strong>是字符串的方法</strong>（不是正则表达式的方法），替换字符串中符合规则的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</span>;</span><br><span class="line">str.<span class="title function_">replace</span>(reg, <span class="string">&quot;后端&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg, <span class="string">&quot;后端&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出为<code>后端开发，必须掌握正则表达式，后端就业前景好，后端工资高</code></p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p><strong>是字符串的方法</strong>，查找符合规则的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg));</span><br></pre></td></tr></table></figure><p>输出为：<code>[ &#39;前端&#39;, &#39;前端&#39;, &#39;前端&#39; ]</code></p><p>匹配成功返回一个数组，匹配失败返回None。</p><blockquote><p>更多关注返回值是否为None，与test的区别在于方法调用对象不同，且match方法明显比test安全，也更符合一般代码逻辑。</p></blockquote><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>放在第二个&#x2F;之后，作用是约束正则中执行的某些细节，常见的有三个取值。</p><table><thead><tr><th align="center">sign</th><th align="center">function</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">执行对大小写不敏感的匹配</td></tr><tr><td align="center">g</td><td align="center">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td></tr><tr><td align="center">m</td><td align="center">执行多行匹配（应用场景较少）</td></tr></tbody></table><ol><li><p>大小写脱敏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;A&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(str)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(str)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>全局匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/前端/</span>;</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/前端/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg1)); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg2));</span><br></pre></td></tr></table></figure><ul><li>reg1:<code>[   &#39;前端&#39;,   index: 0,   input: &#39;前端开发，必须掌握正则表达式，前端就业前景好，前端工资高&#39;,    groups: undefined ]</code></li><li>reg2:<code>[ &#39;前端&#39;, &#39;前端&#39;, &#39;前端&#39; ]</code></li></ul></li><li><p>使用多个修饰符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg3 = <span class="regexp">/Java/gi</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;学Java，java工资高，java前景好&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">replace</span>(reg3, <span class="string">&quot;Python&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出为：<code>学Python，Python工资高，Python前景好</code></p></li></ol><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>即具有特殊含义的字符，给与正则表达式更加多样灵活的组合。</p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>即为规定表达式的边界部分，常见有单词边界、字符串边界、精确匹配三种情况。</p><ol><li><p>单词边界</p><p>在字符串头尾加上<code>\b</code> 构成单词的部分，如下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加上\b 构成单词的部分</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/cat/g</span>;</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/\bcat\b/g</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;The cat scattered his food all over the room.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">replace</span>(reg1, <span class="string">&quot;dog&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">replace</span>(reg2, <span class="string">&quot;dog&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>reg1:<code>The dog sdogtered his food all over the room.</code></li><li>reg2:<code>The dog scattered his food all over the room.</code></li></ul><p>可以看到由于reg1并未添加单词边界，导致scattered中的“cat”部分也会被匹配上，出现了大相径庭的结果。</p></li><li><p>字符串边界</p><p>使用<code>^</code>作为字符串的开头，<code>$</code>作为字符串的结尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg5 = <span class="regexp">/^a/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg5.<span class="title function_">test</span>(<span class="string">&quot;bcd&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg6 = <span class="regexp">/c$/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&quot;cb&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg6.<span class="title function_">test</span>(<span class="string">&quot;C&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>精确匹配</p><p>如果同时在开头与结尾加上<code>^ $</code>在一块，那么就编程了精确匹配，即字符串必须完全满足正则的全部要求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg7 = <span class="regexp">/^a$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg7.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg7.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>顾名思义，即规定字符出现的频率。</p><table><thead><tr><th align="center">sign</th><th align="center">function</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">表示0次或者多次</td></tr><tr><td align="center">+</td><td align="center">表示一次或者多次</td></tr><tr><td align="center">?</td><td align="center">表示零次与一次</td></tr><tr><td align="center">{n}</td><td align="center">只能有n次</td></tr><tr><td align="center">{n,m}</td><td align="center">表示从n到m次（包括n与m）</td></tr></tbody></table><ol><li><ul><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg8 = <span class="regexp">/^a*$/i</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg8.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg8.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><ul><li></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg8 = <span class="regexp">/^a+$/i</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg8.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg8.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg_1 = <span class="regexp">/^a?$/i</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg_1.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg_1.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>{n}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg9 = <span class="regexp">/^a&#123;3&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>{n,m}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg9 = <span class="regexp">/^a&#123;1,3&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;aaa&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>日常生活中经常出现一些字符串不同但是等效的情况，如<code>Python</code>与<code>python</code>，<code>color</code>与<code>colour</code>，广义来说即为多个字符都符合匹配要求，可以出现替换的情况。</p><p>如：<code>/[abc]/</code>，意味着我要匹配的字符串其中有a或b或c；<code>/[Pp]thon/</code>为匹配<code>Python</code>与<code>python</code>。</p><p>常见的字符类情况为：</p><table><thead><tr><th align="left">sign</th><th>function</th></tr></thead><tbody><tr><td align="left">[a-z]</td><td>表示a到z，26个小写的英文字母</td></tr><tr><td align="left">[A-Z]</td><td>表示A到Z，26个大写的英文字母</td></tr><tr><td align="left">[0-9]</td><td>表示0-9十个数字</td></tr><tr><td align="left">.</td><td>匹配除了换行符(\n与\r)外的任意一个字符</td></tr><tr><td align="left">[^]</td><td>表示取反，与[]合并使用，注意要写在[]里面</td></tr></tbody></table><p>以下是一些例子：</p><ol><li><p>密码匹配(6-16位字母、数字或者下划线组成)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/[a-zA-Z0-9_]&#123;6,16&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;123456&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;1234567&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;12345&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>替换Python为Java</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/[Pp]ython/</span>;</span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">&quot;人生苦短，我学Python&quot;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&quot;人生苦短，我学Python&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">replace</span>(reg,<span class="string">&quot;Java&quot;</span>)); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">replace</span>(reg,<span class="string">&quot;Java&quot;</span>)); </span><br></pre></td></tr></table></figure><p>输出都为：<code>人生苦短，我学Java</code></p></li><li><p>匹配爱后面没有你的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/爱[^你]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;不爱你&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;爱你一万年&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;我爱我&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>.匹配的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg14 = <span class="regexp">/./</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg14.<span class="title function_">test</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg14.<span class="title function_">test</span>(<span class="string">&quot;\n&quot;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg14.<span class="title function_">test</span>(<span class="string">&quot;\r&quot;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="预定义"><a href="#预定义" class="headerlink" title="预定义"></a>预定义</h3><p>对于一些既定的字符类来说，还有简化的写法，这些简化的写法就是预定义。</p><table><thead><tr><th>sign</th><th>Same meaning</th><th>function</th></tr></thead><tbody><tr><td>\d</td><td>[0-9]</td><td>小写数字0-9</td></tr><tr><td>\D</td><td>[^0-9]</td><td>除了数字的部分</td></tr><tr><td>\w</td><td>[a-zA-Z0-9_]</td><td>匹配任意的字母、数字、下划线</td></tr><tr><td>\W</td><td>[^a-zA-Z0-9_]</td><td>匹配任意非字母、数字、下划线</td></tr><tr><td>\s</td><td>[\t\r\n\v\f]</td><td>匹配空格（包含换行、空格、制表符）</td></tr><tr><td>\S</td><td>[^\t\r\n\v\f]</td><td>匹配非空格</td></tr></tbody></table><p><strong>大写其实就是小写的取反效果</strong>。</p><h2 id="分组与选择"><a href="#分组与选择" class="headerlink" title="分组与选择"></a>分组与选择</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组就是将数据的不同部分分开以适应不同的规则，使用<code>()</code>，每一个小括号就是一个分组。</p><p>一个经典的案例为：将日期<code>2020-10-10</code>格式转化为<code>10/10/2020</code>的格式。</p><p>此时我们就需要将匹配成功的年、月、日部分单独拿出来使用，这时候就可以使用分组的方法，匹配代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)$/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2020-10-10&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg))</span><br></pre></td></tr></table></figure><p>输出为：<code>[   &#39;2020-10-10&#39;,   &#39;2020&#39;,   &#39;10&#39;,   &#39;10&#39;,   index: 0,   input: &#39;2020-10-10&#39;,   groups: undefined ]</code></p><p>可以看到实际上match按照正则表达式分组的想法（一个小括号一组）将匹配结果分为了三组（年、月、日），其中将整个日期作为一个group匹配起来，我们称其为group0。</p><blockquote><p>2020-10-10 group0</p><p>2020 group1</p><p>10 group2</p><p>10 group3</p></blockquote><p>在replace中支持使用<code>$n</code>来获取其中的分组数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)$/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2020-10-10&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg,<span class="string">&quot;$1年$2月$3日&quot;</span>))</span><br></pre></td></tr></table></figure><p>输出为：<code>2020年10月10日</code></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>使用<code>|</code>来表示或者，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg17 = <span class="regexp">/^good|nice$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg17.<span class="title function_">test</span>(<span class="string">&quot;good&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg17.<span class="title function_">test</span>(<span class="string">&quot;nice&quot;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>与<code>[\bnice\b\bgood\b]</code>、<code>/[(nice)(good)]/</code>效果相同。</p><blockquote><p>分支与可选[]效果实际相同，但可选一般用于两者之间，而选择一般用于多者之间</p></blockquote><h3 id="非分组匹配"><a href="#非分组匹配" class="headerlink" title="非分组匹配"></a>非分组匹配</h3><p>在正则表达式中用于将多个表达式组合成一个单元，但是与普通的括号不同，它不会保存匹配的内容用于后续的引用。这意味着你可以使用非捕获组来应用量词（如 <code>+</code> 或 <code>*</code>）到整个组合的模式上，而不会捕获该组的匹配结果。</p><p>我的理解是帮助你找出成对或组合的模式出现的次数，但不需要具体的捕获内容。</p><p>以下是一个捕获HTML标签的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;This is a &lt;b&gt;bold&lt;b&gt; word and this is an &lt;i&gt;italic&lt;/i&gt; word.&quot;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(?:&lt;.&gt;)/g</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">match</span>(reg))</span><br></pre></td></tr></table></figure><p>输出为<code>[ &#39;&lt;b&gt;&#39;, &#39;&lt;b&gt;&#39;, &#39;&lt;i&gt;&#39; ]</code></p><blockquote><p>个人感觉这个东西没什么用</p></blockquote><h2 id="一些零碎知识"><a href="#一些零碎知识" class="headerlink" title="一些零碎知识"></a>一些零碎知识</h2><ol><li><p>可选字符</p><p>有时，我们可能想要匹配一个单词的不同写法，比如color和colour，或者honor与honour</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg19 = <span class="regexp">/colou?r/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg19.<span class="title function_">test</span>(<span class="string">&quot;color&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg19.<span class="title function_">test</span>(<span class="string">&quot;colour&quot;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这个正则表达式中?代表u可有可无。</p></li><li><p>重复区间</p><p>算是一些细节的补充，因为正则表达式默认是贪婪模式，即尽可能的匹配更多字符，于是会出现以下情况：</p><blockquote><p>{M,} - 表示至少M次</p><p>{,N} - 表示至多N次</p><p>{M} - 表示恰好M次</p></blockquote><p>而要使用非贪婪模式，我们要在表达式后面加上<code>?</code>号。</p></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="密码匹配"><a href="#密码匹配" class="headerlink" title="密码匹配"></a>密码匹配</h3><p>密码匹配(6-16位字母、数字或者下划线组成)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/[a-zA-Z0-9_]&#123;6,16&#125;/</span>;</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/^\w&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&quot;123456&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&quot;1234567&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&quot;12345&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="匹配16进制颜色值"><a href="#匹配16进制颜色值" class="headerlink" title="匹配16进制颜色值"></a>匹配16进制颜色值</h3><p>如<code>#ffffff</code>，<code>#fff</code>。</p><p>可以看出数字的个数为6个或者3个，可以使用分支结构，另外，每个字符的取值范围在0-9与a-f（包括大写）之间,这可以使用选择[]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg3 = <span class="regexp">/^#([0-9a-fA-F]&#123;3&#125;|[0-9A-Fa-f]&#123;6&#125;)$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&quot;#ccc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&quot;#cccccc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg3.<span class="title function_">test</span>(<span class="string">&quot;#cc&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="匹配24小时时间"><a href="#匹配24小时时间" class="headerlink" title="匹配24小时时间"></a>匹配24小时时间</h3><p>这个分为小时与分钟两部分进行分析。</p><p>小时部分：</p><ol><li>当第一个数字为0或1的时候，第二个数字为0-9</li><li>当第一个数字为2时，第二个数字为0-3</li></ol><p>分钟部分：</p><ol><li>第一个数字为0-5</li><li>第二个数字为0-9</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg4 = <span class="regexp">/^(([01][0-9])|([2][0123])):[0-5][0-9]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;23:59&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;00:00&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;24:00&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg4.<span class="title function_">test</span>(<span class="string">&quot;23:60&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="手机号脱敏"><a href="#手机号脱敏" class="headerlink" title="手机号脱敏"></a>手机号脱敏</h3><p>将11位手机号中间4位替换为*，例如<code>13812341234</code>替换为<code>*138****1234*</code>,这里就可以把头三个数与尾四个数各分为一组，后续就可以使用<code>$</code>获取数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;13812341234&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">&quot;****&quot;</span> + str.<span class="title function_">substring</span>(<span class="number">7</span>,<span class="number">11</span>));</span><br><span class="line"><span class="keyword">const</span> reg6 = <span class="regexp">/^(1[3-9]\d&#123;1&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg6, <span class="string">&quot;$1****$2&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="匹配电话号码"><a href="#匹配电话号码" class="headerlink" title="匹配电话号码"></a>匹配电话号码</h3><p><em>假设电话号码可以有下列两种方式：</em></p><ul><li><p>0XX-XXXXXXX，例如020-8810456；</p></li><li><p>0XXXXXXXXX，例如0208810456</p></li></ul><p>020 代表区号，8810456是电话号码，区号第一个数字必须是0，电话号码的第一个数字必须大于等于1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg9 = <span class="regexp">/^0[0-9]&#123;2&#125;-?[1-9]\d&#123;6&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;020-8810456&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;0208810456&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;020-88104XX&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg9.<span class="title function_">test</span>(<span class="string">&quot;3208810456&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正则表达式功能强大，虽然在平时大部分的时候都可以直接靠搜索引擎解决需求（如：手机号，身份证等），VsCode中也有名为<code>any-rule</code>的正则插件，几乎涵盖了开发中大部分的需求，但是如果遇到一些特殊情况要求重新编写一个正则表达匹配，那就需要自己动手实现了，比如匹配特定的网站链接是否合法。</p><p>最后找到两个非常好用的网站：</p><ol><li>编程胶囊:<a href="https://codejiaonang.com/#/">编程胶囊-打造学习编程的最好系统 (codejiaonang.com)</a></li><li>正则可视化:<a href="https://regexper.com/">Regexper</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> string </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GithubPage-自定义域名</title>
      <link href="/post/github-page-zi-ding-yi-yu-ming/"/>
      <url>/post/github-page-zi-ding-yi-yu-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果将静态博客搭建到Github Page上，你会默认获得<code>用户名.github.io</code>的初始域名。</p><p>初始域名本身也具有一定的易读与易记的特性，但也有一些不方便之处。一方面，对于熟络github的访问者来说，它会透露你的github用户名；另一方面，对于不熟络github的访问者来说，他很难通过这个规律去熟记这个域名。如果出于一些理由，那么自定义域名就显得很有必要。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">关于自定义域名和 GitHub 页面 - GitHub 文档</a></p></blockquote><p>如果你去搜索此类关键字，你会发现大部分文章的标题都是“更换域名”，这实际是有点不严谨的。github的官方文档的标题是“自定义域名”，阅读官方文档后会发现，实际上这只是做了一个<strong>域名的映射</strong>。对于本博客，使用<code>ldm0715.github.io</code>也是能够访问的，只是访问时会自动将<code>ldm0715.github.io</code>映射到<code>hexo.gcnanmu3125.xyz</code>上，也就是说<strong>Github Page的默认域名其实并没有失效，严格来说不能算更换的范畴</strong>。官方文档中说明的“自定义域名”，实际上就是添加了一个重定向的步骤。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>需要提前说明的是，官方文档提供了基本的两种域名的重定向教程。</p><ul><li><p><code>apex域</code>，也称为一级域名，例如：<code>example.com</code>和<code>123.xyz</code>。</p></li><li><p><code>子域</code>，也称为二级域名。例如：<code>www.example.com</code>和<code>blog.123.xyz</code>。</p></li></ul><p>网上很多文章实际上根本没有对此进行操作上的区分，而是将官方体现的两种方式都实践了，<strong>这是没有意义的，也是完全没必要的</strong>。个人<strong>只推荐使用子域</strong>,对于相对正式的要求（以<code>example.com</code>为例），可以使用<code>www.example.com</code>，而不推荐直接使用一级域名。接下来只会展示<strong>使用子域的步骤</strong>。</p><hr><ol><li><p>在Hexo博客根目录的<code>source</code>文件夹下建立一个名为<code>CNAME</code>的文件，在文件中写入需要映射的域名。</p><div align="center">    <img src="https://z4a.net/images/2023/08/18/create_CNAME.png" alt="创建一个CNAME文件" width=57%></div></li><li><p>Hexo三连上传到github站点仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://z4a.net/images/2023/08/18/find_CNAME.png" alt="可在站点仓库中找到" width=75%></div></li><li><p>去DNS处添加一个类型为<code>CNAME</code>的解析。</p><p>以<code>Cloudflare</code>为例，以下为本站的例子：</p><ul><li><code>Type</code>：CNAME</li><li><code>Name</code>：hexo</li><li><code>Target</code>: ldm0715.github.io</li></ul><div align="center">    <img src="https://z4a.net/images/2023/08/18/create_aCNAME_DNS.png" alt="添加一个CNAME文件" width=75%></div></li><li><p>打开站点仓库 -&gt; <code>Settings</code> -&gt; <code>Pages</code>  -&gt; <code>Custom domain</code>。</p><div align="center">    <img src="https://z4a.net/images/2023/08/18/page_settings.png" alt="进行Pages的设置" width=75%></div><p>在<code>Custom domain</code>中填入<code>CNAME</code>文件中写入的域名，等待Github的DNS验证通过即可。</p></li></ol><h2 id="更改SSL-x2F-TLS的加密模式"><a href="#更改SSL-x2F-TLS的加密模式" class="headerlink" title="更改SSL&#x2F;TLS的加密模式"></a>更改SSL&#x2F;TLS的加密模式</h2><p>在自定义了域名之后，如果出现多次恶性的<code>重定向次数过多</code>导致无法访问的错误的话，多半是因为SSL的问题了，因为大部分人都会勾选<code>强制https</code>的，但是由于域名解析回源使用的是HTTP链接，就会导致无休止的重定向。</p><p>以<code>Cloudflare</code>为例，只需要在<code>SSL/TLS</code>加密选项中，将<code>Flex</code>策略转变为<code>Full</code>即可。</p><div align="center">    <img src="https://z4a.net/images/2023/08/18/change_SSL.png" alt="转变SSL加密策略为Full" style="zoom:67%;" /></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>如果直接在站点仓库中创建<code>CNAME</code>文件，等到下次Push上传会被删除，因此不要这么做。</li><li>如果<code>CNAME</code>文件丢失，映射会立即失效。</li><li>不要去ping自己的博客的地址，<strong>因为<code>Github page</code>的地址是会变动的</strong>,详见<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">官方文档</a>。</li><li>请根据自己的需要进行配置，建议直接参考官方文档<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">官方文档</a>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Page </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word-格式与排版</title>
      <link href="/post/shi-yan-bao-gao-zhong-de-word-pai-ban-ji-qiao/"/>
      <url>/post/shi-yan-bao-gao-zhong-de-word-pai-ban-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经很久没更新了，但不是在摸鱼，最近写了三个小工具，后续可能会写个文章来介绍一下吧，虽然感觉没什么技术含量。</p><p>这次主要是想起来上次写实验报告的时候，困恼着如何排版，让同学指导了一下，感觉受益匪浅，本来计划记录一下的，结果期末太忙就忘了，到最近才想起来填坑。本篇文章就记录一下非常基本的实验报告格式排版。<strong>不要觉得排版无用，实际上排版也是一种规范。</strong></p><h2 id="代码块的插入"><a href="#代码块的插入" class="headerlink" title="代码块的插入"></a>代码块的插入</h2><p>对于计算机专业的同学，写完实验代码后，肯定要将重要实现部分的代码加入实验报告，但是Word里是没有默认的代码块格式的，导致直接从IDE中复制粘贴后不是很美观。这时候可以借助插件与网站来实现代码的高亮与格式化。</p><h3 id="IDE自带的格式"><a href="#IDE自带的格式" class="headerlink" title="IDE自带的格式"></a>IDE自带的格式</h3><p>很多IDE都自带一些代码的格式，<strong>特别是暗色的主题</strong>，复制出来会自带代码格式，有时候也能呈现想要的效果，以下是<code>PyCharm</code>的<code>VSCode Dark Modern</code>主题复制到Word中的效果。</p><div align="center">  <img src="https://z4a.net/images/2023/07/18/IDE_format.png" alt="Dark主题复制后自带的暗色样式" width="75%"></div><h3 id="Easy-Code-Formatter"><a href="#Easy-Code-Formatter" class="headerlink" title="Easy Code Formatter"></a>Easy Code Formatter</h3><p><strong>在使用本插件时，复制内容记得去除样式！（也就是只复制文字选项）</strong></p><ol><li><p>获取</p><p>这是Office中免费的一个加载项，<strong>以Office 2019为例</strong>，获取路径为：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa(插入) --&gt; b(获取加载项) --&gt; c[搜索&#39;Code&#39;]--&gt; d(找到&#39;Easy Code Formatter&#39;点击&#39;添加&#39;)  </pre></div></li></ol><div align="center">    <img src="https://z4a.net/images/2023/07/18/get_codeformatter.png" alt="获取‘Easy Code Formatter’插件" width="75%"></div><ol start="2"><li><p>使用</p><p>点击获取之后会出现在Word的操作栏中，点击即可以看到操作的选项。</p></li></ol><div align="center">    <img src="https://z4a.net/images/2023/07/18/codeformatter_button.png" alt="codeformatter_button" width="75%"></div><p>   选中内容点击相应的选项即可，这边以<code>PyCharm</code>为例，讲解一下区别：</p><ul><li>Format text as code：将文本格式化</li></ul>  <div align="center">      <img src="https://z4a.net/images/2023/07/18/format_text_as_code.png" alt="Format text as code" width="75%">  </div><ul><li><p>Highlight selected line：高亮选定的行</p><div align="center"><img src="https://z4a.net/images/2023/07/18/highlight_selected_line.png" alt="Highlight selected line" width="75%"></div></li><li><p>Code formatter settings：代码格式化设置</p><p>如果你点击<code>Highlight selected line</code>与<code>Format text as code</code>都没有反应，那么点击此项，在跳出的弹窗中可以找到同名的选项，点击即可。</p><div align="center">    <img src="https://z4a.net/images/2023/07/18/code_formatter_setting2cfe0574ef20c594.png" alt="Code formatter settings" width="75%"></div><p>设置中还有主题与颜色，这边就不展开介绍了。值得一提的是，这个插件可能出现加载不出来的情况（点击后一片空白），可能和Word版本有关，另外，在调整主题与颜色的时候，要注意不要选择Word显示不了的颜色，会出现一些奇怪的错误。</p></li></ul><h3 id="代码格式化网站"><a href="#代码格式化网站" class="headerlink" title="代码格式化网站"></a>代码格式化网站</h3><p>我知道的一些网站：</p><ol><li>CodeInWord : <a href="http://www.codeinword.com/">http://www.codeinword.com</a></li><li>highlightcode : <a href="https://highlightcode.com/">https://highlightcode.com</a></li><li>Code Paste：<a href="https://paste.tonys-studio.top/">https://paste.tonys-studio.top</a></li></ol><p>效果都差不多，步骤为：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa(选择开发语言) --&gt; b(复制代码\n点击高亮) --&gt; c(复制高亮后的内容) --&gt; d(回到Word进行粘贴)  </pre></div> <div align="center"><img src="https://z4a.net/images/2023/07/18/codeinword.png" alt="格式化后的效果" width="60%"></div><p>效果还是不错的，如果你不想要靠右的效果，可以按照一下顺序设置，将其调为向左对齐：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRd(选中内容) --&gt; a(搜索操作说明) --&gt; b(搜索&#39;定义新编号格式&#39;)--&gt; c(在&#39;对齐方式中&#39;选择&#39;左对齐&#39;)  </pre></div><div align="center"><img src="https://z4a.net/images/2023/07/18/ed6edaba815e44b0337a8f321c7fc57b.png" alt="定义编号设置" width="80%"></div><p>调整后的效果：</p><div align="center"><img src="https://z4a.net/images/2023/07/18/resetting_codeformatter.png" alt="调整前后对比" width="75%"></div><h2 id="三线表"><a href="#三线表" class="headerlink" title="三线表"></a>三线表</h2><p>是论文中表格的规定形式，总共分为两个步骤：</p><ol><li>对于总表来说，去除除了上下的所有横线。</li><li>对于表头来说，添加下横线。</li></ol><p>可以按照以下方式设定：</p><div align="center"><img src="https://z4a.net/images/2023/07/18/tree_lines_table.gif" alt="三线表的设置" width="55%"></div><p>设定前后的效果对比：</p><div align="center"><img src="https://z4a.net/images/2023/07/18/after_deal_table.png" alt="三线表设定前后对比" width="55%"></div><h2 id="标题格式"><a href="#标题格式" class="headerlink" title="标题格式"></a>标题格式</h2><h3 id="标题格式结构"><a href="#标题格式结构" class="headerlink" title="标题格式结构"></a>标题格式结构</h3><p>对于一些重要的文档，目录一般是不可或缺的，Word中有自动的目录生成，前提是我们设定好标题的格式。</p><div align="center"><img src="https://z4a.net/images/2023/07/18/all_styles.png" alt="默认标题的格式" width="67%"></div><p>以一篇实验报告模版为例：</p><div align="center"><img src="https://z4a.net/images/2023/07/18/example.png" alt="示例文档" width="55%"></div><p>可以看出其中：</p><ul><li>实验目的、设计内容、基本设计要求为<strong>一级标题</strong>，对应样式为<strong>标题一</strong></li><li>基本设计要求之下的各个小题为<strong>二级标题</strong>，对应样式为<strong>标题二</strong></li></ul><p>按照我的习惯（不知道对不对），除了标题一采用的是大写数字以外，其他的标题都已<strong>×.×（*n）</strong>的格式循环命名下去。下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实验报告</span><br><span class="line">├─ 一、实验目的</span><br><span class="line">├─ 二、设计内容</span><br><span class="line">├─ 三、基本设计要求</span><br><span class="line">│    ├─ 3.1 实现Telnet的远程登陆</span><br><span class="line">│    │        ├─ 3.1.1 实验思路</span><br><span class="line">│    │      ├─ 3.1.2 实现步骤</span><br><span class="line">│    │      └─ 3.1.3 配置指令</span><br><span class="line">│    └─ 3.2 交换机扩展以太网</span><br><span class="line">│           ├─ 3.2.1 实验思路</span><br><span class="line">│           ├─ …………</span><br><span class="line">└─ …………</span><br></pre></td></tr></table></figure><h3 id="修改标题样式"><a href="#修改标题样式" class="headerlink" title="修改标题样式"></a>修改标题样式</h3><p><strong>Word默认的标题样式完全不准确，用起来相当不美观，因此考虑修改样式。</strong></p><p>标题的格式一般为：</p><ol><li><p>字体加粗，大小为小四</p></li><li><p>中文：宋体</p><p>英文：Times New Roman</p></li><li><p>单倍行距</p> <div align="center"> <img src="https://z4a.net/images/2023/07/18/title_format.png" alt="自定义标题的样式" width="55%"> </div></li></ol><p>修改各种标题样式，后续只需要对内容点击样式即可应用成功，免去了每次都要设置段落与字体属性的麻烦。</p><h3 id="设置标题格式的作用"><a href="#设置标题格式的作用" class="headerlink" title="设置标题格式的作用"></a>设置标题格式的作用</h3><ol><li><p>能够跳转到对应的内容</p><p>按住<code>Ctrl + F</code>可以利用标题实现快速跳转。</p><div align="center">    <img src="https://z4a.net/images/2023/07/18/search_title.png" alt="标题展示" width="35%"></div></li><li><p>可以生成自动目录</p>  <div align="center">     <img src="https://z4a.net/images/2023/07/18/auto_content.png" alt="生成目录" width="67%"> </div></li></ol><h2 id="目录页码问题"><a href="#目录页码问题" class="headerlink" title="目录页码问题"></a>目录页码问题</h2><p>对于一份实验报告来说，正文内容一般是从Word的第三页才开始，这时候会导致出现目录的第一个索引为3，在某些场合可能就不符规范。</p><div align="center"><img src="https://z4a.net/images/2023/07/18/falut_content.png" alt="略显别扭的起始页码" width="55%"></div><p>解决步骤：</p><ol><li><p>插入 –&gt; 页码 –&gt;  选一个样式（可选）</p>  <div align="center"> <img src="https://z4a.net/images/2023/07/18/add_page_index.png" alt="插入页码" width="75%"> </div></li><li><p>光标放在正文开头处</p></li><li><p>布局 –&gt; 分隔符 –&gt; 下一页</p>  <div align="center"> <img src="https://z4a.net/images/2023/07/18/add_nextpage.png" alt="插入分隔符" width="25%"> </div></li><li><p>点击正文第一页的页码（一般是3），在属性中取消“链接到前一节”</p></li><li><p>页码 –&gt; 设置页码格式 –&gt; 起始页码 –&gt; 确定</p>  <div align="center"> <img src="https://z4a.net/images/2023/07/18/change_pageindex_setting.png" alt="设置页码格式" width="75%"> </div>  <div align="center"> <img src="https://z4a.net/images/2023/07/18/pageindex_format.png" alt="设定起始页码" width="25%"> </div></li><li><p>删除正文以前的页码 –&gt; 点击目录 –&gt; 只更新页码</p>  <div align="center"> <img src="https://z4a.net/images/2023/07/18/updata_content.png" alt="只更新页码" width="60%"> </div></li></ol><p>处理结果：</p><div align="center"><img src="https://z4a.net/images/2023/07/18/re_content.png" alt="处理后起始页码为1" width="65%"></div>]]></content>
      
      
      <categories>
          
          <category> 杂&amp;Mess </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Word </tag>
            
            <tag> 排版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-LBP特征提取算法</title>
      <link href="/post/ji-qi-shi-jue-lbp-suan-fa/"/>
      <url>/post/ji-qi-shi-jue-lbp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统机器视觉在图像识别领域虽然比不了神经网络，但也有一些可使用的场景。最近做了Kaggle上的<strong>dog-breed-identification</strong>的比赛，感觉神经网络太容易过拟合了，导致结果不一定好，仅仅进行调参也很难防止，导致花的时间多，但结果并没有变得更好。对于简单干扰较小的情况，机器视觉还是占有优势的。</p><p>物体与场景识别中，通过纹理特征进行识别也是很常用的手段，<strong>图像的纹理是描述图像中重复和规律性的局部结构信息，如平滑度、粗糙度、周期性等，它可以反映图像内物体表面的空间排列和灰度变化</strong>。通过对纹理特征的分析，我们可以进行图像分类、目标识别、图像分割等操作。LBP算法就是以像素为单位的基础，通过灰度值编码，来提取图像的纹理特征的图像特征描述算法。</p><p>本算法使用的测试素材如下：</p><div align="center">  <img src="https://z4a.net/images/2023/06/19/material.png" alt="material.png" border="0" width=300></div><h2 id="传统LBP算法"><a href="#传统LBP算法" class="headerlink" title="传统LBP算法"></a>传统LBP算法</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>在一幅图像中，原始的LBP算子定义了一个3×3的滑动模版，对于一个给定的像素点x，在滑动模版的范围内（四周）相邻的8个像素将与x进行减法操作，得到8个不同的相对灰度值。其中，若相对灰度值大于等于的灰度值，则编码为1，否则为0。从左上角的像素点开始按照顺时针拼接这些数（0或1），如此可以得到一个8位二进制数，将这个二进制数转化为10进制数作为x的灰度值。整个处理过程可用以下公式表达：</p><div align="center">    <svg xmlns="http://www.w3.org/2000/svg" width="36.09ex" height="6.892ex" viewBox="0 -1720.9 15951.8 3046" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-2-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-2-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-2-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-2-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-2-TEX-I-1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D43F"></use></g><g data-mml-node="mi" transform="translate(681, 0)"><use xlink:href="#MJX-2-TEX-I-1D435"></use></g><g data-mml-node="mi" transform="translate(1440, 0)"><use xlink:href="#MJX-2-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(2191, 0)"><use xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(2580, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(572, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g></g></g><g data-mml-node="mo" transform="translate(3508.2, 0)"><use xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(3952.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g></g></g><g data-mml-node="mo" transform="translate(4799, 0)"><use xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(5465.8, 0)"><use xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(6521.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-2-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(92.3, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(503, 0)"><use xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1281, 0)"><use xlink:href="#MJX-2-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(545.2, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-2-TEX-N-38"></use></g></g></g><g data-mml-node="mi" transform="translate(8132.2, 0)"><use xlink:href="#MJX-2-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8601.2, 0)"><use xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8990.2, 0)"><use xlink:href="#MJX-2-TEX-I-1D43C"></use></g><g data-mml-node="mo" transform="translate(9494.2, 0)"><use xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(9883.2, 0)"><use xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(10386.2, 0)"><use xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(10997.5, 0)"><use xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(11997.7, 0)"><use xlink:href="#MJX-2-TEX-I-1D43C"></use></g><g data-mml-node="mo" transform="translate(12501.7, 0)"><use xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(12890.7, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(13323.7, 0)"><use xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(13712.7, 0)"><use xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(14323.9, 0)"><use xlink:href="#MJX-2-TEX-N-2217"></use></g><g data-mml-node="msup" transform="translate(15046.1, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-2-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-I-1D45D"></use></g></g></g></g></svg></div><p>其中</p><ul><li><p>I(c) - 为中心坐标的灰度值</p></li><li><p>I(p) - 周围八个像素点的灰度值</p></li><li><p>s(x)函数表达式如下：</p></li></ul><div align="center"><svg xmlns="http://www.w3.org/2000/svg" width="22.092ex" height="5.43ex" viewBox="0 -1450 9764.6 2400" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-170-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-170-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-170-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-170-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-170-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-170-TEX-S3-7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path><path id="MJX-170-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-170-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-170-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-170-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-170-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-170-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-170-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-170-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-170-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-170-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-170-TEX-I-1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-170-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469, 0)"><use xlink:href="#MJX-170-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(858, 0)"><use xlink:href="#MJX-170-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1430, 0)"><use xlink:href="#MJX-170-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2096.8, 0)"><use xlink:href="#MJX-170-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(3152.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-170-TEX-S3-7B"></use></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-170-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-170-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(2617.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-170-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-170-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(1905.6, 0)"><use xlink:href="#MJX-170-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-170-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-170-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-170-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(485, 0)"><use xlink:href="#MJX-170-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(846, 0)"><use xlink:href="#MJX-170-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(1422, 0)"><use xlink:href="#MJX-170-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(1888, 0)"><use xlink:href="#MJX-170-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(2339, 0)"><use xlink:href="#MJX-170-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(2808, 0)"><use xlink:href="#MJX-170-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(3153, 0)"><use xlink:href="#MJX-170-TEX-I-1D467"></use></g><g data-mml-node="mi" transform="translate(3618, 0)"><use xlink:href="#MJX-170-TEX-I-1D452"></use></g></g></g></g><g data-mml-node="mo" transform="translate(6612, 0)"></g></g></g></g></svg>    </div><p>整个过程示意图如下所示：</p><div align="center">  <img src="https://z4a.net/images/2023/06/19/lbp1.jpg" alt="lbp1.jpg" border="0" width=500></div><p>按照顺时针的方向，可以将上图中相对灰度值拼接为”01111100”，转化为10进制为”124”，将”124”作为上图中中间像素的值，当然如果算出的灰度值超过了图像灰度值范围，还需要进行归一化，将灰度值放入[0,255]的范围中。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>按照算法原理，可以将实现方法分割为以下步骤：</p><ol><li>初始化图像：图像灰度化、边缘填充、转化数据类型（int8的数据类型支持范围太小）。</li><li>定义LBP算法：遍历图像所有像素点，按照LBP(x<del>c</del>+y<del>c</del>)公式进行计算。</li><li>定义s(x)。</li><li>编码并转码：按照顺时针得到8为二进制数并将它转化为10进制。</li><li>展示图像：我们一般使用像素直方图将处理结果展示出来。</li></ol><p>导入需要使用到的Python库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h4 id="初始化图像"><a href="#初始化图像" class="headerlink" title="初始化图像"></a>初始化图像</h4><ol><li>对图像进行灰度化处理。<code>cv2.imread(image, 0)</code>或<code>cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</code></li><li>为了让图像的边缘像素也能进行LBP编码，我们需要在图像四周添加1像素的边缘填充。OpenCV中已经提供了相应的方法,<code>cv2.copyMakeBorder(image, 1, 1, 1, 1, borderType=cv2.BORDER_REPLICATE)</code>,其中<code>borderType</code>为填充的方法，<code>cv2.BORDER_REPLICATE</code>指的是以边缘像素进行填充。</li><li>转化图像中像素值的类型为<code>float</code>或者<code>int32</code>。</li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_image</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化图像</span></span><br><span class="line"><span class="string">    :param input_path: 图像路径</span></span><br><span class="line"><span class="string">    :return: 处理后的图像</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 以单通道的形式读取图像</span></span><br><span class="line">    image = cv2.imread(input_path, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">    <span class="comment"># 给图像填充边缘像素</span></span><br><span class="line">    image = cv2.copyMakeBorder(image, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, borderType=cv2.BORDER_REPLICATE)</span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 将灰度值转化为int32，方便后续计算</span></span><br><span class="line">    image = image.astype(np.int32)</span><br><span class="line">    image_name = input_path.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;图像名：<span class="subst">&#123;image_name&#125;</span>，高：<span class="subst">&#123;h&#125;</span>, 宽：<span class="subst">&#123;w&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><h4 id="定义LBP算法并转码"><a href="#定义LBP算法并转码" class="headerlink" title="定义LBP算法并转码"></a>定义LBP算法并转码</h4><p>我们需要循环图像中所有的像素点，计算部分按照LBP(x<del>c</del>+y<del>c</del>)公式编写即可。得到周围的8个LBP编码值后，我使用<code>list</code>存储，后续拼接为<code>string</code>类型，转化10进制数可以使用<code>int(str, 2)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">LBP</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    LBP算法</span></span><br><span class="line"><span class="string">    :param image: 待处理图像</span></span><br><span class="line"><span class="string">    :param h: 图像的</span></span><br><span class="line"><span class="string">    :param w:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 处理后的图像</span></span><br><span class="line">    temp = np.zeros((h - <span class="number">1</span>, w - <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---图像处理中---&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, h - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, w - <span class="number">1</span>):</span><br><span class="line">            calculation_list = <span class="built_in">list</span>()</span><br><span class="line">            calculation_list.append(image[i - <span class="number">1</span>][j - <span class="number">1</span>] - image[i][j])</span><br><span class="line">            calculation_list.append(image[i][j - <span class="number">1</span>] - image[i][j])</span><br><span class="line">            calculation_list.append(image[i + <span class="number">1</span>][j - <span class="number">1</span>] - image[i][j])</span><br><span class="line"></span><br><span class="line">            calculation_list.append(image[i + <span class="number">1</span>][j] - image[i][j])</span><br><span class="line">            calculation_list.append(image[i + <span class="number">1</span>][j + <span class="number">1</span>] - image[i][j])</span><br><span class="line"></span><br><span class="line">            calculation_list.append(image[i][j + <span class="number">1</span>] - image[i][j])</span><br><span class="line">            calculation_list.append(image[i - <span class="number">1</span>][j + <span class="number">1</span>] - image[i][j])</span><br><span class="line">            calculation_list.append(image[i - <span class="number">1</span>][j] - image[i][j])</span><br><span class="line">            <span class="comment"># 将所得值转化为0，1</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                calculation_list[k] = transform(calculation_list[k])</span><br><span class="line">            <span class="comment"># 获得二进制码</span></span><br><span class="line">            result_str = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> calculation_list])</span><br><span class="line">            <span class="comment"># 转化为十进制并存入图像</span></span><br><span class="line">            temp[i - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">int</span>(result_str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(result_str)</span></span><br><span class="line">    <span class="comment"># 将像素值归一化</span></span><br><span class="line">    temp = np.clip(temp, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line">    <span class="comment"># 转化通道，方便后续展示</span></span><br><span class="line">    temp = cv2.cvtColor(temp, cv2.COLOR_BGR2RGB)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---图像处理完成---&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><p>其中<code>transform</code>函数即为公式中的s(x)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="展示处理结果"><a href="#展示处理结果" class="headerlink" title="展示处理结果"></a>展示处理结果</h4><p>对于这种需要进行对比的算法，一般都会采用<code>Matplotlib</code>进行图像的展示，这样会更利于结果的对比。使用<code>Matplotlib</code>展示要注意颜色格式的不同，需要将常规的<code>BGR</code>转化为<code>RGB</code>格式，转化方法为：<code>cv2.cvtColor(temp, cv2.COLOR_BGR2RGB)</code>。</p><p>对于像素直方图，我们可以使用<code>plt.hist(image,nut)</code>进行绘制，其中：</p><ul><li>image: 需要绘制的值，这边可以直接使用<code>image.ravel()</code>将<code>h*w</code>的矩阵转化为<code>1*（h*w）</code>的格式。</li><li>nut: 分组间隔</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">image_list, title_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    展示处理后的图像及其像素直方图</span></span><br><span class="line"><span class="string">    :param image_list: 图像列表</span></span><br><span class="line"><span class="string">    :param title_list: 标题列表</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设定图的大小</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>), dpi=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 绘图</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.title(title_list[i])</span><br><span class="line">        <span class="comment"># 将直方图放在第二列</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">257</span>, <span class="number">16</span>), <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">17</span>))</span><br><span class="line">            plt.hist(image_list[<span class="built_in">int</span>(i / <span class="number">2</span>)].ravel(), <span class="number">16</span>)</span><br><span class="line">            plt.xlabel(<span class="string">&quot;Dimension&quot;</span>)</span><br><span class="line">            plt.ylabel(<span class="string">&quot;Value&quot;</span>)</span><br><span class="line">        <span class="comment"># 处理图放在第一列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">            plt.imshow(image_list[<span class="built_in">int</span>(i / <span class="number">2</span>)])</span><br><span class="line">    <span class="comment"># 紧凑排布</span></span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h4 id="测试代码与结果展示"><a href="#测试代码与结果展示" class="headerlink" title="测试代码与结果展示"></a>测试代码与结果展示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_path1 = <span class="string">&quot;input/lane1.jpg&quot;</span></span><br><span class="line">    image = init_image(input_path1)</span><br><span class="line">    result1 = LBP(image)</span><br><span class="line"></span><br><span class="line">    input_path2 = <span class="string">&quot;input/lane2.jpg&quot;</span></span><br><span class="line">    image = init_image(input_path2)</span><br><span class="line">    result2 = LBP(image)</span><br><span class="line"></span><br><span class="line">    image_list = [result1, result2]</span><br><span class="line">    title_list = [<span class="string">&quot;lane1_LBP&quot;</span>, <span class="string">&quot;lane1_LBP_hist&quot;</span>, <span class="string">&quot;lane2_LBP&quot;</span>, <span class="string">&quot;lane2_LBP_hist&quot;</span>]</span><br><span class="line">    show_result(image_list, title_list)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><div align="center"><img src="https://z4a.net/images/2023/06/19/lbp_run.png" alt="lbp_run.png" border="0" width=300></div><div align="center"><img src="https://z4a.net/images/2023/06/19/lbp_result.png" alt="lbp_result.png" border="0" width=600></div><p>处理的速度还是比较快的，可以看到除了14-15这个分段值有些不同，其余各数值排布的值几乎完全一致。这说明这两张照片所展示的场景非常相似。</p><h2 id="Circular-LBP算法"><a href="#Circular-LBP算法" class="headerlink" title="Circular LBP算法"></a>Circular LBP算法</h2><h3 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h3><p>我们已经知道了传统LBP算法的基本原理。我们可以想象一下，如果我们将图像旋转，编码后的值是否一样呢？答案是否定的，具体原因如下图：</p><div align="center"><img src="https://z4a.net/images/2023/06/19/lbp2.png" alt="lbp2.png" border="0" width=600></div><p>可以看到现在拼接后的字符串为”00011111”,转化为10进制为”31”,而不是原来的”124”。图像只是旋转了90°，但图像的实际内容并没有任何变化，所以传统的LBP算法是不具备旋转不变形的，这对于识别来说是相当不利的。<br>而且由于传统LBP采用的是3×3的模版，因此对周围像素的依赖是比较大的，可能会受到噪声的干扰。而且在一些复杂场景下，也没法根据情况进行参数调整。</p><p>总的来说，传统LBP算法虽然有着灰度不变性，但由于LBP值是按照顺时针进行编码，因此并不具有旋转不变性，周围八个像素也不能满足不同尺寸和频率纹理的需要。为了解决这些问题，后续的学者们也提出了很多的方法，我们只展示较为简单的Circular LBP算法。</p><p>相比于传统LBP算法，Circular LBP是以R为半径的圆作为取点范围，在圆形区域内选择P个像素点替代中心像素点周围的八个像素点，其中第i个像素点的坐标计算公式如下：</p><div align="center">    <svg xmlns="http://www.w3.org/2000/svg" width="21.617ex" height="4.778ex" viewBox="0 -1426 9554.9 2112" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-180-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-180-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-180-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-180-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-180-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-180-TEX-I-1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-180-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-180-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-180-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-180-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-180-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-180-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-180-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-180-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(572, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-180-TEX-I-1D45D"></use></g></g></g><g data-mml-node="mo" transform="translate(1255.5, 0)"><use xlink:href="#MJX-180-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2311.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-180-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(572, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-180-TEX-I-1D450"></use></g></g></g><g data-mml-node="mo" transform="translate(3461.6, 0)"><use xlink:href="#MJX-180-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4461.9, 0)"><use xlink:href="#MJX-180-TEX-I-1D445"></use></g><g data-mml-node="mi" transform="translate(5220.9, 0)"><use xlink:href="#MJX-180-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(5653.9, 0)"><use xlink:href="#MJX-180-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(6138.9, 0)"><use xlink:href="#MJX-180-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(6607.9, 0)"><use xlink:href="#MJX-180-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(6996.9, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mn"><use xlink:href="#MJX-180-TEX-N-32"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">π</text></g></g><g data-mml-node="mi" transform="translate(1384, 0)"><use xlink:href="#MJX-180-TEX-I-1D456"></use></g></g><g data-mml-node="mi" transform="translate(709, -686)"><use xlink:href="#MJX-180-TEX-I-1D443"></use></g><rect width="1929" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9165.9, 0)"><use xlink:href="#MJX-180-TEX-N-29"></use></g></g></g></svg></div><div align="center">  <svg xmlns="http://www.w3.org/2000/svg" width="21.307ex" height="4.778ex" viewBox="0 -1426 9417.9 2112" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-182-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-182-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-182-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-182-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-182-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-182-TEX-I-1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-182-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-182-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-182-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-182-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-182-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-182-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-182-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-182-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-182-TEX-I-1D45D"></use></g></g></g><g data-mml-node="mo" transform="translate(1173.5, 0)"><use xlink:href="#MJX-182-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2229.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-182-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-182-TEX-I-1D450"></use></g></g></g><g data-mml-node="mo" transform="translate(3297.6, 0)"><use xlink:href="#MJX-182-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4297.9, 0)"><use xlink:href="#MJX-182-TEX-I-1D445"></use></g><g data-mml-node="mi" transform="translate(5056.9, 0)"><use xlink:href="#MJX-182-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(5525.9, 0)"><use xlink:href="#MJX-182-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(5870.9, 0)"><use xlink:href="#MJX-182-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(6470.9, 0)"><use xlink:href="#MJX-182-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(6859.9, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mn"><use xlink:href="#MJX-182-TEX-N-32"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">π</text></g></g><g data-mml-node="mi" transform="translate(1384, 0)"><use xlink:href="#MJX-182-TEX-I-1D456"></use></g></g><g data-mml-node="mi" transform="translate(709, -686)"><use xlink:href="#MJX-182-TEX-I-1D443"></use></g><rect width="1929" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9028.9, 0)"><use xlink:href="#MJX-182-TEX-N-29"></use></g></g></g></svg>  </div><p>其中</p><ul><li><p>(x<del>c</del>,y<del>c</del>) - 中心点坐标</p></li><li><p>R - 圆形区域半径</p></li><li><p>P - 选取点的总个数。</p></li></ul><p>如何取值的示意如下图所示。</p><div align="center"><img src="https://z4a.net/images/2023/06/19/circle_P.png" alt="circle_P.png" border="0" width=600></div><p>对于计算后结果不为整数的坐标值，在图像中是无法找到的，这时候可以使用双线性插值的计算值作为该坐标点的像素值。</p><p>最后，为了保证图像的旋转不变性，还需要进行如下操作：<br>将所得二进制字符串按照顺时针旋转顺序不断更换起始点，选取其中转化为10进制的最小值作为该点的LBP值，示意图如下所示。</p><div align="center"><img src="https://z4a.net/images/2023/06/19/circle_process.png" alt="circle_process.png" border="0" width=500></div><p>Circular LBP算法通过圆形邻域、插值和旋转不变性的增强，使得相似纹理区域的编码更加一致。这种一致性有助于我们从图像中提取出更稳定、更准确的纹理特征。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>在了解了原理之后，我们可以大致可以得到如下的实现步骤：</p><ol><li>图像初始化处理：灰度化、边缘填充、转化数据类型</li><li>定义双线性插值：对于计算出非整数的坐标，可以采用双线性插值得到该坐标点的像素值</li><li>在2进制字符串中找到转码后10进制的最小值</li><li>定义Circlar LBP的计算：按照公式进行，有一些细节需要注意</li><li>结果展示与分析：相比传统LBP有什么优点，性能如何</li></ol><h4 id="初始化处理"><a href="#初始化处理" class="headerlink" title="初始化处理"></a>初始化处理</h4><p>因为使用的是以R为圆心的圆形范围，因此我们在进行边缘填充时，需要按照R的大小进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_image</span>(<span class="params">input_path, R</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化图像</span></span><br><span class="line"><span class="string">    :param input_path: 图像路径</span></span><br><span class="line"><span class="string">    :param R:范围圆的半径</span></span><br><span class="line"><span class="string">    :return:处理后的图像</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 单通道读取</span></span><br><span class="line">    image = cv2.imread(input_path, <span class="number">0</span>)</span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 四周添加R的边缘像素</span></span><br><span class="line">    image = cv2.copyMakeBorder(image, R, R, R, R, borderType=cv2.BORDER_REPLICATE)</span><br><span class="line">    <span class="comment"># 转化数据类型为int32，方便后续计算</span></span><br><span class="line">    image = image.astype(np.int32)</span><br><span class="line">    image_name = input_path.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;图像名：<span class="subst">&#123;image_name&#125;</span>，高：<span class="subst">&#123;h&#125;</span>, 宽：<span class="subst">&#123;w&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><h4 id="定义双线性插值"><a href="#定义双线性插值" class="headerlink" title="定义双线性插值"></a>定义双线性插值</h4><p>在计算坐标点时，由于包括三角函数计算，因此很容易得出非整数值。当计算出的像素点坐标无法在图像中找到时，就可以使用双线性插值的方法计算出该点灰度值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bilinear_interpolation</span>(<span class="params">xp, yp, image</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    双线性插值</span></span><br><span class="line"><span class="string">    :param xp: x坐标</span></span><br><span class="line"><span class="string">    :param yp: y坐标</span></span><br><span class="line"><span class="string">    :param image: 输入的图像</span></span><br><span class="line"><span class="string">    :return: 计算后所得（x，y）的灰度值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 向下取整</span></span><br><span class="line">    x1, y1 = <span class="built_in">int</span>(xp), <span class="built_in">int</span>(yp)</span><br><span class="line">    <span class="comment"># 获得四点的坐标</span></span><br><span class="line">    <span class="keyword">if</span> x1 &gt; w - <span class="number">1</span>:</span><br><span class="line">        x2 = x1 - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x2 = x1 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> y1 &gt; h - <span class="number">1</span>:</span><br><span class="line">        y2 = y1 - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y2 = y1 + <span class="number">1</span></span><br><span class="line">    f_x1y1 = image[y1, x1]</span><br><span class="line">    f_x1y2 = image[y2, x1]</span><br><span class="line">    f_x2y1 = image[y1, x2]</span><br><span class="line">    f_x2y2 = image[y2, x2]</span><br><span class="line">    <span class="comment"># 计算插值</span></span><br><span class="line">    pixel_value = f_x1y1 * (x2 - xp) * (y2 - yp) + f_x2y1 * (xp - x1) * (y2 - yp) + \</span><br><span class="line">                  f_x1y2 * (x2 - xp) * (yp - y1) + f_x2y2 * (xp - x1) * (yp - y1)</span><br><span class="line">    <span class="keyword">return</span> pixel_value</span><br></pre></td></tr></table></figure><h4 id="找到最小的转码值"><a href="#找到最小的转码值" class="headerlink" title="找到最小的转码值"></a>找到最小的转码值</h4><p>按照顺时针方向，转化起点的过程，我采用的是不断交换首尾字符的方法，不断变换2进制字符串的起点，因此可以找到所有2进制字符串中转化为10进制后最小的那个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_min</span>(<span class="params"><span class="built_in">str</span>, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    得到最小值编码</span></span><br><span class="line"><span class="string">    :param str:二进制字符串</span></span><br><span class="line"><span class="string">    :param p:获取点的个数</span></span><br><span class="line"><span class="string">    :return:十进制最小的值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="built_in">int</span>(<span class="built_in">str</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>) - <span class="number">1</span>):</span><br><span class="line">        temp = <span class="built_in">str</span>[<span class="number">1</span>:p]</span><br><span class="line">        temp = temp + <span class="built_in">str</span>[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">str</span> = temp</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">str</span>, <span class="number">2</span>) &lt; <span class="built_in">min</span>:</span><br><span class="line">            <span class="built_in">min</span> = <span class="built_in">int</span>(<span class="built_in">str</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span></span><br></pre></td></tr></table></figure><h4 id="定义Circular-LBP算法"><a href="#定义Circular-LBP算法" class="headerlink" title="定义Circular_LBP算法"></a>定义Circular_LBP算法</h4><p>这个过程按照公式编写即可，但有四个点需要注意：</p><ol><li><p>对于三角函数运算，需要现将计算所得弧度制其转化为角度制，可以使用<code>np.radians()</code>方法。</p></li><li><p>在我们的坐标值计算公式中，索引都是以1为起点（数学坐标系）。因此为了对应图像坐标系，我们在计算坐标时进行减一操作，不然会出现索引越界的情况。</p></li><li><p>由于计算所得的<code>xp</code>与<code>yp</code>必定为<code>float</code>类型，因此即便是整数，也会多显示一位小数0（如35.0），为此，我们需要使用<code>num.is_integer()</code>的方法进行整数的判断，这样才能精确根据所得坐标值进行不同的操作。</p></li><li><p>因为计算复杂，因此使用<code>time</code>模块进行计算运行时间，来估量程序的运行效率。使用案例为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始计时，记录程序开始的时刻</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">程序运行代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 记录运行结束时刻</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="comment"># 计算总时长</span></span><br><span class="line">all_time = end_time - start_time</span><br></pre></td></tr></table></figure></li></ol><p>实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">circular_extended_lbp</span>(<span class="params">image_path, r, p</span>):</span><br><span class="line">    <span class="comment"># 初始化图像</span></span><br><span class="line">    image = init_image(image_path, r)</span><br><span class="line">    <span class="comment"># 获得图像的宽高</span></span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始LBP处理，设定参数：半径：<span class="subst">&#123;r&#125;</span> 点个数：<span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="comment"># 处理后的图像</span></span><br><span class="line">    temp = np.zeros((h - r, w - r))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, h - r):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(r, w - r):</span><br><span class="line">            calculation_list = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(p):</span><br><span class="line">                <span class="comment"># 转化为弧度制</span></span><br><span class="line">                radians = np.radians(<span class="number">2</span> * np.pi * k / <span class="built_in">float</span>(p))</span><br><span class="line">                <span class="comment"># 为了对应图像坐标系进行减一操作</span></span><br><span class="line">                xp = j + r * np.cos(radians) - <span class="number">1</span></span><br><span class="line">                yp = i - r * np.sin(radians) - <span class="number">1</span></span><br><span class="line">                xp = init_integer(xp)</span><br><span class="line">                yp = init_integer(yp)</span><br><span class="line">                <span class="comment"># print(xp, yp)</span></span><br><span class="line">                <span class="comment"># 计算与圆心点的灰度值的差值</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    calculation_list.append(image[xp][yp] - image[i][j])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    calculation_list.append(bilinear_interpolation(xp, yp, image) - image[i][j])</span><br><span class="line">                <span class="comment"># 获得二进制字符串</span></span><br><span class="line">                calculation_list[k] = transform(calculation_list[k])</span><br><span class="line">            <span class="comment"># print(calculation_list)</span></span><br><span class="line">            result_str = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> calculation_list])</span><br><span class="line">            <span class="comment"># 得到二进制中最小的十进制编码数</span></span><br><span class="line">            temp[i - r][j - r] = get_min(result_str, p)</span><br><span class="line">    temp = np.clip(temp, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line">    temp = cv2.cvtColor(temp, cv2.COLOR_BGR2RGB)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    all_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;LBP处理完毕，耗时：<span class="subst">&#123;<span class="built_in">int</span>(all_time // <span class="number">60</span>)&#125;</span>m<span class="subst">&#123;<span class="built_in">int</span>(all_time % <span class="number">60</span>)&#125;</span>s&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><p>其中<code>init_integer</code>函数为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_integer</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num.is_integer():</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h4 id="展示结果"><a href="#展示结果" class="headerlink" title="展示结果"></a>展示结果</h4><p>展示部分的代码与之前代码并无差别，因此不做展示，直接展示测试代码与结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 圆的半径</span></span><br><span class="line">    R = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 取多少个点</span></span><br><span class="line">    P = <span class="number">6</span></span><br><span class="line">    input_path = <span class="string">&quot;./input/lane1.jpg&quot;</span></span><br><span class="line">    result_image1 = circular_extended_lbp(input_path, R, P)</span><br><span class="line"></span><br><span class="line">    input_path2 = <span class="string">&quot;./input/lane2.jpg&quot;</span></span><br><span class="line">    result_image2 = circular_extended_lbp(input_path, R, P)</span><br><span class="line"></span><br><span class="line">    image_list = [result_image1, result_image2]</span><br><span class="line">    title_list = [<span class="string">&quot;lane1_circular_LBP&quot;</span>, <span class="string">&quot;lane1_circular_LBP_hist&quot;</span>, <span class="string">&quot;lane2_circular_LBP&quot;</span>, <span class="string">&quot;lane2_circular_LBP_hist&quot;</span>]</span><br><span class="line">    show_result(image_list, title_list)</span><br></pre></td></tr></table></figure><p>结果展示：</p><div align="center"><img src="https://z4a.net/images/2023/06/19/circle_run.png" alt="circle_run.png" border="0" width=300></div><div align="center"><img src="https://z4a.net/images/2023/06/19/circluar_result.png" alt="circluar_result.png" border="0" width=600></div><p>可以看出，用Circular LBP处理后的图像，像素直方图几乎完全一致，且分布较为单一。这说明Circular LBP通过圆形邻域、插值和旋转不变性的增强，使得相似纹理区域的编码更加一致。表现在结果上，即既能得出结论的同时，抵抗干扰的能力会比传统的LBP算法要强。最后根据运行时间可以看出，该程序的运行效率不高，还有优化的空间。</p>]]></content>
      
      
      <categories>
          
          <category> 机器视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> 机器视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg-简单的视频处理</title>
      <link href="/post/ffmpeg-yi-xie-jian-dan-de-shi-pin-chu-li/"/>
      <url>/post/ffmpeg-yi-xie-jian-dan-de-shi-pin-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给自己的作业留个档，方便日后查看，毕竟人最不靠谱的就是记忆。</p><blockquote><p>此博文使用的图片和视频与输出结果可前往<a href="http://alist.gcnanmu3125.xyz:5244/pikpak/%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/%E4%BD%9C%E4%B8%9A6">gcnanmuの小屋</a>查看。</p></blockquote><h2 id="视频缩放滤波器"><a href="#视频缩放滤波器" class="headerlink" title="视频缩放滤波器"></a>视频缩放滤波器</h2><p>用ffmpeg实现视频宽高放大2倍，宽高缩小2倍。(参考：视频的滤波器通常使用-VF来设置滤波器，也可以使用-filter_complex。） </p><p>展示视频像素用到的<code>ffmpeg</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -show_entries stream=width,height -of csv=s=x:p=0 input_video.mp4</span><br></pre></td></tr></table></figure><p>因此可以使用以下命令得到<strong>输入视频</strong>的分辨率：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -show_entries stream=width,height -of csv=s=x:p=0 <span class="string">&quot;F:\test6_video\input.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size2.png" alt="input_video" width="67%" /></div><p>需要了解的<code>ffmpeg</code>参数：</p><ol><li>待处理的视频。</li><li>变换后高与宽的数值，使用<code>iw</code>和<code>ih</code>分别表示原来视频的宽度和高度。vf表示视频过滤器(video filter)，该操作中由于宽高比和原来的视频不同，会造成像素的宽高比不同。<strong>如果想要保持原来的宽高比，可以传递-1作为参数。</strong></li></ol><p>视频像素分辨率<strong>放大为原来的两倍</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf scale=w=<span class="string">&#x27;iw*2&#x27;</span>:h=-1  <span class="string">&quot;F:\input_video\resize_double.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size1.png" alt="resize_double" width="67%" /></div><p>视频分辨率<strong>缩小为原来的两倍</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf scale=w=<span class="string">&#x27;iw*0.5&#x27;</span>:h=-1  <span class="string">&quot;F:\input_video\resize_half.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2023/05/22/display_size3.png" alt="resize_half" width="67%" /></div><h2 id="视频水印添加滤波器"><a href="#视频水印添加滤波器" class="headerlink" title="视频水印添加滤波器"></a>视频水印添加滤波器</h2><p>将一个水印图片叠加到视频的左上角。（模仿cctv） </p><p>三个输入：</p><ol><li><p>要添加水印的视频</p></li><li><p>要添加的水印图片（需要去除背景，不然很难看）</p><p>本次输入的水印图片为：</p></li></ol><div align="center">  <img src="https://z4a.net/images/2023/05/22/CCTV.png" alt="CCTV" /></div><ol start="3"><li>水印要添加的坐标</li></ol><p>使用坐标（0,0）可以将水印添加到视频左上角，使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\CCTV.png&quot;</span> -filter_complex <span class="string">&quot;overlay=x=0:y=0&quot;</span> <span class="string">&quot;F:\test6_video\add_watermark.mp4&quot;</span> -y</span><br></pre></td></tr></table></figure><p>为了最快的找到视频的四个边缘，需要了解四个参数：</p><ul><li>main_w(W)：主画面的宽度</li><li>main_h(H)：主画面的高度</li><li>overlay_w(w)：水印宽度</li><li>overlay_h(h)：水印高度</li></ul><p>这样就可以将右上角的视频坐标<code>(W-w,0)</code>替换为<code>(main_w-overlay_w,0)</code>。</p><p>用以下命令可以将<strong>“CCTV”字样的水印</strong>添加到<strong>视频右上角</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\CCTV.png&quot;</span> -filter_complex <span class="string">&quot;overlay=x=main_w-overlay_w:y=0&quot;</span> <span class="string">&quot;F:\test6_video\add_watermark.mp4&quot;</span> -y</span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/c0e63da04a1dbc3d26954bff6830cb51.png" alt="add_watermark" width="67%" /></div><h2 id="视频文字叠加"><a href="#视频文字叠加" class="headerlink" title="视频文字叠加"></a>视频文字叠加</h2><p>叠加文字到视频上。（参考通过-vf使用drawtext的滤波器） </p><p>两个输入：</p><ol><li><p>要处理的视频</p></li><li><p>添加的文字以及属性（大小，颜色，位置，字体路径），<strong>一定要添加字体路径，否则会出现以下报错，提示字体不存在</strong>：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fontconfig error: Cannot load default config file: No such file: (null)</span><br></pre></td></tr></table></figure><p>将大小为30px的红色字样“CCTV”添加到视频的左上角,使用字体为宋体:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf drawtext=fontcolor=red:fontfile=C\\:/Windows/fonts/simhei.ttf:fontsize=30:text=<span class="string">&quot;CCTV&quot;</span>:x=0:y=0 -y <span class="string">&quot;F:\test6_video\add_txt.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>只需要变换坐标将文字添加到视频右上角：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf drawtext=fontcolor=red:fontfile=C\\:/Windows/fonts/simhei.ttf:fontsize=30:text=<span class="string">&quot;CCTV&quot;</span>:x=900:y=0+10 -y <span class="string">&quot;F:\test6_video\add_txt.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/4f29c2f2af8deed055b90b7c2e0b5955.png" alt="add_watermark" width="67%" /></div><h2 id="视频纹理增强"><a href="#视频纹理增强" class="headerlink" title="视频纹理增强"></a>视频纹理增强</h2><p>对视频做锐化操作。 </p><p>三个参数：</p><ul><li>x：领域的宽度 </li><li>y：领域的高度 </li><li>amount：-2 ~ 5。负值时进行模糊操作，正值进行锐化，0时无影响</li></ul><p>默认值的锐化(5x5大小的矩阵，其影响因子为1.0)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp <span class="string">&quot;F:\test6_video\sharpen.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>以上命令等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp=5:5:1 <span class="string">&quot;F:\test6_video\sharpen.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/3bfb324d7e5be82f4453f806e2a72268.png" alt="sharpen" width="67%" /></div><h2 id="视频画面模糊"><a href="#视频画面模糊" class="headerlink" title="视频画面模糊"></a>视频画面模糊</h2><ol><li>使用<code>boxblur</code>进行模糊</li></ol><p>将视频画面进行模糊处理。</p><p>输入参数：</p><ul><li><p>r ：<code>radius</code>表示模糊操作时的邻域半径大小，值越大表示模糊程度越高</p></li><li><p>p：<code>power</code>表示模糊运算的运算次数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf boxblur=10:1 <span class="string">&quot;F:\test6_video\boxblur.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/35f6ffd5cc0f671d01621d3edf1ecc99.png" alt="boxblur" width="67%" /></div><ol start="2"><li>使用<code>unsharp filer</code>进行模糊</li></ol><p>在上述[视频画面模糊](# 视频画面模糊)中我们使用了大于零的<code>amount</code>进行锐化，我们也可以使用小于零的<code>amount</code>进行模糊操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf unsharp=5:5:-2 <span class="string">&quot;F:\test6_video\ubsharp_blur.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/2.png" alt="unsharp_blur" width="67%" /></div><ol start="3"><li>使用<code>smartblur</code>进行模糊</li></ol><p>参数信息：</p><ul><li><p>r：<code>radius</code> 半径，颜色空间或亮度空间中进行高斯模糊时的半径，取值为 0.1 ~ 5.0</p></li><li><p>s：<code>strength</code> 强度，取值 -1 ~ 1，0 时原图输出，-1 ~ 0 进行锐化操作，0 ~ 1 进行模糊操作</p></li><li><p>t：<code>treshold</code> 阀值，取值 -30 ~ 30，0 时对整个图像进行过滤，-30 ~ 0 对平滑区域过滤，0~ 30 对边缘进行过滤。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf smartblur=5:0.8:0 <span class="string">&quot;F:\test6_video\smartblur.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/smartblur.png" alt="smartblur" width="67%" /></div><h2 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h2><p>截取原视频中部分区域视频。（参考使用crop进行视频画面的裁剪） </p><p>参数（<strong>严格按照顺序</strong>）：</p><ul><li>裁剪后宽度</li><li>裁剪后高度</li><li>起始位(宽)</li><li>起始位置(高)</li></ul><p>截取输入视频的四分之一的左上位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -vf crop=480:200:0:0 <span class="string">&quot;F:\test6_video\crop.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>使用命令查看分辨率，<strong>发现大小变为原来的二分之一</strong>。</p><div align="center"><img src="https://z4a.net/images/2023/05/22/display_size4.png" alt="image-20230519220351452" width="67%" /></div><p>以下为结果展示，<strong>红款框出为裁剪后的视频</strong>。</p><div align="center">  <img src="https://z4a.net/images/2023/05/22/55ff5ecaf40d58c952a28a4c31a41947.png" alt="crop" width="67%" /></div><h2 id="视频画中画"><a href="#视频画中画" class="headerlink" title="视频画中画"></a>视频画中画</h2><p>将视频2作为小窗口叠加到视频1的右上角。（参考通过overlay和scale实现）。</p><p>三个参数：</p><ol><li>背景视频</li><li>嵌入视频</li><li>嵌入视频位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\back.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -filter_complex <span class="string">&quot;[0:v][1:v]overlay=main_w-overlay_w-10:10[v]&quot;</span> -map <span class="string">&quot;[v]&quot;</span> <span class="string">&quot;F:\test6_video\PIP.mp4&quot;</span></span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li><p><code>[0:v]</code> : 第一个视频流；</p><p><code>[1:v]</code> : 第二个视频流；</p></li><li><p><code>main_w-overlay_w-10:10</code> ： 表示视频位置为<strong>（main_w-overlay_w-10，10）</strong></p></li><li><p><code>[v]</code> : 输出视频流的标签；</p></li><li><p><code>-map &quot;[v]&quot;</code> : 将带有标签为<code>&quot;[v]&quot;</code>的输出视频流映射到输出文件。</p></li></ol><div align="center"><img src="https://z4a.net/images/2023/05/22/picture_in_picture1.png" alt="PIP1" width="67%" /></div><p>保持原尺寸感觉还是太小还是太小，需要增大嵌入视频的分辨率大小，于是做出如下改进：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;F:\test6_video\back.mp4&quot;</span> -i <span class="string">&quot;F:\test6_video\input.mp4&quot;</span> -filter_complex <span class="string">&quot;[1:v]scale=1500:h=-1[scaled];[0:v][scaled]overlay=main_w-overlay_w-10:10[v]&quot;</span> -map <span class="string">&quot;[v]&quot;</span> <span class="string">&quot;F:\test6_video\PIP2.mp4&quot;</span></span><br></pre></td></tr></table></figure><div align="center"><img src="https://z4a.net/images/2023/05/22/picture_in_picture2.png" alt="PIP2" width="67%" /></div><p>其中：</p><ol><li><p><code>[1:v]scale=200:100[scaled]</code>  :  将视频分辨率改变为<strong>长1500px，宽按照原始比例缩放</strong>。</p></li><li><p><code>[scaled]</code>  : 视频标签，方便后续引用。</p></li><li><p><code>[0:v][scaled]overlay=main_w-overlay_w-10:10</code>  : 将标签为<code>[scaled]</code>的视频嵌入到第一个视频流的<strong>右上角偏离10px的位置</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 音视频信号处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频处理 </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频处理——G711A-law编码</title>
      <link href="/post/yin-pin-chu-li-g711a-lu-bian-ma/"/>
      <url>/post/yin-pin-chu-li-g711a-lu-bian-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本学期有一门音视频处理的课程，虽然老师上课上得确实过于粗糙了，但是确实激起了我的兴趣，课后在不断解决自己的疑惑的过程中还学到了很多有用但冷门的知识。日后应该也会写一篇笔记来记录学习的过程。</p><p>本次实践主题为G711 A律编码，是一种在通信领域应用广泛的编解码标准之一，是非均匀PCM编码的一种，具有良好的压缩效果和兼容性，因此广泛运用在通信领域，且主要在欧洲和亚洲地区广泛运用，我国也广泛采用此编码标准。</p><h2 id="G711A律编码原理"><a href="#G711A律编码原理" class="headerlink" title="G711A律编码原理"></a>G711A律编码原理</h2><h3 id="非均匀PCM"><a href="#非均匀PCM" class="headerlink" title="非均匀PCM"></a>非均匀PCM</h3><p>对于输入的音频信号，每个时刻的信号幅值是完全不同的，最为直观的感受就是在音频播放器中，播放音乐时打开示波器，可以看到音频信号幅值随着播放起起伏伏。变化速度快，且幅值变化没有规律，此时采用均匀PCM编码处理，将输入信号的幅度范围进行等间隔划分的量化，会导致高频部分失真，也无法捕捉到音频信号频繁的动态变化。</p><p><img src="https://www.z4a.net/images/2023/05/08/f2fd610d881cb72475ef1e17d6f7587f.gif" alt="音频波形"></p><p>这时候就可以考虑非均匀变换，根据不同的幅值情况采用非均匀的间隔量化，可以在达到压缩目的的同时获得更高的精度，尽可能不让关键信息丢失。G711A律编码就是非均匀PCM编码的一种。</p><p>对于G711 A律编码，也分为连续信号与离散信号的两种情况。</p><h3 id="连续信号"><a href="#连续信号" class="headerlink" title="连续信号"></a>连续信号</h3><p>对于连续的信号，A律编码采用了两段近似的方法，其表达式为：</p><div align="center"><svg xmlns="http://www.w3.org/2000/svg" width="46.972ex" height="7.738ex" viewBox="0 -1960.1 20761.6 3420.2" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-408-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-408-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-408-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-408-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-408-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-408-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-408-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-408-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-408-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-408-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-408-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-408-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-408-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-408-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-408-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-408-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-408-TEX-N-2061" d=""></path><path id="MJX-408-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-408-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-408-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-408-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-408-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-408-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1511, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2177.8, 0)"><use xlink:href="#MJX-408-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(3233.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-S4-23A7" transform="translate(0, 1061.1)"></use><use xlink:href="#MJX-408-TEX-S4-23A9" transform="translate(0, -561.1)"></use><use xlink:href="#MJX-408-TEX-S4-23A8" transform="translate(0, 0)"></use><svg width="889" height="91.1" y="1060" x="0" viewBox="0 16.1 889 91.1"><use xlink:href="#MJX-408-TEX-S4-23AA" transform="scale(1, 0.448)"></use></svg><svg width="889" height="91.1" y="-651.1" x="0" viewBox="0 16.1 889 91.1"><use xlink:href="#MJX-408-TEX-S4-23AA" transform="scale(1, 0.448)"></use></svg></g><g data-mml-node="mtable" transform="translate(889, 0)"><g data-mml-node="mtr" transform="translate(0, 913.7)"><g data-mml-node="mtd" transform="translate(1520, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(644.5, 516.4) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><g data-mml-node="mrow" transform="translate(1153.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2902.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(3371.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(3848.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4448.3, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4837.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(5409.3, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g></g><g data-mml-node="mtd" transform="translate(10880, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1405.8, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2461.6, 0)"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(16639.1, 0)"></g></g><g data-mml-node="mtr" transform="translate(0, -996.8)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(750, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(1139, 0)"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1639, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2417, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(3301, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3467.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><g data-mml-node="mrow" transform="translate(1153.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2281.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-2F"></use></g></g><g data-mml-node="mi" transform="translate(2781.6, 0)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g></g><g data-mml-node="mo" transform="translate(6999.2, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g></g><g data-mml-node="mrow" transform="translate(1601, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-408-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-N-6C"></use><use xlink:href="#MJX-408-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-408-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g></g></g><rect width="5424.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(5664.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(6133.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(6610.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7210.3, 0)"><use xlink:href="#MJX-408-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(7599.3, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(8171.3, 0)"><use xlink:href="#MJX-408-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8560.3, 0)"><use xlink:href="#MJX-408-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(9838.3, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-408-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1533.5, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mrow" transform="translate(2589.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-408-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-408-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(850, 0)"><use xlink:href="#MJX-408-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(3995, 0)"><use xlink:href="#MJX-408-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(5050.8, 0)"><use xlink:href="#MJX-408-TEX-I-1D434"></use></g></g></g></g><g data-mml-node="mo" transform="translate(17528.1, 0)"></g></g></g></g></svg></div><p>其中，A为峰值幅度。A<del>0</del>为控制压缩度的常数，常取A<del>0</del> &#x3D; 87.6。当 |x| ≤ (A&#x2F;A<del>0</del>)，我们将其视为幅值小的信号，当 A ≥ |x| ≥ (A&#x2F;A<del>0</del>)时，我们将其视为幅值大的信号。</p><p>根据表达式，可以得到如下的函数图像：</p><img src="https://www.z4a.net/images/2023/05/08/G711A.png" alt="连续G711A律编码" style="zoom: 50%;" /><p>从上图我们可以看出：</p><ul><li><p>对于幅值大的信号，幅值越高，变化得越平缓，压缩精度较高；</p></li><li><p>对于幅值小的信号，幅值越高，变化得越陡峭，压缩精度较低；</p></li></ul><p>有了编码压缩的过程，那自然就有解码的过程，也就是对编码函数取逆函数，其表达式如下：</p><div align="center"><svg xmlns="http://www.w3.org/2000/svg" width="54.463ex" height="7.361ex" viewBox="0 -1876.7 24072.7 3253.4" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-828-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-828-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-828-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-828-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-828-TEX-S4-7B" d="M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z"></path><path id="MJX-828-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-828-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-828-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-828-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-828-TEX-N-2061" d=""></path><path id="MJX-828-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-828-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-828-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-828-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-828-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-828-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-828-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-828-TEX-N-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path><path id="MJX-828-TEX-N-70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z"></path><path id="MJX-828-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-828-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-828-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-828-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-828-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D453"></use></g><g data-mml-node="TeXAtom" transform="translate(603, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-828-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(1834.5, 0)"><use xlink:href="#MJX-828-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(2890.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-S4-7B"></use></g><g data-mml-node="mtable" transform="translate(806, 0)"><g data-mml-node="mtr" transform="translate(0, 913.4)"><g data-mml-node="mtd" transform="translate(4198.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(389, 0)"><g data-mml-node="mrow" transform="translate(220, 457.1) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="msub" transform="translate(1043.3, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3291.3, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(3680.3, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g></g><g data-mml-node="mtd" transform="translate(14330.9, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(768, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1323.8, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2379.6, 0)"><g data-mml-node="mi" transform="translate(1186, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, -913.4)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(362.7, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="msub" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g><rect width="1015.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(1255.7, 0)"><use xlink:href="#MJX-828-TEX-N-65"></use><use xlink:href="#MJX-828-TEX-N-78" transform="translate(444, 0)"></use><use xlink:href="#MJX-828-TEX-N-70" transform="translate(972, 0)"></use></g><g data-mml-node="mo" transform="translate(2783.7, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="mo" transform="translate(2783.7, 0)"><use xlink:href="#MJX-828-TEX-N-5B"></use></g><g data-mml-node="mo" transform="translate(3061.7, 0)"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(3450.7, 0)"><g data-mml-node="mrow" transform="translate(220, 457.1) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1278, 0)"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="mo" transform="translate(2112, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2278.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="mi" transform="translate(1168.3, -346.3) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><rect width="2626.9" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6317.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mi" transform="translate(6595.6, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7085.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-828-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(7585.9, 0)"><use xlink:href="#MJX-828-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8586.1, 0)"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9086.1, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9475.1, 0)"><use xlink:href="#MJX-828-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(9753.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(10222.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(10699.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(11299.1, 0)"><use xlink:href="#MJX-828-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(11688.1, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(12178.1, 0)"><use xlink:href="#MJX-828-TEX-N-29"></use></g></g><g data-mml-node="mtd" transform="translate(13567.1, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(1186, 394) scale(0.707)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="mrow" transform="translate(220, -346.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-828-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(1278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-N-6C"></use><use xlink:href="#MJX-828-TEX-N-6E" transform="translate(278, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(834, -150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(2162, 0)"><use xlink:href="#MJX-828-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2328.7, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(750, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-828-TEX-N-30"></use></g></g></g></g></g><rect width="2662.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3180.1, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(4235.9, 0)"><use xlink:href="#MJX-828-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(5003.6, 0)"><use xlink:href="#MJX-828-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(6059.4, 0)"><use xlink:href="#MJX-828-TEX-I-1D434"></use></g></g></g></g><g data-mml-node="mo" transform="translate(21182.5, 0)"></g></g></g></g></svg></div><h3 id="离散信号"><a href="#离散信号" class="headerlink" title="离散信号"></a>离散信号</h3><p>使用连续的方法对信号进行G711A律编码显然计算量很大，而且对于计算机中的音频数据，读取后都是离散的信号集合，因此我们需要一个迫近的连续处理图像的离散函数，此时就有了接下来的13段折线压扩，也就是离散化的方式，此过程也被称为量化。</p><p>13段折现法的量化方式为：</p><ol><li><p>将输入信号的幅度范围归一化为(-1,1);</p></li><li><p>对x正半轴的区间(0,1)，以1&#x2F;2递减规律将该区间不均匀地分成8段：</p><p>以（0，1）的中点1&#x2F;2为界将该区间等分两段；</p><p>以（0，1&#x2F;2）的中点1&#x2F;4为界将该区间等分两段；</p><p>以（0，1&#x2F;4）的中点1&#x2F;8为界将该区间等分两段；</p><p>以（0，1&#x2F;8）的中点1&#x2F;16为界将该区间等分两段；</p><p>以（0，1&#x2F;16）的中点1&#x2F;32为界将该区间等分两段；</p><p>以（0，1&#x2F;32）的中点1&#x2F;64为界将该区间等分两段；</p><p>以 （0，1&#x2F;64）的中点1&#x2F;128为界将该区间等分两段，共计8段；</p></li><li><p>对于上述的8段区间，每个区间再均匀分成16段；那么，最终整个(0,1)区间被分成128段。</p><img src="https://www.z4a.net/images/2023/05/08/x_13.png" style="zoom: 33%;" /></li><li><p>对x负半轴(-1,0)区间，采用上述 2,3的操作将该区间分成128段；这样，最终x轴的（-1，1）区间被分成256个区间。</p></li><li><p>将y轴（-1,1）区间均匀分成256段 ，共256个量化级。</p></li><li><p>把x轴和y轴的相应交点连接起来，得到13折线（其中正负轴的第一段和第二段折线斜率相同，合并为一条线段）。</p></li></ol><p>按照步骤可以绘制出以下函数图像：</p><img src="https://www.z4a.net/images/2023/05/08/xy_13.png" style="zoom:67%;" /><p>可以看出，与连续信号编码函数图像十分接近。</p><p>解码过程就是编码过程的反操作，因此不再赘述。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一般来说，G711 A律编码的输入音频信号的位深为16bit，编码后的位深为8bit，因此接下来都以16bit的音频作为例子。</p><p>其中，测试用的音频数据我使用的是如下三段音频：</p><ul><li>单声道：<code>wav5.wav</code></li><li>双声道：<code>wav6.wav</code>,<code>youjianchuiyan.wav</code></li></ul><h3 id="使用audioop库进行实现"><a href="#使用audioop库进行实现" class="headerlink" title="使用audioop库进行实现"></a>使用audioop库进行实现</h3><p>在Python中，可以直接使用第三方库<code>audioop</code>直接进行G711 A律的编解码操作。在编解码操作之前，需要打开和读取音频，可以使用Python内置的<code>wave</code>库进行读取。</p><ul><li><p>打开音频：<code>wav_in = wave.open(文件路径,&quot;rb&quot;)</code>，<strong>“rb”是以2进制进行读取。</strong></p></li><li><p>获取音频信息：<code>nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</code></p><table><thead><tr><th align="left">参数</th><th align="left">翻译</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">nchannels</td><td align="left">声道数</td><td align="left">1为单声道，2为双声道</td></tr><tr><td align="left">sampwidth</td><td align="left">采样位宽</td><td align="left">每个采样点用多少位，常见为16bit</td></tr><tr><td align="left">framerate</td><td align="left">比特率</td><td align="left">每秒所包含的数据大小</td></tr><tr><td align="left">nframes</td><td align="left">总采样点</td><td align="left">离散信号的总采样点（x的个数）</td></tr><tr><td align="left">comptype</td><td align="left">压缩类型</td><td align="left">指音频采用的压缩标准，如“MPEG”，如没有则显示“None”</td></tr><tr><td align="left">compname</td><td align="left">压缩方法</td><td align="left">压缩算法或压缩格式，如未压缩显示“not compressed”</td></tr></tbody></table></li><li><p>读取音频：<code>wav_in.readframes(nframes)</code></p></li><li><p>G711 A律编码：<code>audioop.lin2alaw(音频数据，sampwidth)</code></p><ul><li>sampwidth &#x3D; 1 -&gt; 8 bit的采样位宽，在此过程中就是编码后音频的位宽。</li><li>sampwidth &#x3D; 2 -&gt; 16 bit的采样位宽，在此过程中就是输入音频与解码音频的采样位宽。</li></ul></li><li><p>保存音频：</p><ol><li>设置保存音频的参数：<code>nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</code></li><li>写入：<code>wav_out.writeframes(audio_data)</code>，其中audio_data为bit数据流。</li></ol></li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> audioop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_G711</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="comment"># 打开 WAV 文件</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取采样参数</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对采样值进行 A 律压缩编码</span></span><br><span class="line">        compressed_data = audioop.lin2alaw(frames, sampwidth)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新的 WAV 文件并写入压缩后的数据</span></span><br><span class="line">        <span class="keyword">with</span> wave.<span class="built_in">open</span>(<span class="string">&#x27;./output/encode.wav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">            <span class="comment"># 设置参数</span></span><br><span class="line">            wav_out.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            wav_out.writeframes(compressed_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;G.711 A-law encoding is done&#x27;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_G711</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="comment"># 打开 WAV 文件</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取采样参数</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对采样值进行 A 律压缩解码</span></span><br><span class="line">        compressed_data = audioop.lin2alaw(frames, sampwidth)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新的 WAV 文件并写入压缩后的数据</span></span><br><span class="line">        <span class="keyword">with</span> wave.<span class="built_in">open</span>(<span class="string">&#x27;./output/encode.wav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">            <span class="comment"># 设置参数</span></span><br><span class="line">            wav_out.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            wav_out.writeframes(compressed_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;G.711 A-law encoding is done&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_path = <span class="string">&quot;./input/wav6.wav&quot;</span></span><br><span class="line">    encode_G711(input_path)</span><br><span class="line">    input_path = <span class="string">&quot;./output/encode.wav&quot;</span></span><br><span class="line">    decode_G711(input_path)</span><br></pre></td></tr></table></figure><p>因为处理的结果与自行编程实现的处理结果一样，因此我只展示自行编程实现的过程，处理结果在[量化——编码](# 量化——编码)与[量化——解码](# 量化——解码)部分有展示。</p><h3 id="原理编程实现"><a href="#原理编程实现" class="headerlink" title="原理编程实现"></a>原理编程实现</h3><p>根据G711 A律编码的原理，要实现编码需要经过采样、量化、编码三个过程。</p><ul><li>采样：将连续的音频数据进行离散化，此步骤还需要将音频bit流转化为整数。</li><li>量化：将离散化的数据按照13折现法的量化范围映射到一个固定数量的量化级别上。</li><li>编码：将整数转化为bit流，并将其转换为一个8位或者16位二进制数据。</li></ul><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p><code>audioop</code>库中的<code>linear2alaw</code>与<code>alaw2linear</code>函数，采样与转化bit流的过程并没有体现。所以，不能像调用<code>audioop</code>库一样简单使用<code>wave</code>读取音频数据，将bit流转化为整数的过程也需要单独实现，且需要根据不同的音频格式采取不同的转化策略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_audio</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取音频数据</span></span><br><span class="line"><span class="string">    :param input_path: 音频路径</span></span><br><span class="line"><span class="string">    :return: 读取出的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取音频格式信息</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;音频格式信息：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;声道数：<span class="subst">&#123;nchannels&#125;</span>,样本大小：<span class="subst">&#123;sampwidth&#125;</span> ,采样率：<span class="subst">&#123;framerate&#125;</span> ,采样点数：<span class="subst">&#123;nframes&#125;</span>,&quot;</span></span><br><span class="line">              <span class="string">f&quot;压缩类型：<span class="subst">&#123;comptype&#125;</span>，compname：<span class="subst">&#123;compname&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据不同的sampwidth采取不同的读取策略</span></span><br><span class="line">        <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为1的音频，采取一个一个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int8).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line">        <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为2的音频，采取两个两个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int16).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(audio_data.shape)</span></span><br><span class="line">        <span class="comment"># 如果音频为双声道，需要将其分为左右声道</span></span><br><span class="line">        <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">            left_channel = audio_data[:, <span class="number">0</span>]</span><br><span class="line">            right_channel = audio_data[:, <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 将左右声道数据装入一个list中</span></span><br><span class="line">            left_right_data = [left_channel, right_channel]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_right_data = [audio_data[:, <span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> left_right_data, nchannels, sampwidth, framerate, nframes</span><br></pre></td></tr></table></figure><p>对于不同的sampwidth，使用<code>np.frombuffer</code>读取时，读取后的返回值为整数列表，对于不同的采样宽度：</p><ul><li>sampwidth &#x3D; 1 时，<code>dtype=np.int8</code>采取一个一个字节读入的方式</li><li>sampwidth &#x3D; 2 时，<code>dtype=np.int16</code>采取两个两个字节读入的方式</li></ul><p>当输入音频的声道数为2时，不能直接像单声道那样直接处理，而是应该将左右声道分开处理，后续对其分别进行编码与解码的操作。<code>reshape(-1, nchannels)</code>是为了方便将采样数据分离。</p><ul><li>nchannels &#x3D; 2 时，将采样数据分为<code>audio_data[:, 0]</code>和<code>audio_data[:, 1]</code></li><li>nchannels &#x3D; 1 时，不进行分开处理，但为了格式与<code>nchannels = 2</code>保持一致，还是使用<code>[audio_data[:, 0]]</code>作为最后的读取结果。</li></ul><h4 id="量化——编码"><a href="#量化——编码" class="headerlink" title="量化——编码"></a>量化——编码</h4><p>对转化为整数的数据列表，根据13折现法进行编码量化，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号位掩码</span></span><br><span class="line">SIGN_BIT = <span class="number">128</span></span><br><span class="line"><span class="comment"># 量化位掩码</span></span><br><span class="line">QUANT_MASK = <span class="number">15</span></span><br><span class="line"><span class="comment"># 段偏移码</span></span><br><span class="line">SEG_SHIFT = <span class="number">4</span></span><br><span class="line"><span class="comment"># 段掩码</span></span><br><span class="line">SEG_MASK = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编码的划分点</span></span><br><span class="line">seg_aend = [<span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear2alaw</span>(<span class="params">audio_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频数据进行G711A律编码</span></span><br><span class="line"><span class="string">    :param audio_data: 待编码音频数据</span></span><br><span class="line"><span class="string">    :return: 编码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存编码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law encoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(audio_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> pcm_val <span class="keyword">in</span> audio_data:</span><br><span class="line">            <span class="comment"># 右移 3 位相当于除以 8</span></span><br><span class="line">            pcm_val = pcm_val &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置掩码值</span></span><br><span class="line">            <span class="keyword">if</span> pcm_val &gt;= <span class="number">0</span>:</span><br><span class="line">                mask = <span class="number">213</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask = <span class="number">85</span></span><br><span class="line">                pcm_val = -pcm_val - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定pcm_val所属的段</span></span><br><span class="line">            seg = search(pcm_val, seg_aend, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 超出预期线性段范围</span></span><br><span class="line">            <span class="keyword">if</span> seg &gt;= <span class="number">8</span>:</span><br><span class="line">                result.append(<span class="number">127</span> ^ mask)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 计算编码值的高 3 位</span></span><br><span class="line">                aval = seg &lt;&lt; SEG_SHIFT</span><br><span class="line">                <span class="keyword">if</span> seg &lt; <span class="number">2</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; <span class="number">1</span>) &amp; QUANT_MASK</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; seg) &amp; QUANT_MASK</span><br><span class="line">                <span class="comment"># 计算完整 A-law 编码值并添加到result中</span></span><br><span class="line">                result.append(aval ^ mask)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="量化——解码"><a href="#量化——解码" class="headerlink" title="量化——解码"></a>量化——解码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">alaw2linear</span>(<span class="params">encode_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    G711 a律解码</span></span><br><span class="line"><span class="string">    :param encode_data: 经过编码的音频数据</span></span><br><span class="line"><span class="string">    :return: 解码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存解码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law decoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(encode_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> a_val <span class="keyword">in</span> encode_data:</span><br><span class="line">            <span class="comment"># 将正负分离</span></span><br><span class="line">            a_val ^= <span class="number">85</span></span><br><span class="line">            <span class="comment"># 计算 t 的低 12 位</span></span><br><span class="line">            t = (a_val &amp; QUANT_MASK) &lt;&lt; <span class="number">4</span></span><br><span class="line">            <span class="comment"># 计算线性段索引</span></span><br><span class="line">            seg = (a_val &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算解码值</span></span><br><span class="line">            <span class="keyword">if</span> seg == <span class="number">0</span>:</span><br><span class="line">                t += <span class="number">8</span></span><br><span class="line">            <span class="keyword">elif</span> seg == <span class="number">1</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">                t &lt;&lt;= seg - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定符号并将结果加入result</span></span><br><span class="line">            <span class="keyword">if</span> a_val &amp; SIGN_BIT:</span><br><span class="line">                result.append(t)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(-t)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>因为在<code>read_audio</code>函数（音频读取部分）我们对<code>nchannels = 2</code>的音频进行了分开处理，所以我们保存音频的部分需要将分开的后的音频数据合并，这边我使用<code>np.column_stack</code>将分离后的数据合并。</p><p>对于<code>nchannels = 1的音频数据，因为在</code>read_audio<code>函数中保持了相同的格式，所以另一个声道数据为</code>[]&#96;。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_audio</span>(<span class="params">output_path, data, nchannels, sampwidth, framerate, nframes, processbar=<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment"># 将所有通道的数据组合</span></span><br><span class="line">    recovered_audio_data = np.column_stack(<span class="built_in">tuple</span>(data))</span><br><span class="line">    data = recovered_audio_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(sampwidth)</span></span><br><span class="line">    <span class="comment"># 获取进度条的总进度</span></span><br><span class="line">    <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">        processbar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将整数数组转换为字节流</span></span><br><span class="line">    byte_stream = io.BytesIO()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Audio is being synthesized---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;B&#x27;：无符号整数，将整数转换为一个长度为1字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, sample))</span><br><span class="line">                bar()</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;h&#x27; 有符号短整型，将整数转换为一个长度为2字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;h&#x27;</span>, <span class="built_in">int</span>(sample)))</span><br><span class="line">                bar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将字节流写入</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">        <span class="comment"># 设置音频参数</span></span><br><span class="line">        wav_out.setnchannels(nchannels)</span><br><span class="line">        wav_out.setsampwidth(sampwidth)</span><br><span class="line">        wav_out.setframerate(framerate)</span><br><span class="line">        wav_out.setnframes(nframes)</span><br><span class="line">        <span class="comment"># 按照参数将字节流写入</span></span><br><span class="line">        wav_out.writeframes(byte_stream.getvalue())</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---G.711 A-law encoding is done---&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---G.711 A-law decoding is done---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The audio is saved in &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>对于整数数组转换为字节流的过程中，对于不同的<code>sampwidth</code>，我们需要采取不同二进制打包策略，不然无法正确输出音频文件。</p><ul><li>sampwidth &#x3D; 1 时，数据经过<code>linear2alaw</code>函数的编码，因此我们需要将整数转换为一个长度为1字节的字符串，使用<code>&#39;B&#39;：无符号整数</code>的打包格式</li><li>sampwidth &#x3D; 1 时，数据经过<code>alaw2linear</code>函数的解码，因此我们需要将整数转换为一个长度为2字节的字符串，使用<code>&#39;h&#39;：有符号短整型</code>的打包格式</li></ul><p>在最后使用<code>wav</code>进行音频文件的输出时，根据目的不同使用不同的<code>sampwidth </code>取值。</p><ul><li>编码后的数据，采样位深一般由 2 → 1。</li><li>解码后的数据，采样位深一般由 1 → 2。</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>由于在<code>read_audio</code>函数中将左右声道数据分开后打包装入<code>left_right_data</code>列表中，所以需要使用循环将其取出。处理后将其打包装入<code>data</code>列表中，方便后续<code>save_audio</code>函数处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_g711</span>(<span class="params">audio_data, <span class="built_in">type</span>=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频进行编码与解码操作</span></span><br><span class="line"><span class="string">    :param audio_data:待处理的音频数据</span></span><br><span class="line"><span class="string">    :param type:处理类型：1-编码 2-解码</span></span><br><span class="line"><span class="string">    :return:处理后的数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 读取所有通道的音频信息</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> audio_data:</span><br><span class="line">        <span class="comment"># 编码操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">            encoded_channel = linear2alaw(channel)</span><br><span class="line">            data.append(encoded_channel)</span><br><span class="line">        <span class="comment"># 解码操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decoded_channel = alaw2linear(channel)</span><br><span class="line">            data.append(decoded_channel)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h5 id="G711A律编码结果"><a href="#G711A律编码结果" class="headerlink" title="G711A律编码结果"></a>G711A律编码结果</h5><p>测试对象我选择了<code>wav5.wav</code>、<code>wav6.wav</code>作为处理对象，分别对应音频单声道与双声道的情况。下面只展示<code>linear2alaw</code>函数处理的结果。</p><p>结果及分析：</p><ul><li><p><code>wav5.wav</code></p><p>程序输出结果：</p><img src="https://z4a.net/images/2023/05/05/wav5_en.png" alt="image-20230505164211005" style="zoom: 67%;" /><p>使用<code>ffprobe -i wav5_encode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav5_or_en.png" alt="image-20230505164602673" style="zoom: 80%;" /></li><li><p><code>wav6.wav</code></p><p>程序输出结果：</p><img src="https://z4a.net/images/2023/05/05/wav6_en.png" alt="image-20230505164329917" style="zoom:67%;" /><p>使用<code>ffprobe -i wav6_encode.wav -show_format</code>命令查看格式信息：</p></li></ul><img src="https://z4a.net/images/2023/05/05/wav6_or_en.png" alt="image-20230505164758748" style="zoom:80%;" /><p><strong>从格式上可以看出，<code>size</code>与<code>bit_rate</code>都相比原音频减少了约1&#x2F;2</strong>。其他参数并没有明显变化。播放编码后的音频<code>wav5_encode.wav</code>和<code>wav6_encode.wav</code>，<strong>可以听出有非常明显的杂音，类似于老电视机的沙沙声，但是人声得以保留，有一部分语音确实有些损坏，只有仔细才能听出说话的内容。</strong></p><h5 id="G711A律解码结果"><a href="#G711A律解码结果" class="headerlink" title="G711A律解码结果"></a>G711A律解码结果</h5><p>测试对象使用编码后的<code>wav5_encode.wav</code>、<code>wav6_encode.wav</code>，分别对应音频单声道与双声道的情况。下面只展示<code>alaw2linear</code>函数处理的结果，使用<code>audioop</code>库的处理结果相同。</p><p>结果及分析：</p><ul><li><p><code>wav5_encode.wav</code></p><img src="https://z4a.net/images/2023/05/05/wav5_de.png" alt="image-20230505165948766" style="zoom:67%;" /><p>使用<code>ffprobe -i wav5_decode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav5_en_de.png" alt="image-20230505170215701" style="zoom: 67%;" /></li><li><p><code>wav6_encode.wav</code></p><img src="https://z4a.net/images/2023/05/05/wav6_de.png" alt="image-20230505170017115" style="zoom:67%;" /><p>使用<code>ffprobe -i wav6_decode.wav -show_format</code>命令查看格式信息：</p><img src="https://z4a.net/images/2023/05/05/wav6_en_de.png" alt="image-20230505170339724" style="zoom:67%;" /></li></ul><p>从格式上可以看出<code>wav5_decode.wav</code>与<code>wav6_decode.wav</code>的<code>size</code>与<code>bit_rate</code>分别是<code>wav5_encode.wav</code>与<code>wav6_encode.wav</code>的两倍，也就是这两项指数回到了原音频的水准。</p><p>使用播放器播放<code>wav5_decode.wav</code>与<code>wav6_decode.wav</code>，与原音频<code>wav5.wav</code>、<code>wav6.wav</code>听起来几乎没有差别。</p><h5 id="效率与进度条"><a href="#效率与进度条" class="headerlink" title="效率与进度条"></a>效率与进度条</h5><p>如果输出的是老师准备的<code>youjianchuiyan.wav</code>（时长：3分15秒），那么处理时长会有点长（2分半左右）。因为运行效率不高，所以为了更加直观查看到处理的过程，我采用<code>alive_bar</code>库对编码、解码、转换为字节流的部分添加上了进度条，这在编解码与结果展示部分也有体现。</p><img src="https://z4a.net/images/2023/05/05/youjian_en_de.png" alt="image-20230505190307758" style="zoom: 67%;" /><p>这是因为编码函数<code>linear2alaw</code>与解码函数<code>alaw2linear</code>使用的是for循环对值进行一个个的处理，因此处理效率较为低下。但是编码与解码的过程可以完美的实现，且可以满足大部分音频的G711A律压扩的要求。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号位掩码</span></span><br><span class="line">SIGN_BIT = <span class="number">128</span></span><br><span class="line"><span class="comment"># 量化位掩码</span></span><br><span class="line">QUANT_MASK = <span class="number">15</span></span><br><span class="line"><span class="comment"># 段偏移码</span></span><br><span class="line">SEG_SHIFT = <span class="number">4</span></span><br><span class="line"><span class="comment"># 段掩码</span></span><br><span class="line">SEG_MASK = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编码的划分点</span></span><br><span class="line">seg_aend = [<span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">val, array, size</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在给定数组中查找 val小于等于的元素，并返回索引</span></span><br><span class="line"><span class="string">    :param val: 输入值</span></span><br><span class="line"><span class="string">    :param array: 划分点列表</span></span><br><span class="line"><span class="string">    :param size: 线性段的数目</span></span><br><span class="line"><span class="string">    :return: 返回线性段索引</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        <span class="keyword">if</span> val &lt;= array[i]:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear2alaw</span>(<span class="params">audio_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频数据进行G711A律编码</span></span><br><span class="line"><span class="string">    :param audio_data: 待编码音频数据</span></span><br><span class="line"><span class="string">    :return: 编码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存编码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law encoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(audio_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> pcm_val <span class="keyword">in</span> audio_data:</span><br><span class="line">            <span class="comment"># 右移 3 位相当于除以 8</span></span><br><span class="line">            pcm_val = pcm_val &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置掩码值</span></span><br><span class="line">            <span class="keyword">if</span> pcm_val &gt;= <span class="number">0</span>:</span><br><span class="line">                mask = <span class="number">213</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask = <span class="number">85</span></span><br><span class="line">                pcm_val = -pcm_val - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定pcm_val所属的段</span></span><br><span class="line">            seg = search(pcm_val, seg_aend, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 超出预期线性段范围</span></span><br><span class="line">            <span class="keyword">if</span> seg &gt;= <span class="number">8</span>:</span><br><span class="line">                result.append(<span class="number">127</span> ^ mask)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 计算编码值的高 3 位</span></span><br><span class="line">                aval = seg &lt;&lt; SEG_SHIFT</span><br><span class="line">                <span class="keyword">if</span> seg &lt; <span class="number">2</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; <span class="number">1</span>) &amp; QUANT_MASK</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    aval |= (pcm_val &gt;&gt; seg) &amp; QUANT_MASK</span><br><span class="line">                <span class="comment"># 计算完整 A-law 编码值并添加到result中</span></span><br><span class="line">                result.append(aval ^ mask)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alaw2linear</span>(<span class="params">encode_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    G711 a律解码</span></span><br><span class="line"><span class="string">    :param encode_data: 经过编码的音频数据</span></span><br><span class="line"><span class="string">    :return: 解码后的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于储存解码结果</span></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---G711 a-law decoding begins---&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用进度条方便查看处理进度</span></span><br><span class="line">    <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(encode_data), force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> a_val <span class="keyword">in</span> encode_data:</span><br><span class="line">            <span class="comment"># 将正负分离</span></span><br><span class="line">            a_val ^= <span class="number">85</span></span><br><span class="line">            <span class="comment"># 计算 t 的低 12 位</span></span><br><span class="line">            t = (a_val &amp; QUANT_MASK) &lt;&lt; <span class="number">4</span></span><br><span class="line">            <span class="comment"># 计算线性段索引</span></span><br><span class="line">            seg = (a_val &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算解码值</span></span><br><span class="line">            <span class="keyword">if</span> seg == <span class="number">0</span>:</span><br><span class="line">                t += <span class="number">8</span></span><br><span class="line">            <span class="keyword">elif</span> seg == <span class="number">1</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t += <span class="number">264</span></span><br><span class="line">                t &lt;&lt;= seg - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 确定符号并将结果加入result</span></span><br><span class="line">            <span class="keyword">if</span> a_val &amp; SIGN_BIT:</span><br><span class="line">                result.append(t)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(-t)</span><br><span class="line">            bar()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_audio</span>(<span class="params">input_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取音频数据</span></span><br><span class="line"><span class="string">    :param input_path: 音频路径</span></span><br><span class="line"><span class="string">    :return: 读取出的音频数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(input_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> wav_in:</span><br><span class="line">        <span class="comment"># 获取音频格式信息</span></span><br><span class="line">        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_in.getparams()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;音频格式信息：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;声道数：<span class="subst">&#123;nchannels&#125;</span>,样本大小：<span class="subst">&#123;sampwidth&#125;</span> ,采样率：<span class="subst">&#123;framerate&#125;</span> ,采样点数：<span class="subst">&#123;nframes&#125;</span>,&quot;</span></span><br><span class="line">              <span class="string">f&quot;压缩类型：<span class="subst">&#123;comptype&#125;</span>，compname：<span class="subst">&#123;compname&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有采样值</span></span><br><span class="line">        frames = wav_in.readframes(nframes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据不同的sampwidth采取不同的读取策略</span></span><br><span class="line">        <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为1的音频，采取一个一个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int8).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line">        <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 对于采样深度为2的音频，采取两个两个字节读入</span></span><br><span class="line">            audio_data = np.frombuffer(frames, dtype=np.int16).reshape(-<span class="number">1</span>, nchannels).copy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(audio_data.shape)</span></span><br><span class="line">        <span class="comment"># 如果音频为双声道，需要将其分为左右声道</span></span><br><span class="line">        <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">            left_channel = audio_data[:, <span class="number">0</span>]</span><br><span class="line">            right_channel = audio_data[:, <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 将左右声道数据装入一个list中</span></span><br><span class="line">            left_right_data = [left_channel, right_channel]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_right_data = [audio_data[:, <span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">return</span> left_right_data, nchannels, sampwidth, framerate, nframes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_audio</span>(<span class="params">output_path, data, nchannels, sampwidth, framerate, nframes, processbar=<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment"># 将所有通道的数据组合</span></span><br><span class="line">    recovered_audio_data = np.column_stack(<span class="built_in">tuple</span>(data))</span><br><span class="line">    data = recovered_audio_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(sampwidth)</span></span><br><span class="line">    <span class="comment"># 获取进度条的总进度</span></span><br><span class="line">    <span class="keyword">if</span> nchannels == <span class="number">2</span>:</span><br><span class="line">        processbar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将元组转换为字节流</span></span><br><span class="line">    byte_stream = io.BytesIO()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Audio is being synthesized---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;B&#x27;：无符号整数，将整数转换为一个长度为1字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, sample))</span><br><span class="line">                bar()</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">with</span> alive_bar(<span class="built_in">len</span>(data) * processbar, force_tty=<span class="literal">True</span>) <span class="keyword">as</span> bar:</span><br><span class="line">            <span class="keyword">for</span> sample <span class="keyword">in</span> chain.from_iterable(data):</span><br><span class="line">                <span class="comment"># &#x27;h&#x27; 表示有符号短整型，将整数转换为一个长度为2字节的字符串</span></span><br><span class="line">                byte_stream.write(struct.pack(<span class="string">&#x27;h&#x27;</span>, <span class="built_in">int</span>(sample)))</span><br><span class="line">                bar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将字节流写入</span></span><br><span class="line">    <span class="keyword">with</span> wave.<span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wav_out:</span><br><span class="line">        <span class="comment"># 设置音频参数</span></span><br><span class="line">        wav_out.setnchannels(nchannels)</span><br><span class="line">        wav_out.setsampwidth(sampwidth)</span><br><span class="line">        wav_out.setframerate(framerate)</span><br><span class="line">        wav_out.setnframes(nframes)</span><br><span class="line">        <span class="comment"># 按照参数将字节流写入</span></span><br><span class="line">        wav_out.writeframes(byte_stream.getvalue())</span><br><span class="line">    <span class="keyword">if</span> sampwidth == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---G.711 A-law encoding is done---&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sampwidth == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---G.711 A-law decoding is done---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The audio is saved in &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_g711</span>(<span class="params">audio_data, <span class="built_in">type</span>=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对音频进行编码与解码操作</span></span><br><span class="line"><span class="string">    :param audio_data:待处理的音频数据</span></span><br><span class="line"><span class="string">    :param type:处理类型：1-编码 2-解码</span></span><br><span class="line"><span class="string">    :return:处理后的数据 -&gt; list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 读取所有通道的音频信息</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> audio_data:</span><br><span class="line">        <span class="comment"># 编码操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">            encoded_channel = linear2alaw(channel)</span><br><span class="line">            data.append(encoded_channel)</span><br><span class="line">        <span class="comment"># 解码操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            decoded_channel = alaw2linear(channel)</span><br><span class="line">            data.append(decoded_channel)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 编码</span></span><br><span class="line">    input_path = <span class="string">&quot;./input/wav6.wav&quot;</span></span><br><span class="line">    audio_data, nchannels, sampwidth, framerate, nframes = read_audio(input_path)</span><br><span class="line">    encoded_data = test_g711(audio_data, <span class="built_in">type</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(encoded_data)</span></span><br><span class="line">    save_audio(output_path=<span class="string">&quot;./output/encode_demo.wav&quot;</span>, data=encoded_data, nchannels=nchannels, sampwidth=<span class="number">1</span>,</span><br><span class="line">               framerate=framerate, nframes=nframes)</span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    encode_path = <span class="string">&quot;./output/encode_demo.wav&quot;</span></span><br><span class="line">    audio_data, nchannels, sampwidth, framerate, nframes = read_audio(encode_path)</span><br><span class="line">    decoded_data = test_g711(audio_data, <span class="built_in">type</span>=<span class="number">2</span>)</span><br><span class="line">    save_audio(output_path=<span class="string">&quot;./output/decode_demo.wav&quot;</span>, data=decoded_data, nchannels=nchannels, sampwidth=<span class="number">2</span>,</span><br><span class="line">               framerate=framerate, nframes=nframes)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 音视频信号处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 音视频信号处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV-高斯金字塔</title>
      <link href="/post/ji-qi-shi-jue-sheng-cheng-gao-si-jin-zi-ta/"/>
      <url>/post/ji-qi-shi-jue-sheng-cheng-gao-si-jin-zi-ta/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机器视觉是本学期的专业课，上了几节课感觉和数字图像处理有很多知识点是相同的，毕竟机器视觉方面的研究底子都很厚，硬件软件方面都有涉及，实验一就是相机的几何标定，获得相机的内部参数什么的，虽然完成了，但事后总感觉有点意义不明，毕竟课堂上学到的东西一点没用到，以后也不需要这样测定几何参数。还在课堂上得知神经网络的小趣闻，那说实话，科学界普遍不看好神经网络也不是没有原因，这东西本质就是“映射”，但是没有什么理论基础，没人知道为什么会这样，出乎意料就是效果不错，在识别领域反超了传统计算机视觉。但是由于不清楚底层原理，整个模型出来了就不能再改，改了就得重新训练，创新基本就是几个构成部分增删重组，给人的感觉就是碰运气，时间成本相当高。相反的，机器视觉在基础研究领域有着深厚的根基，所以相对有迹可循。</p><p>本次实验是生成图像的高斯金字塔，本质也就是生成在不同远近程度下的缩略图。本实验运用到<code>OpenCV</code>、<code>Matplotlib</code>和<code>numpy</code>三个库，但不会直接调用<code>OpenCV</code>中的<code>pyrDown</code>函数，而是尽量从原理出发进行编程实现。</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><p>高斯滤波器是一种线性平滑卷积滤波器，通常用于图像处理中的平滑滤波操作。该滤波器将每个像素点周围的像素点按照权重进行平均，用以实现图像的平滑效果。</p><p>高斯滤波器的核心思想是对图像进行加权平均处理，在这个过程中使用高斯函数来确定权重值。高斯函数是一种常见的连续分布函数，其形式为:</p><div align="center">    <svg xmlns="http://www.w3.org/2000/svg" width="23.348ex" height="5.94ex" viewBox="0 -1405.5 10319.8 2625.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-104-TEX-I-1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path><path id="MJX-104-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-104-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-104-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-104-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-104-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-104-TEX-SO-221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path><path id="MJX-104-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-104-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-104-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D43A"></use></g><g data-mml-node="mo" transform="translate(786, 0)"><use xlink:href="#MJX-104-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1175, 0)"><use xlink:href="#MJX-104-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1747, 0)"><use xlink:href="#MJX-104-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2413.8, 0)"><use xlink:href="#MJX-104-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3469.6, 0)"><g data-mml-node="mn" transform="translate(2003, 676)"><use xlink:href="#MJX-104-TEX-N-31"></use></g><g data-mml-node="mrow" transform="translate(220, -962.5)"><g data-mml-node="mo"><use xlink:href="#MJX-104-TEX-N-28"></use></g><g data-mml-node="msqrt" transform="translate(389, 0)"><g transform="translate(1020, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-104-TEX-N-32"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">π</text></g></g></g><g data-mml-node="mo" transform="translate(0, 92.5)"><use xlink:href="#MJX-104-TEX-SO-221A"></use></g><rect width="1384" height="60" x="1020" y="882.5"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2793, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">σ</text></g></g><g data-mml-node="mo" transform="translate(3677, 0)"><use xlink:href="#MJX-104-TEX-N-29"></use></g></g><rect width="4266" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(7975.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" transform="translate(466, 612.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-104-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="msup" transform="translate(507.1, 394) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-104-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 363)"><use xlink:href="#MJX-104-TEX-N-32"></use></g></g><g data-mml-node="mrow" transform="translate(220, -568.3) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-104-TEX-N-32"></use></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">σ</text></g></g><g data-mml-node="mn" transform="translate(884, 364)"><use xlink:href="#MJX-104-TEX-N-32"></use></g></g></g><rect width="1567.5" height="60" x="120" y="220"></rect></g></g></g></g></g></svg></div><p>其中，x表示距离中心像素的偏移量，σ表示高斯函数的标准差。应用高斯函数可以得到一个呈钟形的权重函数，并且越靠近中心点的权重越高，越远离中心点的权重越低。</p><p>在高斯滤波中，我们采用一个大小为<code>n*n</code>的滤波器核对图像进行卷积操作。核中的每项权重使用高斯函数计算而成，因此每个像素点都会受到周围像素点的影响。中心点的权重最大，越靠近中心点的像素的权重越高，而越靠远离中心点的像素的权重越低。通过这种方式，我们就能够非常有效地去除图像中的噪声、平滑图像等。</p><h3 id="高斯图像金字塔"><a href="#高斯图像金字塔" class="headerlink" title="高斯图像金字塔"></a>高斯图像金字塔</h3><p>图像高斯金字塔是一种在图像处理中常用的方法，用于对图像进行多尺度分解和降采样。该方法通过对图像进行平滑和下采样操作，生成图像的不同分辨率的版本，从而实现多尺度图像处理。</p><p>生成过程为：</p><ol><li>首先将原图像作为最底层图像 level0（高斯金字塔的第0层）</li><li>利用高斯核对其进行卷积</li><li>对卷积后的图像进行下采样（去除偶数行和列）得到上一层图像G1</li><li>将此图像作为输入，重复2与3的操作得到更上一层的图像，反复迭代多次</li><li>最后形成形成一个金字塔形的图像数据结构，即高斯金字塔。</li></ol><img src="https://z4a.net/images/2023/04/23/guass_pyramid.jpg" alt="高斯金字塔" style="zoom:80%;" /><h2 id="算法实现及结果分析"><a href="#算法实现及结果分析" class="headerlink" title="算法实现及结果分析"></a>算法实现及结果分析</h2><h3 id="高斯滤波函数"><a href="#高斯滤波函数" class="headerlink" title="高斯滤波函数"></a>高斯滤波函数</h3><p>本次实验我采用Python语言，素材为冈萨雷斯图片素材，为实验方便裁剪为正方体。</p><img src="https://z4a.net/images/2023/04/23/input.png" alt="image-20230423145614779" style="zoom:80%;" /><p>本实验运用到<code>OpenCV</code>、<code>Matplotlib</code>和<code>numpy</code>三个库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>根据高斯滤波的原理编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gaussian_blur</span>(<span class="params">img, K_size=<span class="number">3</span>, sigma=<span class="number">1.3</span></span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    高斯滤波器 </span></span><br><span class="line"><span class="string">    :param img: 输入图像 </span></span><br><span class="line"><span class="string">    :param K_size: 核函数大小 </span></span><br><span class="line"><span class="string">    :param sigma: σ </span></span><br><span class="line"><span class="string">    :return: 滤波后的图像 </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>  </span><br><span class="line">    H, W, C = img.shape  </span><br><span class="line">    <span class="comment"># Zero padding  </span></span><br><span class="line">    pad = K_size // <span class="number">2</span>  </span><br><span class="line">    <span class="comment"># 黑边填充后会出现大黑边  </span></span><br><span class="line">    <span class="comment"># out = np.pad(img, ((pad, pad), (pad, pad), (0, 0)),&#x27;constant&#x27;, constant_values=0)  </span></span><br><span class="line">    <span class="comment"># 用图像边缘像素进行填充  </span></span><br><span class="line">    out = cv2.copyMakeBorder(img, pad, pad, pad, pad, borderType=cv2.BORDER_REPLICATE)  </span><br><span class="line">    <span class="comment"># 创建和函数  </span></span><br><span class="line">    K = np.zeros((K_size, K_size), dtype=<span class="built_in">float</span>)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(-pad, -pad + K_size):  </span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(-pad, -pad + K_size):  </span><br><span class="line">            K[y + pad, x + pad] = np.exp(-(x ** <span class="number">2</span> + y ** <span class="number">2</span>) / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))  </span><br><span class="line">    K /= (<span class="number">2</span> * np.pi * sigma * sigma)  </span><br><span class="line">    K /= K.<span class="built_in">sum</span>()  </span><br><span class="line">    tmp = out.copy()  </span><br><span class="line">    <span class="comment"># 滤波  </span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(H):  </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(W):  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(C):  </span><br><span class="line">                out[pad + y, pad + x, c] = np.<span class="built_in">sum</span>(K * tmp[y: y + K_size, x: x + K_size, c])  </span><br><span class="line">    <span class="comment"># 将数值转化为RGB限制范围  </span></span><br><span class="line">    out = np.clip(out, <span class="number">0</span>, <span class="number">255</span>)  </span><br><span class="line">    <span class="comment"># 转化格式：unit8  </span></span><br><span class="line">    out = out[pad: pad + H, pad: pad + W].astype(<span class="string">&quot;uint8&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> out  </span><br></pre></td></tr></table></figure><p>这边有一个注意点，在滤波之前的，为了减小边缘处像素对计算的影响，一般来说我们需要给图像填充边缘，边缘大小一般为(模板大小&#x2F;&#x2F; 2)。这时候有两种方案填充方案。第一种方案是采用常数填充，第二种方案是直接采用图像边缘像素填充。我选择第二种方案，具体原因在[测试与结果分析](# 测试与结果分析)部分说明。 </p><p>使用以下代码测试滤波效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高斯滤波 </span></span><br><span class="line">GaussianBlur_imag1 = gaussian_blur(img, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">GaussianBlur_imag2 = gaussian_blur(img, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">GaussianBlur_imag3 = gaussian_blur(img, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">title_list = [<span class="string">&quot;Original&quot;</span>, <span class="string">&quot;size=(3,3)\n σ=1&quot;</span>, <span class="string">&quot;size=(5,5)\n σ=1&quot;</span>, <span class="string">&quot;size=(5,5)\n σ=3&quot;</span>]</span><br><span class="line">img_list = [img, GaussianBlur_imag1, GaussianBlur_imag2, GaussianBlur_imag3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像 </span></span><br><span class="line">plt.figure(dpi=<span class="number">100</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i)</span><br><span class="line">    plt.title(title_list[i - <span class="number">1</span>])</span><br><span class="line">    plt.imshow(img_list[i - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>高斯滤波器滤波效果如下所示：</p><img src="https://z4a.net/images/2023/04/23/guass_blur.png" alt="image-20230423145655763" style="zoom:80%;" /><p>从结果可以看出，平滑效果随着<code>kernel</code>与<code>σ</code>的增大而增强。高斯滤波后有明显的模糊现象。</p><h3 id="生成高斯金字塔"><a href="#生成高斯金字塔" class="headerlink" title="生成高斯金字塔"></a>生成高斯金字塔</h3><p>图像高斯金字塔有两个过程，一是向下采样，二是高斯滤波。</p><p>向下采样本质就是缩小图像尺寸来达到降低分辨率的目的，以生成图像的缩略图。缩小的过程可以采用<code>OpenCV</code>自带的<code>resize</code>函数来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">img, scale=<span class="number">0.5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    下采样 </span></span><br><span class="line"><span class="string">    :param img: 输入图像 </span></span><br><span class="line"><span class="string">    :param scale: 缩放比例，默认为0.5 </span></span><br><span class="line"><span class="string">    :return: 下采样后的图像 </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w = img.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    new_h = <span class="built_in">int</span>(h * scale)</span><br><span class="line">    new_w = <span class="built_in">int</span>(w * scale)</span><br><span class="line">    <span class="comment"># 采用双线性的方法 </span></span><br><span class="line">    result = cv2.resize(img, (new_h, new_w), interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在更改大小时，插值方式我采用了最常用且效果不错的双线性插值。<strong>默认按照缩放倍率0.5进行缩放</strong>。</p><p>在高斯滤波和下采样实现的基础上，可以按照原理实现高斯金字塔函数的编写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pyramid</span>(<span class="params">imag, floors, guass_kernel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    生成图像高斯金字塔 </span></span><br><span class="line"><span class="string">    :param imag: 输入图像 </span></span><br><span class="line"><span class="string">    :param floors: 输入高斯金字塔层数 </span></span><br><span class="line"><span class="string">    :param guass_kernel: 高斯滤波核大小 </span></span><br><span class="line"><span class="string">    :return: None </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 打印当前金字塔层数 </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total Gaussian pyramid <span class="subst">&#123;floors&#125;</span> levels&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> floors == <span class="number">1</span>:</span><br><span class="line">        plt.figure(dpi=<span class="number">150</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">        <span class="comment"># 得到第零层 </span></span><br><span class="line">        plt.title(<span class="string">&quot;Gaussian pyramid\n 0 level&quot;</span>)</span><br><span class="line">        plt.imshow(img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y = factor(floors)[<span class="number">0</span>:]</span><br><span class="line">        <span class="comment"># 保持x&gt;y </span></span><br><span class="line">        x, y = swap(x, y)</span><br><span class="line">        <span class="comment"># 打印布局大小 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Sub-map layout: row-<span class="subst">&#123;x&#125;</span> column-<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 绘制图像 </span></span><br><span class="line">        plt.figure(dpi=<span class="number">150</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">        plt.subplot(x, y, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 得到第零层  </span></span><br><span class="line">        plt.title(<span class="string">&quot;Gaussian pyramid\n 0 level&quot;</span>)</span><br><span class="line">        plt.imshow(img)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, floors + <span class="number">1</span>):</span><br><span class="line">            imag = downsample(imag)</span><br><span class="line">            imag = gaussian_blur(imag, K_size=guass_kernel, sigma=<span class="number">1.3</span>)</span><br><span class="line">            plt.subplot(x, y, i)</span><br><span class="line">            plt.title(<span class="string">f&quot;Gaussian pyramid\n <span class="subst">&#123;i - <span class="number">1</span>&#125;</span> level&quot;</span>)</span><br><span class="line">            plt.imshow(imag)</span><br><span class="line">        <span class="comment"># 设置子图间的水平和垂直间距 </span></span><br><span class="line">        plt.subplots_adjust(wspace=<span class="number">0.5</span>, hspace=<span class="number">0.35</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Image created successfully&quot;</span>)</span><br></pre></td></tr></table></figure><p>由原图像作为高斯金字塔的第0层，之后的层数按照采样和滤波的过程循环进行。<strong>需要注意的是，因为下采样是按照0.5倍率进行缩放，为了避免报错，因此输入图像最好为正方形尺寸</strong>。在代码第22行出现了一个名为<code>factor()</code>的函数，下面我们会讲到这个函数的作用。</p><h3 id="输出图像排布设置"><a href="#输出图像排布设置" class="headerlink" title="输出图像排布设置"></a>输出图像排布设置</h3><p>为了更好展示每次缩放后的图像细节，我采用<code>matplotlib</code>对图像进行展示。但是根据使用者每次输入的floors的不同，所生成的子图数量是不一样的。举几个例子：</p><ul><li>输入5时，排布可以为<code>subplot(1,5,i)</code>或者<code>subplot(5,1,i)</code></li><li>输入8时，排布可以为<code>subplot(2,4,i)</code>或者<code>subplot(4,2,i)</code></li><li>输入6时，排布可以为<code>subplot(6,1,i)</code>、<code>subplot(1,6,i)</code>、<code>subplot(2,3,i)</code>、<code>subplot(3,2,i)</code></li></ul><p>输出图的数量总是随着输入在改变，这时候就需要考虑如何排布。</p><p>最为简单的思路就是进行因式分解，而且需要保证行数大于列数，这样输出的图像更加美观。按照分析编写出以下函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得子图的排布</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据获得子图排布</span></span><br><span class="line"><span class="string">    :param num: 金字塔层数</span></span><br><span class="line"><span class="string">    :return: 子图排布</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">        temp = <span class="built_in">int</span>(num / i)</span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= <span class="number">1</span>) &amp; (temp * i == num):</span><br><span class="line">            list1.append(i)</span><br><span class="line">            list1.append(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># list1.append(1) if len(list1) == 1 else None</span></span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><p>输入示例：</p><ul><li>输入6：[2,3]</li><li>输入5：[5,1]</li></ul><p>假设输出结果为[a,b]，那么根据示例1，很可能会出现<code>a&lt;b</code>的情况，<strong>这样就会出现行数大于列数，这样排布是不美观的</strong>，所以我们需要在设当场合将他们交换，使之在任何情况都保持<code>a&gt;b</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">a, b</span>): <span class="keyword">return</span> (b, a) <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> (a, b)</span><br></pre></td></tr></table></figure><h3 id="测试与结果分析"><a href="#测试与结果分析" class="headerlink" title="测试与结果分析"></a>测试与结果分析</h3><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv2.imread(<span class="string">&quot;./input/test.png&quot;</span>)</span><br><span class="line">    floors = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter the floors of the pyramid\n（The input number is between 1 and 8）：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> (floors &lt; <span class="number">1</span>) | (floors &gt; <span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The floors must be between 1 and 8 &quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    pyramid(img, floors=floors, guass_kernel=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>当<code>floors=8</code>时，得到的图像高斯金字塔每层图像和输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/floor8.png" style="zoom: 50%;" /><p>当<code>floors=5</code>时，图像与输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/floor5.png" alt="image-20230423151858533" style="zoom:50%;" /><p>可以看到生成的结果没有出现很大的差错，排布的结果也是比较美观的，当然不好的地方就是能看到非常明显的白边，这是由于<code>figsize</code>的限定大小所决定的，因为<code>figsize</code>无法根据<code>floors</code>的变换自适应图像(典型的就是标题重叠)，尝试使用<code>subplots_adjust</code>调整子图间距也不是很好，迫不得已使用了<code>figsize=(12,8)</code>的大小设定。</p><p>有一个注意点，在高斯滤波时，有两种填充方案。</p><ul><li>第一种：直接用常数0进行填充。</li><li>第二种：拿图像的边缘像素进行填充。</li></ul><p>如果采用第一种方案进行填充，可以达到平滑图像边缘像素的目的，但是在生成高斯金字塔这个需要多次平滑的过程中，很容易出现图像黑边的情况，直接影响了高斯金字塔的生成效果，因此不能使用这种方案。</p><p>展示一下用第一种方案的<code>floors=8</code>的输出结果：</p><img src="https://z4a.net/images/2023/04/23/floor8_black.png" alt="image-20230423155735686" style="zoom:80%;" /><p>可以看到黑白的影响随着金字塔层数的增加是逐渐加剧的,第7层甚至出现完全黑图的情况，这严重影响了生成的结果。因此最终我选择第二种填充方案。</p><h3 id="金字塔效果"><a href="#金字塔效果" class="headerlink" title="金字塔效果"></a>金字塔效果</h3><p>因为老师想要我们观察图像的细节变化，所以我采用了<code>Matplotlib</code>一张一张拼接展示，为了美观，自己也按照老师课件上的金字塔效果编写了一个程序，总体的处理流程还是一样，只是多了拼接图像的过程，这次就直接使用<code>pyrDown</code>进行实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./input/test.png&quot;</span>)</span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Original: width-<span class="subst">&#123;img.shape[<span class="number">0</span>]&#125;</span> height-<span class="subst">&#123;img.shape[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Extended_Image</span>(<span class="params">img1, img2, model=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> model == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> img1.shape[<span class="number">1</span>] &lt; img2.shape[<span class="number">1</span>]:</span><br><span class="line">            temp = img1.copy()</span><br><span class="line">            img1 = img2.copy()</span><br><span class="line">            img2 = temp</span><br><span class="line"></span><br><span class="line">        add_height = img1.shape[<span class="number">0</span>] - img2.shape[<span class="number">0</span>]</span><br><span class="line">        add_img = np.zeros((add_height, img2.shape[<span class="number">1</span>], <span class="number">3</span>), np.uint8) + <span class="number">255</span></span><br><span class="line">        result = np.vstack((img2, add_img))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> img1.shape[<span class="number">0</span>] &lt; img2.shape[<span class="number">0</span>]:</span><br><span class="line">            temp = img1.copy()</span><br><span class="line">            img1 = img2.copy()</span><br><span class="line">            img2 = temp</span><br><span class="line">        add_width = img1.shape[<span class="number">1</span>] - img2.shape[<span class="number">1</span>]</span><br><span class="line">        add_img = np.zeros((img2.shape[<span class="number">0</span>], add_width, <span class="number">3</span>), np.uint8) + <span class="number">255</span></span><br><span class="line">        result = np.hstack((img2, add_img))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downsample</span>(<span class="params">img, scale=<span class="number">2</span></span>):</span><br><span class="line">    h, w = img.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    new_h = <span class="built_in">int</span>(h / scale)</span><br><span class="line">    new_w = <span class="built_in">int</span>(w / scale)</span><br><span class="line">    result = cv2.resize(img, (new_h, new_w), interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_guass</span>(<span class="params">img, kernel=(<span class="params"><span class="number">3</span>, <span class="number">3</span></span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> cv2.GaussianBlur(img, kernel, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">floors = <span class="built_in">int</span>(<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter the floors of the pyramid：&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> floors == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前输出的金字塔的层数为：<span class="subst">&#123;floors&#125;</span>&quot;</span>)</span><br><span class="line">    result = init_guass(img, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> floors &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;floors只能为大于0的整数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> floors &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total Gaussian pyramid <span class="subst">&#123;floors&#125;</span> levels&quot;</span>)</span><br><span class="line">    img_1 = cv2.pyrDown(img)</span><br><span class="line">    result = init_guass(img_1, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    img_1 = result.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(floors - <span class="number">1</span>):</span><br><span class="line">        img_2 = downsample(img_1)</span><br><span class="line">        img_2 = init_guass(img_2, kernel=(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">        temp_img = Extended_Image(img1=result, img2=img_2, model=<span class="number">2</span>)</span><br><span class="line">        result = np.vstack((result, temp_img))</span><br><span class="line">        img_1 = img_2.copy()</span><br><span class="line"></span><br><span class="line">    temp_img = Extended_Image(img1=img, img2=result, model=<span class="number">1</span>)</span><br><span class="line">    result = np.hstack((img, temp_img))</span><br><span class="line"></span><br><span class="line">plt.figure(dpi=<span class="number">150</span>)</span><br><span class="line">plt.title(<span class="string">f&quot;Gaussian pyramid\n(floors:<span class="subst">&#123;floors&#125;</span>)&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.imshow(result)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>当输入<code>floors=8</code>时，输出结果如下：</p><img src="https://z4a.net/images/2023/04/23/pyramid.png" alt="image-20230423160056789" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 机器视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> 机器视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid-基础图的绘制</title>
      <link href="/post/shi-yong-mermaid-hui-tu/"/>
      <url>/post/shi-yong-mermaid-hui-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在B站给我推荐了一个绘制流程图的视频，其中提到了开源项目terrastruct，本来想尝试来着，结果评论区居然一直在推荐使用mermaid与xmind（哭笑）。我记得Typora是支持mermaid的，只是我一直没有绘图需求来着，看评论区说语法简单，想着以后写文章如果用到，那就可以直接使用mermaid绘制一些图像，省掉了上传图像的麻烦，于是就有了学习mermaid绘图的想法。</p><p>看了下官方文档，感觉自己常用到的基本就只有三种图：流程图、饼图、时间轴。</p><blockquote><p>官方文档:<a href="https://mermaid.js.org/syntax/flowchart.html">Flowcharts Syntax | Mermaid</a></p></blockquote><h2 id="FlowChart（流程图）"><a href="#FlowChart（流程图）" class="headerlink" title="FlowChart（流程图）"></a>FlowChart（流程图）</h2><p>关键字：<code>flowchart</code></p><h3 id="图的方向"><a href="#图的方向" class="headerlink" title="图的方向"></a>图的方向</h3><ul><li>TB - top to buttom</li><li>TD - top-down</li><li>BT - buttom to top</li><li>RL - right to left</li><li>LR - left to right</li></ul><p>例子1 TB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    a --&gt; b &amp; c --&gt; d</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBa --&gt; b &amp; c --&gt; d  </pre></div><p>例子2 LR：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    a --&gt; b &amp; c --&gt; d</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa --&gt; b &amp; c --&gt; d  </pre></div><h3 id="图的样式"><a href="#图的样式" class="headerlink" title="图的样式"></a>图的样式</h3><ul><li>round edges - <code>()</code></li><li>shaped node(胶囊) - <code>([])</code></li><li>subroutine shape - <code>[[]]</code></li><li>cyclinderical shape(圆柱) - <code>[()]</code></li><li>cicle - <code>(())</code></li><li>asymmetric shape(旗帜) - <code>&gt;]</code></li><li>rhombus(菱形) - <code>&#123;&#125;</code> </li><li>hexagon(六边形) - <code>&#123;&#123;&#125;&#125;</code></li><li>parallelogram(平行四边形) - <code>[//]</code> <code>[\\]</code></li><li>traoezoid(梯形) - <code>[/\]</code> <code>[\/]</code></li><li>double circle - <code>((()))</code></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    A([one]) --&gt; B&#123;&#123;two&#125;&#125; &amp; c[(three)] --&gt; d[/hello/]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBA([one]) --&gt; B &amp; c[(three)] --&gt; d[&#x2F;hello&#x2F;]  </pre></div><h3 id="连线样式"><a href="#连线样式" class="headerlink" title="连线样式"></a>连线样式</h3><ul><li>arrow head - <code>--&gt;</code></li><li>open link - <code>---</code></li><li>text on links - <code>--This is a text!--</code> <code>---|This is the text|</code></li><li>dotted links - <code>-.-&gt;</code></li><li>thick link - <code>==&gt;</code></li><li>invisible link - <code>~~~</code></li><li>new arrow types - <code>--o</code> <code>--x</code></li><li>multi directional arrows(双向箭头) - <code>o--o</code> <code>&lt;--&gt;</code> <code>x--x</code></li><li>延长方式 - <code>----&gt;</code></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    a[start] --&gt; b&#123;Is it?&#125;</span><br><span class="line">    b --&gt;|Yes| c[OK]</span><br><span class="line">    c --&gt; d[Rethink] --&gt; b</span><br><span class="line">    b ----&gt;|No| e[End]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBa[start] --&gt; b{Is it?}b --&gt;|Yes| c[OK]c --&gt; d[Rethink] --&gt; bb ----&gt;|No| e[End]  </pre></div><h3 id="特殊符号显示"><a href="#特殊符号显示" class="headerlink" title="特殊符号显示"></a>特殊符号显示</h3><p>用引号包含住内容，一般可以表示括号内容，如果有更加复杂的需求，可以使用<code>:# ;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    a[&quot;This is a text(#3556;)&quot;] --&gt; b[&quot;A dec char:#9829;&quot;]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRa[&quot;This is a text(#3556;)&quot;] --&gt; b[&quot;A dec char:#9829;&quot;]  </pre></div><h3 id="多图（Subgraphs）"><a href="#多图（Subgraphs）" class="headerlink" title="多图（Subgraphs）"></a>多图（Subgraphs）</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line">    graph definition</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    subgraph one</span><br><span class="line">    a1 --&gt; a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two </span><br><span class="line">    b1 --&gt; b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1 --&gt; c2</span><br><span class="line">    end</span><br><span class="line">    c1 --&gt; a2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TBsubgraph onea1 --&gt; a2endsubgraph two b1 --&gt; b2endsubgraph threec1 --&gt; c2endc1 --&gt; a2  </pre></div><p>多图的情况下可以使用图到图的连接,也可以实现图外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line">    q[&quot;你干嘛&quot;] --&gt; one</span><br><span class="line">    one --&gt; two &amp; e[&quot;哎呦&quot;]</span><br><span class="line">    three --&gt; two</span><br><span class="line">    two --&gt; c2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    q[&quot;你干嘛&quot;] --&gt; one    one --&gt; two &amp; e[&quot;哎呦&quot;]    three --&gt; two    two --&gt; c2  </pre></div><p>也可以用<code>direction</code>来规定子图的方向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">  subgraph TOP</span><br><span class="line">    direction TB</span><br><span class="line">    subgraph B1</span><br><span class="line">        direction RL</span><br><span class="line">        i1 --&gt;f1</span><br><span class="line">    end</span><br><span class="line">    subgraph B2</span><br><span class="line">        direction BT</span><br><span class="line">        i2 --&gt;f2</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">  A --&gt; TOP --&gt; B</span><br><span class="line">  B1 --&gt; B2</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 --&gt;f1    end    subgraph B2        direction BT        i2 --&gt;f2    end  end  A --&gt; TOP --&gt; B  B1 --&gt; B2  </pre></div><h3 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h3><p>可以将单击事件绑定到节点，单击可能导致 javascript 回调或将在新的浏览器选项卡中打开的链接。其实就是实现类似按钮的功能，其中回调功能不做概述。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">click 对象 “网址” “注释”</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A--&gt;B</span><br><span class="line">    B--&gt;C</span><br><span class="line">    C--&gt;D</span><br><span class="line">    click A callback &quot;Tooltip for a callback&quot;</span><br><span class="line">    click B &quot;https://www.gcnanmu3125.xyz&quot; &quot;我的博客地址&quot;</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    A--&gt;B    B--&gt;C    C--&gt;D    click A callback &quot;Tooltip for a callback&quot;    click B &quot;https:&#x2F;&#x2F;www.gcnanmu3125.xyz&quot; &quot;我的博客地址&quot;  </pre></div><h3 id="对fontawesome的基本支持"><a href="#对fontawesome的基本支持" class="headerlink" title="对fontawesome的基本支持"></a>对fontawesome的基本支持</h3><p>可以从字体添加图标。这些图标可通过语法 <code>fa:icon</code>类名访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    B[&quot;fab:fa-twitter for peace&quot;]</span><br><span class="line">    B--&gt;C[fa:fa-ban forbidden]</span><br><span class="line">    B--&gt;D(fa:fa-spinner)</span><br><span class="line">    B--&gt;E(A fa:fa-camera-retro perhaps?)</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    B[&quot;fab:fa-twitter for peace&quot;]    B--&gt;C[fa:fa-ban forbidden]    B--&gt;D(fa:fa-spinner)    B--&gt;E(A fa:fa-camera-retro perhaps?)  </pre></div><h2 id="Pie（饼图）"><a href="#Pie（饼图）" class="headerlink" title="Pie（饼图）"></a>Pie（饼图）</h2><p>关键字:<code>pie</code></p><p>属性：</p><ul><li>title</li><li>元素</li><li>元素值（如果不是比例，会根据数量直接生成比例）</li></ul><p>简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pie title Pets adopted by volunteers</span><br><span class="line">    &quot;Dogs&quot; : 386</span><br><span class="line">    &quot;Cats&quot; : 85</span><br><span class="line">    &quot;Rats&quot; : 15</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie title Pets adopted by volunteers    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 15  </pre></div><p>如果想显示数据，可以通过<code>showdata</code>关键字在图例显示具体值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie showData</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  6</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie showData    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  6  </pre></div><h2 id="Timeline（时间轴）"><a href="#Timeline（时间轴）" class="headerlink" title="Timeline（时间轴）"></a>Timeline（时间轴）</h2><p>关键字: <code>timeline</code></p><p>基本写法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timeline </span><br><span class="line">    title XXX</span><br><span class="line">    &#123;time period&#125; : &#123;event&#125;</span><br></pre></td></tr></table></figure><p>简单演示：</p><blockquote><p>发现Typora只支持到mermaid 9.1.2，所以无法绘制时间轴，因此不展示后续。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">timeline</span><br><span class="line">    title History of Social Media Platform</span><br><span class="line">    2002 : LinkedIn</span><br><span class="line">    2004 : Facebook</span><br><span class="line">         : Google</span><br><span class="line">    2005 : Youtube</span><br><span class="line">    2006 : Twitter</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  timeline    title History of Social Media Platform    2002 : LinkedIn    2004 : Facebook         : Google    2005 : Youtube    2006 : Twitter  </pre></div><h2 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践</h2><p>流程图：<a href="https://blog.csdn.net/cc920095705/article/details/113769741">https://blog.csdn.net/cc920095705/article/details/113769741</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    a[Start] --- b[Your Operation]</span><br><span class="line">    b --- c&#123;Yes or No?&#125; ---|Yes| d([End])</span><br><span class="line">    a ---|No| c</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDa[Start] --- b[Your Operation]b --- c{Yes or No?} ---|Yes| d([End])a ---|No| c  </pre></div><p>饼图</p><p>数据来源：<a href="http://www.xinhuanet.com/2023-01/17/c_1129292204.htm">国家统计局：2022年居民收入和消费支出情况-新华网 (xinhuanet.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pie showdata</span><br><span class="line">    title 2022年居民人均消费基础及构成(单位：元)</span><br><span class="line">    &quot;其他用品及服务&quot; : 595</span><br><span class="line">    &quot;食品烟酒&quot; : 7481</span><br><span class="line">    &quot;衣着&quot; : 1365</span><br><span class="line">    &quot;居住&quot; : 5882</span><br><span class="line">    &quot;生活用品及服务&quot; : 1432</span><br><span class="line">    &quot;交通通信&quot; : 3195</span><br><span class="line">    &quot;教育文化娱乐&quot; : 2469</span><br><span class="line">    &quot;医疗保健&quot; : 2120</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie showdatatitle 2022年居民人均消费基础及构成(单位：元)&quot;其他用品及服务&quot; : 595&quot;食品烟酒&quot; : 7481&quot;衣着&quot; : 1365&quot;居住&quot; : 5882&quot;生活用品及服务&quot; : 1432&quot;交通通信&quot; : 3195&quot;教育文化娱乐&quot; : 2469&quot;医疗保健&quot; : 2120  </pre></div><p>学习下来感觉使用起来还是很方便的，语法也非常简单，适合简单作图与思路分析的场合，<strong>但是大多数软件及网站无法及时跟进Mermaid的更新速度，不像<code>LaTex公式</code>一样随处可用，这一点也制约着它的发展。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂&amp;Mess </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mermaid </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda-基础使用总结</title>
      <link href="/post/anaconda-de-ji-chu-shi-yong/"/>
      <url>/post/anaconda-de-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个小小的硬盘崩溃，给我带来了相当大的麻烦，重置了系统之后，注册表与c盘除了用户文件夹的东西都没了，导致一些应用根本打不开，也无法被控制面板检测到。这次实验需要写代码，打开VsCode才发现Anaconda也出问题了，没办法，只好重装了:sob:。重装之后，一些设置又差点记不起来了，于是就想着写一篇博客记录一下。</p><p>Conda环境其实就是虚拟环境。如果把Python的包比喻成螺丝刀，扳手等工具，那么虚拟环境就像是把螺丝刀，扳手等工具装起来的容器（如下图）。用虚拟环境的好处是方便处理各种需求不同的开发环境而不会造成臃肿，不需要的时候可以通过直接删除对应的虚拟环境来删除对应的包。对于Python，可以使用<code>virtualenv</code>、<code>virtualenvwrapper</code>和<code>pipenv</code>等包来管理虚拟环境。Conda环境比起安装其他虚拟环境更加方便。</p><img src="https://z4a.net/images/2023/03/25/conda_and_pakages.png" style="zoom:67%;" /><blockquote><p>推荐直接使用<a href="https://docs.anaconda.com/free/miniconda/">Miniconda — Anaconda documentation</a>，不附带任何的库（Anaconde会自带科学计算库），相当于纯净版的Anaconda</p></blockquote><h2 id="Conda基础指令"><a href="#Conda基础指令" class="headerlink" title="Conda基础指令"></a>Conda基础指令</h2><ol><li><p>创建Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -name 环境名 python=版本号</span><br></pre></td></tr></table></figure><p>下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n test python=3.7</span><br></pre></td></tr></table></figure><p><code>-n</code>其实是<code>-name</code>的缩写，这边还需要提醒的是，对于网上大部分的项目，你都需要提前注意Python的版本是否合适。截至2023年3月25日为止，Python最高的版本号为<code>Python 3.11.2</code>，<strong>通常来说，我们不会使用最新版本，一方面是最新版本总会出现一些问题，而出了问题你无法在社区中找到解决方法，另一方面就是很多项目都不是基于最新版的Python。如果没有特殊原因，个人推荐使用<code>Python3.7</code></strong></p><img src="https://z4a.net/images/2023/03/25/create_envs.png" style="zoom: 67%;" /></li><li><p>激活（切换）Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>激活了环境之后，你就可以进行查看、安装、删除包等操作。</p><p><img src="https://z4a.net/images/2023/03/25/activate_envs.png"></p></li><li><p>删除Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure><p>尾巴上的<code>--all</code>是环境中所有包的意思。</p><img src="https://z4a.net/images/2023/03/25/remove_envs.png" style="zoom:67%;" /></li><li><p>查看当前的所有的Conda环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_envs_info.png"></p><p>注：Conda自带一个名为<code>base</code>的虚拟环境。</p></li><li><p>修改环境名</p><p>conda没有直接重命名环境的指令，但是它提供了克隆指令，你可以先使用克隆指令克隆将要修改名字的环境到新建的环境中，然后用删除指令删除原有的环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name B --clone A</span><br><span class="line">conda remove --name A --all</span><br></pre></td></tr></table></figure></li></ol><h2 id="包与下载源的切换"><a href="#包与下载源的切换" class="headerlink" title="包与下载源的切换"></a>包与下载源的切换</h2><h3 id="Python包的基础操作"><a href="#Python包的基础操作" class="headerlink" title="Python包的基础操作"></a>Python包的基础操作</h3><p>激活了Conda环境后，我们就可以在环境中对包进行查看、安装、删除等操作。在环境中，我们就可以使用Python自带的<code>pip指令</code>进行下载，pip指令默认的下载地址为:</p><blockquote><p><a href="https://pypi.python.org/simple">https://pypi.python.org/simple</a></p></blockquote><ol><li><p>查看包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></li><li><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名</span><br></pre></td></tr></table></figure><p>下面是一个下载<code>OpenCV</code>的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><ul><li>注：如果你想更换下载源，可以加上<code>-c 链接</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -c 下载源链接 包名</span><br></pre></td></tr></table></figure></li><li><p>删除包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 包名</span><br></pre></td></tr></table></figure></li><li><p>更新指定包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade 包名</span><br></pre></td></tr></table></figure><ul><li>注：这个指令也可以用来更新<code>pip</code>本身：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></li></ol><h3 id="切换下载源"><a href="#切换下载源" class="headerlink" title="切换下载源"></a>切换下载源</h3><p>上面提到了<code>pip指令</code>默认的下载地址，这是个外国网站，国内的访问速度可想而知，有时一个一兆的文件都要30秒，如果像是<code>PyTorch</code>、<code>OpenCV</code>这种包，根本下不动，有时甚至是断开连接。这时候就需要切换下载的地址，推荐使用<strong>清华源、中科大、阿里这三个镜像网站，清华源不是很稳定，优先推荐中科大。</strong></p><p>这里先展示一些下载源：</p><blockquote><p>中科大：</p><p>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/free/">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/">https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</a></p><p>清华源：</p><p>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</a><br>conda config –append channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</a></p></blockquote><ol><li><p>展示所有下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/all_chanels.png"></p></li><li><p>添加下载源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels 镜像源链接</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --append channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>去除镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove channels 镜像源链接</span><br></pre></td></tr></table></figure></li><li><p>删除所有下载源（恢复默认下载源）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>此项操作后，除了<code>default</code>外，所有的后期添加的下载源都将被删除。</p></li><li><p>设置全局默认下载源</p><p>如果你想直接设置一个默认的下载源，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url 下载源</span><br></pre></td></tr></table></figure><img src="https://z4a.net/images/2023/03/25/set_init_config.png" style="zoom: 80%;" /><p>这样的作用是直接改变了<code>pip指令</code>的下载地址，将默认下载地址<code>default</code>换成设置后的下载源，此时进入提示路径（<code>C:\Users\用户名\AppData\Roaming\pip</code>）可以看到一个文件<code>pip.ini</code>,如果要回复默认的下载地址，那么将这个<code>pip.ini</code>文件删除即可。</p><img src="https://z4a.net/images/2023/03/25/install_url.png" style="zoom:67%;" /></li><li><p>从channel中安装包时显示channel的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/25/show_chanels.png"></p></li><li><p>演示（方便复制）</p><ul><li>添加中科大镜像源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><ul><li>添加清华源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ol><h2 id="conda-install与pip-install"><a href="#conda-install与pip-install" class="headerlink" title="conda install与pip install"></a>conda install与pip install</h2><p>其实自己在日常使用时有时也使用过<code>conda install 包名</code>,安装后貌似也可以正常使用，这时候我有点好奇<code>conda install</code>与<code>pip install</code>到底有什么区别，巧的是，这个问题官方文档也有解释。</p><blockquote><p>Anaconda | Understanding Conda and Pip: <a href="https://www.anaconda.com/blog/understanding-conda-and-pip">https://www.anaconda.com/blog/understanding-conda-and-pip</a>)</p></blockquote><p>总的来说就是你用哪个安装包都可以正常使用，<strong>但是切忌重复安装相同的包！！</strong></p><p>最明显的区别是，<code>pip</code>是Python专门用来安装其他包的一个下载功能包，**<code>pip</code>只能下载支持Python语言编写的包和源码**，而<code>conda install</code>中可能还有 C 或 C++ 库、R 包或任何其他软件，如<code>mkl cuda</code>这种C、C++写的包；以及在文章开头创建<code>conda环境</code>时，它还可以安装Python环境。</p><p>另外一点，<code>pip</code>进行安装、升级时，他并不会去检查安装列表，即使你装过，他还是会再下载一边，<code>到安装的时候它才会去检查该包是否安装过</code>。而<code>conda</code>是会去检查安装列表的，如果你安装过了，它并不会再给你安装一次。例子就是上面我创建<code>test</code>这个<code>conda环境</code>时，它并没有在帮我把依赖文件下一遍，它检测到我安装过后，直接进行了安装。</p><p>官方最后给出的总结表是：</p><table><thead><tr><th align="left"></th><th align="left">conda</th><th align="left">pip</th></tr></thead><tbody><tr><td align="left">manages</td><td align="left">binaries</td><td align="left">wheel or source</td></tr><tr><td align="left">can require compilers</td><td align="left">no</td><td align="left">yes</td></tr><tr><td align="left">create environment</td><td align="left">yes ,built-in</td><td align="left">Python-only</td></tr><tr><td align="left">dependency checks</td><td align="left">yes</td><td align="left">no</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> Anaconda </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo vs Halo-两者使用的感受</title>
      <link href="/post/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/"/>
      <url>/post/hexo-yu-halo-de-shi-yong-hou-de-gan-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这已经是我第三次安装Halo博客系统，每次都是出于不同的原因，这边可以先做个总结。</p><table><thead><tr><th>序号</th><th>使用系统</th><th>说明</th><th>搭载</th><th>费用</th></tr></thead><tbody><tr><td>1</td><td>Halo 1.6</td><td>第一个博客网站</td><td>vulter</td><td>￥42</td></tr><tr><td>2</td><td>Halo 2.2</td><td>因为付不起服务器费用，导火索：升级主题导致博客出错</td><td>秋叶云</td><td>￥30</td></tr><tr><td>3</td><td>Halo 1.6</td><td>出于对Halo  2.2 的不满意以及秋叶云管理层的不靠谱</td><td>Github</td><td>0</td></tr><tr><td>4</td><td>Hexo 4.3</td><td>搭载于Github，隐私性不够，数据不安全</td><td>星辰云</td><td>￥28.99</td></tr></tbody></table><p>我使用过Hexo之后，先是感受到了Hexo博客的强大之处，同时也体会道了Halo使用起来的便利性，这也是我为什么选择再次创建一个Halo博客的原因。</p><h2 id="Halo与Hexo的对比"><a href="#Halo与Hexo的对比" class="headerlink" title="Halo与Hexo的对比"></a>Halo与Hexo的对比</h2><p>Halo和Hexo都是非常优秀的博客系统，他们<strong>各有优缺点</strong>。下面我根据我多次搭建的经历来谈谈。</p><h3 id="Hexo-——-高度自由，复杂但强大"><a href="#Hexo-——-高度自由，复杂但强大" class="headerlink" title="Hexo —— 高度自由，复杂但强大"></a>Hexo —— 高度自由，复杂但强大</h3><hr><div align="center">    <img src="https://z4a.net/images/2023/02/21/Hexo.md.jpg" alt="Hexo" width="65%"></div><blockquote><p>Hexo官方文档：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><p>Hexo可以说是很出名的博客系统，它最早发布于2012年，发售至今已达11年，可以说是老前辈了，它可能是最早静态博客系统。<strong>它所有的网页都是静态html文件，这也导致它可以直接在GitHub上进行静态托管，不需要自己租赁服务器（零成本）</strong>，这一点应该是它广泛受到使用的重要原因。</p><blockquote><p>我的Hexo博客：<a href="https://ldm0715.github.io/">https://ldm0715.github.io/</a></p></blockquote><p>由于Hexo的所有页面都是静态页面，因此文章需要在本地写作并生成，最后上传到服务器或者&#x3D;&#x3D;静态托管网站&#x3D;&#x3D;。<strong>当然其余的所有操作也只能在本地进行</strong>，这也导致它没有及时性，<strong>如果储存有博客系统的电脑不在身边，那么你将什么都做不了。</strong></p><p>随着版本的不断更新，Hexo的功能也越来越强大，自定义性与便捷性也越来越高。对于我这种非专业性的使用者来说，我如果想要为我的博客添加一些功能，这时候就可以直接安装相应的&#x3D;&#x3D;插件&#x3D;&#x3D;来实现。可以快捷的更换自己喜欢的&#x3D;&#x3D;主题&#x3D;&#x3D;。通过简单的指令快速创建文章或者网页，通过在YAML中给文章设置各种属性（包括标题、封面、tag、分类等，++这个只要支持MarkDown语法都能用++），<strong>上手难度很低</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YAML的写法：</span><br><span class="line">---</span><br><span class="line">title: Hello Hexo</span><br><span class="line">date: 2023-02-21 11:27:44</span><br><span class="line">tags:</span><br><span class="line">- hello world</span><br><span class="line">- hexo</span><br><span class="line">categories:</span><br><span class="line">- 与Hexo的初见</span><br><span class="line">description: 由于复杂原因搭建起Hexo博客，搭建起来确实有点费力，但是加载速度很快，也不怎么吃性能，各种插件也很自由，感觉不错</span><br><span class="line">cover: https://z4a.net/images/2023/02/21/Hexo.md.jpg</span><br><span class="line">swiper_index: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>由于使用者与开发者越来越多，这就造成Hexo社区的不断壮大。它拥有大量插件与主题，<strong>各种教程和错误记录都非常的详细</strong>，可以少踩很多坑。<strong>如果你不去魔改，后期的几乎不需要维护。</strong></p><blockquote><p>Hexo主题仓库：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><p>对于一些有网页基础的使用者来说，他们可以在Hexo博客系统的基础上修改，得到更加炫酷与个性的网页效果，<strong>个人不是很推荐未学习过网页（CSS，JavaScript）的使用者进行大量魔改，不了解其中的语法规则可能会直接导致博客系统的奔溃，如果你还是想要尝试，建议&#x3D;&#x3D;在修改前进行备份。&#x3D;&#x3D;</strong><br>以上都是++Hexo++的&#x3D;&#x3D;优点&#x3D;&#x3D;，简单总结如下：</p><ol><li>可以进行静态页面托管，实现零成本建站</li><li>可以通过插件增加功能</li><li>社区内容详细，有自己的插件仓库与主题仓库</li><li>支持MarkDown格式，可使用YAML设置文章属性</li><li>自定义性较高</li></ol><p>当然++Hexo++也有&#x3D;&#x3D;缺点&#x3D;&#x3D;，其实上文也有提到过一些，这里就简单列举一下：</p><ol><li>如果文章很多，生成速率让人担忧</li><li>静态搭载于Github时，由于仓库是公开的，数据的安全性没有保障</li><li>部分插件已过时，但它们任然储存在插件仓库中，如果安装可能会导致问题</li><li>一些设置过于繁杂，不利于后期的修改</li><li>无法在线编辑</li></ol><h3 id="Halo-——-实时编辑，封闭但易用"><a href="#Halo-——-实时编辑，封闭但易用" class="headerlink" title="Halo —— 实时编辑，封闭但易用"></a>Halo —— 实时编辑，封闭但易用</h3><hr><div align="center">    <img src="https://z4a.net/images/2023/02/21/halo.png" alt="Halo" style="zoom:75%;" /></div><blockquote><p>Halo官方文档：<a href="https://docs.halo.run/">https://docs.halo.run/</a></p></blockquote><p>Halo是纯Java编写的博客系统，最早发布于2018年，虽然发布事件较晚，但是非常易用，是<strong>相当强大易用的开源建站工具</strong>。</p><p>与Hexo相比，Halo最大的缺点就是社区内容较少。因为发布时间较晚，大家可能都已经习惯使用Hexo，WordPress等建站工具，因此Halo受到的关注较少。社区内容较少，就导致它没有像Hexo一样拥有非常丰富的社区内容，最主观的就是主题较少，而且搜索引擎也搜索不到大量相关内容（当然这个有其他原因，下面会详细说说）。<strong>而且Halo 1.×版本不支持插件，因此可玩性较低</strong>。（++Halo 2.×版本已经开始支持插件系统++）</p><p><strong>虽然在个性化方面Halo没有任何优势，但是Halo最大的优点便在于它的易用性</strong>。 Hexo最让人感觉不便的就是它无法在线编辑，但<strong>Halo完美解决了这一点。</strong></p><p><strong>Halo系统是可以直接在线编辑的，可实时预览</strong>。系统有着一个博客后台，在这里，你可以非常轻松设置与管理博客，而不是Hexo那样需要去配置文件中修改代码！！！</p><div class="box" align="center">            <img src="https://z4a.net/images/2023/03/13/halo.png" alt="halo.png" alt="后台展示" style="zoom:50%;" /></div><div align="center">            <img src="https://z4a.net/images/2023/03/13/f7fe18c1b99caf7fd57e64744c0331b7.png" alt="在线编辑" style="zoom:50%;" /></div><p>另一方面Halo没有Hexo那么方便魔改，**但是Halo本身就携带了博客网站的一些基本网页（如：日志、归档、分类、友链、相册），&#x3D;&#x3D;这对于大部分人来说已经够用了&#x3D;&#x3D;**。</p><div align="center"><img src="https://z4a.net/images/2023/03/13/ae474befa541c22b277ff1c74edf7325.png" alt="页面" border="0" style="zoom:50%;">  <p>页面</p></div><p>前面说到Halo没有丰富的社区内容，这不仅说明Halo的可玩性较低，<strong>这也说明Halo的使用几乎不会遇到技术问题</strong>，后台已经展示出了所有的选项，规避了魔改的同时保证了安全性。</p><h2 id="关于Halo-2-×版本"><a href="#关于Halo-2-×版本" class="headerlink" title="关于Halo 2.×版本"></a>关于Halo 2.×版本</h2><p>截直至我写这篇文章的时候，Halo官方已经发布了2.3版本。在体验过Halo 2.2后，我感受到Halo 2.×的革命性，也看到了它待改进之处，因此我还是退回了Halo 1.6。下面我列出一些Halo 2.2的使用感受：<br>😊 优点：</p><ol><li>官方已开发插件系统</li><li>拥有全新后台，界面更加美观</li><li>文本编辑器增加，可自行选择</li></ol><p>🙃 缺点：</p><ol><li>官方并未开放出了文章以外的其他界面接口</li><li>目前适配Halo 2.×的主题很少，已经适配的也有待完善</li><li>将评论区、大图查看、代码高亮等都拆入插件中，这样反而不方便</li><li>目前系统还有着许多的Bug</li></ol><p>我个人非常不建议现在将数据搬迁至Halo 2.3，体验真的没有比Halo 1.6要好，<strong>我个人建议等到Halo官方发布Halo 2.5及其以上版本再考虑搬迁问题。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Halo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-博客搭建</title>
      <link href="/post/hexo-bo-ke-da-jian-li-cheng/"/>
      <url>/post/hexo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>关于我为什么使用 Hexo，其实还挺戏剧性的，一开始我使用的是 Halo 建站，相当傻瓜式，非常推荐大家使用，各种功能也非常全。但是最近服务器厂商应急把服务器关了，差点导致博客丢死，另一个租用的服务器也快到期了，于是我就产生了对文章存档的想法（虽然确实每几篇文章）, 因为其实当今市面上的开源博客系统其实也蛮多的，常见的有：Hexo，Hexo、Hugo、Typecho、Wordpress 等。其中最著名的就是 Hexo，而且他有个特点就是：可以直接搭建在 github 仓库中。等于不需要服务器就能直接访问，而且甚至非常稳定且终身不丢，于是就想着搭建一个 Hexo 博客作为副站使用。</p><p>本篇文章就谈一谈我建站的过程吧，把一些搭建细节给保留下来，如果有人想要搭建，希望能靠这篇帮到访问的你。更多还是方便日后自己解决问题，本人使用的是 Windows 10，Mac 与 Liunx 系统请另寻其他文章</p><p>关于搭建 Hexo 博客前需要知道的事：</p><ol><li>你需要有一个 github 账号</li><li>你需要大致明白 Markdown 的写法（一些语法）</li><li>Hexo 每个页面都是一个静态的网页</li><li>Hexo 不支持在线编写，只能在本地编写文章后上传</li></ol><blockquote><p>Hexo 官网：<a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a></p></blockquote><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><ol><li>安装<code>Node.js</code></li></ol><blockquote><p>Node.js: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></blockquote><ol start="2"><li>安装<code>git</code></li></ol><blockquote><p>git download for windows: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></blockquote><p> 默认下一步，安装后右键会出现:</p><ul><li>Git GUI Here</li><li>Git Bash Here</li></ul><p>初次使用需要设定用户名及绑定邮箱。</p><ul><li><p>设置用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure></li><li><p>绑定邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 邮箱地址</span><br></pre></td></tr></table></figure><p>这两个设置对于轻度使用的用户来说按照喜好填写就行，不会有什么后续影响。</p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 本身拥有的特点就是离线性，搭建的过程完全依赖于本地，后期就只是编写后上传仓库。所以我们需要先在本地搭建起 Hexo。</p><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><ol><li><p>打开<code>cmd</code>输入以下指令，全局安装<code>Hexo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>安装完全后，使用以下指令验证安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建本地Hexo项目"><a href="#创建本地Hexo项目" class="headerlink" title="创建本地Hexo项目"></a>创建本地Hexo项目</h3><p>在本地新建一个文件夹作为 Hexo 项目的地址。<strong>在项目文件夹得目录下打开 <code>cmd</code>：</strong></p><ol><li><p>初始化Hexo项目（得到博客系统文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexoblog</span><br></pre></td></tr></table></figure><p>初始化完成后会出现项目的基本结构，后续一些博客的基础设置修改根据根目录下的<code>_config.yml</code> 文件来实现。</p></li><li><p>安装npm（已安装可跳过）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>本地启动后的地址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><p>正常来说会出现以下画面:</p><img src="https://s2.loli.net/2023/04/24/1KBJ869HnwVWszf.png" style="zoom: 67%;" /></li></ol><h2 id="修改博客基础设置"><a href="#修改博客基础设置" class="headerlink" title="修改博客基础设置"></a>修改博客基础设置</h2><ol><li><p>site基础设置</p><p>进入Hexo项目文件夹（简称根目录），打开<code>_config.yml</code>（配置文件），找到如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &#x27;&#x27;</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords: &#x27;&#x27;</span><br><span class="line">author: &#x27;&#x27;</span><br><span class="line">language: &#x27;&#x27;</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这就是网站的基础设置项，这里只讲一些基础参数的修改：</p><ul><li>title：网站标题</li><li>subtitle：网站副标题</li><li>description：网站摘要</li><li>author：博主昵称</li><li>language：默认语言，默认是<code>en</code>（default）<ul><li>中文简体：<code>zh-CN</code></li><li>中文繁体为：<code>zh-TW</code></li></ul></li><li>timezone：时区</li></ul></li><li><p>主题修改</p><p>这个在下面[安装博客主题](# 安装博客主题)时再讲。</p></li></ol><h2 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h2><ol><li><p>下载主题文件</p><p>hexo 一开始是 default 主题。如果不满意的话，肯定需要自己更换主题，可以直接到Hexo官方的主题仓库选择。</p><blockquote><p>Hexo-theme：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>下载后的主题放入博客根目录的 themes 文件夹中，或者直接在 themes 文件中使用 git 的命令进行下载。</p></li><li><p>修改博客设置</p><p>修改博客根目录下<code>_config.yml </code>配置文件中的 theme 参数，修改为主题的名字（一般来说，如果出错可以直接去看各主题博主写的设置文章）</p><p>以下以<code>butterfly</code>主题为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>启动博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>可以缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><h2 id="将博客上传到Github或者Gitee"><a href="#将博客上传到Github或者Gitee" class="headerlink" title="将博客上传到Github或者Gitee"></a>将博客上传到Github或者Gitee</h2><p>将 hexo 博客上传到个人的 github 仓库后，可以直接通过仓库名来访问博客，这就等于白嫖了 github 仓库作为服务器，可以零成本搭建博客且文件不会丢失，小代价是有时可能无法正常访问，这时候可以考虑搭建<strong>全站 CDN（Content Delivery Network）提高访问的速度（网上都推荐 jsDelivr）</strong>，当然也不能保证 CDN 不会崩（jsDelivr 貌似崩了半年），所以看个人的需求吧。</p><p>放到 gitee 上也是一个好选择，访问速度有了保障，但是代价是 gitee 可能哪天就不支持静态页面托管了（有先例），<strong>因此还是首先推荐搭建到 github 仓库。</strong></p><h3 id="上传到Github仓库"><a href="#上传到Github仓库" class="headerlink" title="上传到Github仓库"></a>上传到Github仓库</h3><h4 id="生成SSH密匙"><a href="#生成SSH密匙" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>目录打开命令行，输入以下代码生成密匙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; </span><br></pre></td></tr></table></figure><p>其中<code>xxxxx@xxxxx.com</code>输入你GitHub的邮箱，实际上这只是一个名称，不是最关键的。接下来的选项一路回车即可。</p><p>然后到<code>C:\Users\用户名\.ssh</code>，其中之后便会生成<code>id_rsa</code>和<code>id_rsa.pub</code>。其中 SSH 密匙在<code>id_rsa.pub</code>中。</p><p>登陆 github → 点击头像 → setting → SHH and GPG keys → New SSH key 把 id_rsa.pub 复制到其中即可。</p><p>输入一下代码进行确认绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>输入<code>yes</code>后就会收到绑定成功邮件。</p><h4 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p>登陆 github → <code>＋号</code>（头像旁边） → New repository</p><p>仓库名字命名必须为：<code>github用户名.github.io</code>, 然后<strong>将仓库设为Public</strong>，例如本网站的仓库名为：<code>ldm0715.github.io</code></p><h4 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>打开博客根目录下的<code>_config.yml</code>, 找到<code>deploy</code>, 格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github仓库地址  例如：https://github.com/OliverLoki/OliverLoki.github.io.git </span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h4 id="上传文件到github仓库"><a href="#上传文件到github仓库" class="headerlink" title="上传文件到github仓库"></a>上传文件到github仓库</h4><p>输入上传代码（需要安装插件，详见：[生成和上传页面指令](# 生成与上传页面指令)）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>刷新即可看到仓库中出现了博客文件（<strong>因为网络问题可能会失败，失败就多试几次</strong>）</p><h3 id="上传到Gitee仓库"><a href="#上传到Gitee仓库" class="headerlink" title="上传到Gitee仓库"></a>上传到Gitee仓库</h3><p>上传Gitee与上传Github只有一些不一样，下面只说说不一样的地方，具体流程和上传Github一样。</p><h4 id="生成SSH密匙-1"><a href="#生成SSH密匙-1" class="headerlink" title="生成SSH密匙"></a>生成SSH密匙</h4><p>跟Github不同，我们需要输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/04/24/zIFfHcW1vUj25l4.png" style="zoom:67%;" /><p>输入<code>yes</code>即可。</p><h4 id="创建博客仓库-1"><a href="#创建博客仓库-1" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p>和github创建仓库的要点一样，<strong>要把仓库名设置为</strong><code>gitee用户名</code>，然后初次创建的时候是不能直接设置为<code>Public</code>的，需要在创建了仓库之后去“管理”中更改为”开源“。</p><h4 id="修改博客配置文件-1"><a href="#修改博客配置文件-1" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h4><p>在Gitee的仓库中，默认分支不再是main，而是master，因此修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: gitee仓库地址  例如：https://gitee.com/OliverLoki/OliverLoki.gitee.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="上传文件到gitee仓库"><a href="#上传文件到gitee仓库" class="headerlink" title="上传文件到gitee仓库"></a>上传文件到gitee仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="开启静态页面托管服务"><a href="#开启静态页面托管服务" class="headerlink" title="开启静态页面托管服务"></a>开启静态页面托管服务</h4><p>跟Github不同，Gitee没有默认使用静态托管页面，因此我们需要手动开启静态托管页面的功能（<strong>此功能需要实名认证</strong>）</p><img src="https://s2.loli.net/2023/04/24/W3kLSv8N7XQJ2YU.png" style="zoom: 67%;" /><p>之后<strong>勾选强制https</strong>，然后点击更新。</p><img src="https://s2.loli.net/2023/04/24/iEafAcpDy4zHnSe.png" style="zoom:67%;" /><hr><p>（2023.4.23）家人们，谁懂啊，还是老老实实用Github吧。</p><img src="https://s2.loli.net/2023/04/24/raW27ilf3JDOVBG.png" style="zoom:67%;" /><h2 id="Hexo系统基础命令"><a href="#Hexo系统基础命令" class="headerlink" title="Hexo系统基础命令"></a>Hexo系统基础命令</h2><p>建立好博客之后，还需要学会一些 <code>Hexo</code> 的一些日常操作指令，这样才能方面后续使用。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>文章默认生成在<code>.\source\_posts</code>文件夹下，且默认格式为 Markdown</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名字&quot;</span><br></pre></td></tr></table></figure><p>按照路径打开文章后内容如下：</p><p>这种方法不常用，不如直接右键生成<code>.md</code>文件</p><h3 id="生成和上传页面指令"><a href="#生成和上传页面指令" class="headerlink" title="生成和上传页面指令"></a>生成和上传页面指令</h3><p>因为 Hexo 是由一些静态的网页组成的，因此在编写完页面或者文章后，需要手动生成静态网页，也需要手动上传到指定的服务器。</p><p>生成静态页面和上传功能首先需要安装 <code>hexo-deployer-git</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li><p>清除页面缓存（有些设置需要清除缓存之后才能显示）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>缩写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面（上传页面时才需要这么做）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>上传页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>一键部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g --d</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page “页面名”</span><br></pre></td></tr></table></figure><p>需要注意的是，生成的页面默认在项目的 source 文件夹下 (例如：<code>F:\Hexo\source</code>)，默认生成的网页地址为<code> 你的网址/页面名/</code>，所以页面名要与<code>_config.yml</code>文件中设置的页面名保持一致。</p><p>稍微总结一下<strong>生成的相关操作</strong>：</p><table><thead><tr><th>操作</th><th>路径</th><th>需要知道的</th></tr></thead><tbody><tr><td>hexo new “文章名”</td><td><code>.\source\_posts</code></td><td>这种方法不常用</td></tr><tr><td>hexo new page “页面名”</td><td><code>.\source\页面名</code></td><td>默认生成的网页地址为<code>网址/页面名/</code>，所以页面名要与<code>_config.yml</code> 文件中设置的页面名保持一致。</td></tr></tbody></table><h3 id="hexo三连"><a href="#hexo三连" class="headerlink" title="hexo三连"></a>hexo三连</h3><p>如果你觉得一条条写命令麻烦，你可以使用<code>&amp;&amp;</code>来连接这些命令，在更改了网页之后，我们一般要先清除缓存，生成界面，上传页面，一条一条敲的话很麻烦，这时候你就可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="文章属性快速设置"><a href="#文章属性快速设置" class="headerlink" title="文章属性快速设置"></a>文章属性快速设置</h2><p>文章拥有很多属性，如：标题，摘要，tags，类别等。那么就需要学会如何在 md 文件中编写<code>YAML格式</code>（文章头）让系统识别到这是设置的属性。</p><h3 id="文章基础属性设置"><a href="#文章基础属性设置" class="headerlink" title="文章基础属性设置"></a>文章基础属性设置</h3><p>在 md 文件开头写入如下格式（YAML）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">创建文章时间</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">类别1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">类别2</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">摘要</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">文章封面（图片地址）</span></span><br><span class="line"><span class="attr">top-img:</span> <span class="string">文章顶部图（图片地址）</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">是否开启评论(true</span> <span class="string">or</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>写入后在相应的主题中打开相应设置就能看见这些设置。</p><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>有些人可能会拿博客写日记、账号密码等私密内容，这些内容肯定不能直接公开，最直接的保密方法就是给文章加密（当然会不会给轻松破解就不清楚了）</p><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>加密<code>YAML</code>格式</p><p><code>YAML</code>写法为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">自己设置的密码</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">密码文本框提示</span> <span class="string">例如：您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">错误信息提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">校验失败提示</span> <span class="string">例如：抱歉,</span> <span class="string">这个文章不能被校验</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>加密成功提示</p></li></ol><h3 id="文章置顶（Butterfly主题）"><a href="#文章置顶（Butterfly主题）" class="headerlink" title="文章置顶（Butterfly主题）"></a>文章置顶（Butterfly主题）</h3><p><code>hexo-generator-index </code>从 2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的 <code>front-matter </code>区域里添加 <code>sticky: 1 </code>属性来把这篇文章置顶。<strong>数值越大，置顶的优先级越大。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">sticky:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="添加版权提醒"><a href="#添加版权提醒" class="headerlink" title="添加版权提醒"></a>添加版权提醒</h3><p>自己写的文章有时候不太希望随便给人 copy，这时候就需要添加版权信息提示，一般来说主题都包含这项功能（去主题配置文件打开即可），但有时候我们不一定全局都开启版权声明（比如搬运文章），这时候就需要单独给一些文章添加版权信息。</p><p>可以在<code>YAML</code>中加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请注明来自原作者</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>另外，你可以在主题设置中打开复制附加版权信息，这样或许更有作用。</strong></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>Hexo拥有许多插件，并且有着自己的插件仓库，安装一些实用的插件可以让我们的体验大大提升。</p><blockquote><p>Hexo插件仓库：<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><p>这个插件可以提供站内文章搜索功能，非常推荐安装</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>那么在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search: path: search.xml;</span><br><span class="line">field: post;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>这个插件能在文章的标题下面显示文章字数</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>在博客配置文件<code>_config.yml</code>中新增以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  date: true # 发布日期</span><br><span class="line">  update: true # 更新日期</span><br><span class="line">  wordCount: true # 文章字数统计</span><br><span class="line">  totalCount: true # 站点总文章字数</span><br><span class="line">  min2read: true # 文章阅读时长</span><br><span class="line">  readCount: true # 文章阅读次数</span><br></pre></td></tr></table></figure></li></ol><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>对于中文使用者来说，文章标题都是中文的，因为 hexo 会默认将文章标题作为网页链接的一部分，这就可能会出现一些不便。例如：</p><blockquote><p>修改前：<a href="http://localhost:4000/2022/11/19/python">http://localhost:4000/2022/11/19/python</a> 编程中遇到的一些问题 &#x2F;</p></blockquote><p><strong>你会发现链接无法正常被识别完整，这可能导致一些场合无法直接点击跳转</strong>，因此网页链接中最好不要出现中文，这时候就可以安装此插件。</p><p>这个插件安装配置好后会生成拼音和”-“来代替连接中的中文</p><blockquote><p>修改后：<a href="http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/">http://localhost:4000/2022/11/19/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</a></p></blockquote><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: &#x27;-&#x27; # default: &#x27;-&#x27;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文章加密插件"><a href="#文章加密插件" class="headerlink" title="文章加密插件"></a>文章加密插件</h3><p>顾名思义，可以给文章加密。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>具体可见上文内容[给文章加密](# 给文章加密)</p></li></ol><h3 id="文章隐藏插件"><a href="#文章隐藏插件" class="headerlink" title="文章隐藏插件"></a>文章隐藏插件</h3><p>顾名思义，可以将文章隐藏。</p><ol><li><p>安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure></li><li><p>用法</p><p>在文章的<code>YAML</code>中加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h3><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>在博客根目录<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  enable: true</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line"> content:</span><br><span class="line"> content_limit: 140</span><br><span class="line"> content_limit_delim: &#x27; &#x27;</span><br><span class="line"> order_by: -date</span><br><span class="line"> icon: icon.png</span><br><span class="line"> autodiscovery: true</span><br><span class="line"> template:</span><br></pre></td></tr></table></figure><p>其实默认即可，但是如果想改的话建议查看官网：</p><blockquote><p><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p></blockquote></li><li><p>在主题的<code>_config.yml</code>中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li><li><p>添加（或者修改）social处的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fas fa-rss: 你的博客地址/atom.xml</span><br></pre></td></tr></table></figure></li></ol><p>最终生成效果如下，地址为<code>博客地址 + /atom.xml</code>：</p><img src="https://s2.loli.net/2023/02/25/y2SnZURhqsQVFYt.png" style="zoom: 67%;" /><h2 id="ssh连接错误"><a href="#ssh连接错误" class="headerlink" title="ssh连接错误"></a>ssh连接错误</h2><p>2024年1月29日，我使用hexo指令上传博客时，出现了如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">at ChildProcess. (E:\Gzz\blog-github\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">at ChildProcess.emit (node:events:520:28)</span><br><span class="line">at ChildProcess.cp.emit (E:\Gzz\blog-github\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)</span><br></pre></td></tr></table></figure><p>不明白是什么原因的我于是尝试重新生成ssh密匙进行连接，但是当进行到<code>ssh -T git@github.com</code>时，出现如下问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure><p>我以为是网络问题，但是尝试了好几次都无法接上，搜索了相关问题后初步判断是端口22失效，于是找到了如下方法。</p><ol><li><p>检查443端口是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure><p>如果出现<code>Hi XXXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>那就证明端口可以连接，可以进行下一步。</p></li><li><p>在<code>c\用户\用户名\.ssh</code>文件夹下创建一个<code>config</code>文件，在文件中写入如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>让ssh默认走443端口。</p></li><li><p>重新运行<code>ssh -T git@github.com</code>指令，得到回复为<code>Hi xxxxx! You&#39;ve successfully authenticated, but GitHub does not   provide shell access.</code></p></li><li><p>之后再运行hexo三连正常上传。</p></li></ol><p>如果有其他问题参考:<a href="https://segmentfault.com/a/1190000041909858">https://segmentfault.com/a/1190000041909858</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/hello-world/"/>
      <url>/post/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为Hexo博客搭建时候默认生成的文章。</p></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm-编程中遇到的一些问题</title>
      <link href="/post/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/post/python-bian-cheng-zhong-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期进行Python编程的问题汇总。</p><h2 id="需求文档的生成"><a href="#需求文档的生成" class="headerlink" title="需求文档的生成"></a>需求文档的生成</h2><p>需求文档，其实就是<code>requirements.txt</code>。</p><p>对于一个项目来说，要能够运行，需要构建相应的运行环境，运行环境中需要包含项目运行的所有库。对于Python来说，它并没有向下兼容的特性，所以明确项目的运行环境就更加重要。对于同一个库，不同的版本可能会有所差异，因此一个对 项目运行库环境的说明就尤其重要。<code>requirements.txt</code>本质就是包含了项目所需要库的一个详细总结。<br>生成requirements文件一般来说有两种方法。</p><h3 id="pip-freeze-gt-requirements-txt"><a href="#pip-freeze-gt-requirements-txt" class="headerlink" title="pip freeze &gt; requirements.txt"></a><code>pip freeze &gt; requirements.txt</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><ul><li>按这种方式生成的话<strong>一定要在特定的环境下</strong>。</li><li>如果在命令行中运行指令，默认是在Anaconda（base）的环境下运行，会导致将<strong>base环境中所有的包全部导入</strong>，这样操作明显是错误的。会给后续的操作带来很大的麻烦。</li></ul><div align="center">  <img src="https://z4a.net/images/2022/11/19/requirements1.png" alt="直接在cmd生成" width=600></div><h3 id="pipreqs-encoding-utf8-force"><a href="#pipreqs-encoding-utf8-force" class="headerlink" title="pipreqs . --encoding=utf8 --force"></a><code>pipreqs . --encoding=utf8 --force</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure><ul><li>此命令需要安装<code>pipreqs</code>，安装命令为：<code>pip install pipreqs</code> 。此方法最大的优点就是<strong>在任何情况都能正确导入项目需要的库</strong>，因此非常推荐使用。</li><li>注意–encoding&#x3D;utf8为使用utf8编码，不然可能会报<code>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xae in position 406: illegal multibyte sequence </code>的错误.</li><li><code>--force</code>强制执行， 生成目录下的<code>requirements.txt</code>，存在时会直接覆盖。</li></ul><div align="center">     <img src="https://z4a.net/images/2022/11/19/requirements2.png" alt="直接在cmd生成" width=600></div><h3 id="从requirements中安装相应的库。"><a href="#从requirements中安装相应的库。" class="headerlink" title="从requirements中安装相应的库。"></a>从requirements中安装相应的库。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>   这个也是非常常用的一个操作，在运行项目时经常需要通过<code>requirements.txt</code>来安装各种项目依赖库。</p><h2 id="PyInstall打包过于臃肿"><a href="#PyInstall打包过于臃肿" class="headerlink" title="PyInstall打包过于臃肿"></a>PyInstall打包过于臃肿</h2><p>  这个问题其实跟上面<code>pip freeze &gt; requirements.txt</code>生成需求文档的问题一样，需要在特定的虚拟环境中进行打包。如果<strong>直接在命令行输入指令（命令行默认是base环境），就会导致直接将base环境中所有的包都纳入打包范围</strong>，结果生成大小不符合常理的打包文件。</p><h3 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h3><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller1.png" alt="直接在cmd生成" width="500">    <img src="https://z4a.net/images/2022/11/19/pyinstaller2.png" alt="直接在cmd生成" width="500"></div><h3 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h3><div align="center">      <img src="https://z4a.net/images/2022/11/19/pyinstaller3.png" alt="直接在cmd生成" width="500">    <br>    <img src="https://z4a.net/images/2022/11/19/pyinstaller4.png" alt="直接在cmd生成" width="500"></div><h2 id="PyCharm连接Jupyter报错"><a href="#PyCharm连接Jupyter报错" class="headerlink" title="PyCharm连接Jupyter报错"></a>PyCharm连接Jupyter报错</h2><p>  虽然VsCode作为代码编辑器足够优秀，但是并没有很好的编写项目的能力。<br>PyCharm其实是做项目更好的选择。但是我的PyCharm运行ipynb文件时会报如下的错误，这个问题真的困扰我很久了。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter5.png" alt="直接在cmd生成" width="600"></div><p>  解决方法今天找到：</p><h3 id="得到jupyter内核所在的路径。"><a href="#得到jupyter内核所在的路径。" class="headerlink" title="得到jupyter内核所在的路径。"></a>得到jupyter内核所在的路径。</h3><p>  在cmd输入<code>jupyter kernelspec list</code>,得到jupyter内核所在的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter.png" alt="直接在cmd生成" width="600"></div>​<h3 id="查看Python编译器的路径是否正确"><a href="#查看Python编译器的路径是否正确" class="headerlink" title="查看Python编译器的路径是否正确"></a>查看Python编译器的路径是否正确</h3><p>  进入安装内核目录打开<code>kernel.jason</code>文件，查看Python编译器的路径是否正确。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter2.png" alt="直接在cmd生成" width="600"></div><h3 id="修改kernel-jason中内核的路径"><a href="#修改kernel-jason中内核的路径" class="headerlink" title="修改kernel.jason中内核的路径"></a>修改<code>kernel.jason</code>中内核的路径</h3><p>  按照自己能够启动jupyter的Python路径，修改<code>kernel.jason</code>中内核的路径。（基本情况是生成了错误的路径）</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter3.png" alt="直接在cmd生成" width="600"></div><h3 id="重启jupyter"><a href="#重启jupyter" class="headerlink" title="重启jupyter"></a>重启jupyter</h3><h3 id="重启PyChram"><a href="#重启PyChram" class="headerlink" title="重启PyChram"></a>重启PyChram</h3><p>  重启PyChram，问题解决。</p><div align="center">  <img src="https://z4a.net/images/2022/11/19/jupyter4.png" alt="直接在cmd生成" width="600"></div><blockquote><p>我也是生成了错误的内核路径，不知道啥情况，我连那个文件夹都没有，这个估计是PyCharm的bug，希望日后修复。</p></blockquote><h2 id="PyCharm中OpenCV无法得到提示"><a href="#PyCharm中OpenCV无法得到提示" class="headerlink" title="PyCharm中OpenCV无法得到提示"></a>PyCharm中OpenCV无法得到提示</h2><p>在PyCharm中<code>import cv2</code>后，会出现调用cv2方法时没有任何补全提示，甚至输入<code>cv2.</code>时还会出现未知高亮，但是还是可以正常使用。PyCharm无法提供补全提示，说明PyCharm无法找到对应的索引，这时候就需要去找到cv2包所在的文件路径，然后将它加入到解释器路径中。</p><h3 id="寻找cv2所在路径"><a href="#寻找cv2所在路径" class="headerlink" title="寻找cv2所在路径"></a>寻找cv2所在路径</h3><p>  如果是在conda环境中安装，以我的路径为例：</p><blockquote><p>D:\Anaconda\envs\digital_image\Lib\site-packages\cv2</p></blockquote><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv26a4b7efd79bb3fb0.png" alt="cv2所在路径" width=600></div><p>  如果不是在conda环境中安装，那么此时可以先写入<code>cv2.imread</code>，选中<code>imread</code>后右键，按照“转到→实现”的顺序就可以跳转到<code>_init_.py</code>文件中，鼠标悬停在标签上即可看到路径。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/cv2.png" alt="查找cv2所在路径" width=600></div><br><blockquote><p>小插曲：其实可以看到我的cv2路径已经被复制到c盘中，所以一开始我本来尝试删除进行错误展示，但是发现删除解释器中的cv2路径后还是能正常进行代码提示，原因就在这里，估计是PyCharm进行了备份。</p></blockquote><h3 id="将路径加入解释器路径中"><a href="#将路径加入解释器路径中" class="headerlink" title="将路径加入解释器路径中"></a>将路径加入解释器路径中</h3><p>  找到路径后，按照“文件→设置→项目→Python解释器”的顺序，找到PyCharm解释器列表，之后的操作如下图所示。</p><div align="center"><img src="https://z4a.net/images/2023/02/08/d37934718875d1edba8d4243137c3b1a.png" alt="Python解释器" width="600"><img src="https://z4a.net/images/2023/02/08/cv22.png" alt="直接在cmd生成" width="600"><img src="https://z4a.net/images/2023/02/08/cv21.png" alt="直接在cmd生成" width="600"></div><h3 id="重启PyCharm"><a href="#重启PyCharm" class="headerlink" title="重启PyCharm"></a>重启PyCharm</h3><p>  操作完成后，<strong>建议重启一下PyCharm</strong>，之后写入<code>import cv2</code>操作后，就可以直接看见代码提示，未知的高亮提示也不见了。</p><div align="center">  <img src="https://z4a.net/images/2023/02/08/e280accc813259725a0330982e12968f.png" alt="解决补全问题" width="600"></div><h2 id="github仓库推送超时"><a href="#github仓库推送超时" class="headerlink" title="github仓库推送超时"></a>github仓库推送超时</h2><p>PyCharm有内置的Git管理工具，不用输命令即可使用git管理项目，当然也可以直接上传到自己的github仓库。但大陆github连接不太稳定，有时推送会经常出现以下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to connect to github.com port 443 after 21074 ms: Timed out</span><br></pre></td></tr></table></figure><p>但是PyCharm连接github是有特定加速的，这从我日常使用coplilot可以看出来，一般来说不会超时。<strong>出现这种情况最有可能就是忘记关闭代理</strong>，因为访问github一般都是开着代理访问，事后即使是关闭代理也很难上传了。</p><p>这时候就可以使用以下命令来<strong>关闭代理</strong>，这样之后一般来说就可以推送成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 取消代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><blockquote><p>这条命令不一定能解决所有问题，请检查网络设置</p></blockquote><h2 id="Pycharm一直扫描conda软件包"><a href="#Pycharm一直扫描conda软件包" class="headerlink" title="Pycharm一直扫描conda软件包"></a>Pycharm一直扫描conda软件包</h2><p>这个问题忘记截图了，就是在Pycharm的消息区一直显示<code>正在扫描conda已安装的软件包</code>，然后就一直处于扫描状态，<strong>但是程序其实是可以运行的</strong>，但是过了很久Pycharm会出现弹窗报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">If submitted, this report will be used by core maintainers to improve</span><br><span class="line">future releases of conda.</span><br><span class="line">Would you like conda to send this report to the core maintainers? [y/N]: </span><br><span class="line">KeyError(<span class="string">&#x27;pkgs_dirs&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\exception_handler.py&quot;</span>, line 17, <span class="keyword">in</span> __call__</span><br><span class="line">    <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\cli\main.py&quot;</span>, line 57, <span class="keyword">in</span> main_subshell</span><br><span class="line">    context.__init__(argparse_args=args)</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 459, <span class="keyword">in</span> __init__</span><br><span class="line">    CONDA_PREFIX=determine_target_prefix(self, argparse_args),</span><br><span class="line">                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1975, <span class="keyword">in</span> determine_target_prefix</span><br><span class="line">    <span class="built_in">return</span> validate_prefix_name(prefix_name, ctx=ctx)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1935, <span class="keyword">in</span> validate_prefix_name</span><br><span class="line">    <span class="built_in">return</span> locate_prefix_by_name(prefix_name)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1894, <span class="keyword">in</span> locate_prefix_by_name</span><br><span class="line">    envs_dirs = context.envs_dirs</span><br><span class="line">                ^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 657, <span class="keyword">in</span> envs_dirs</span><br><span class="line">    <span class="built_in">return</span> mockable_context_envs_dirs(</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 125, <span class="keyword">in</span> mockable_context_envs_dirs</span><br><span class="line">    fixed_dirs.append(<span class="built_in">join</span>(user_data_dir(APP_NAME, APP_NAME), <span class="string">&quot;envs&quot;</span>))</span><br><span class="line">                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\_vendor\appdirs.py&quot;</span>, line 67, <span class="keyword">in</span> user_data_dir</span><br><span class="line">    path = os.path.join(_get_win_folder(const), appauthor, appname)</span><br><span class="line">                        ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\_vendor\appdirs.py&quot;</span>, line 266, <span class="keyword">in</span> _get_win_folder_with_pywin32</span><br><span class="line">    <span class="built_in">dir</span> = shell.SHGetFolderPath(0, getattr(shellcon, csidl_name), 0, 0)</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">pywintypes.com_error: (-2147024893, <span class="string">&#x27;系统找不到指定的路径。&#x27;</span>, None, None)</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\exception_handler.py&quot;</span>, line 166, <span class="keyword">in</span> print_unexpected_error_report</span><br><span class="line">    get_main_info_str(error_report[<span class="string">&quot;conda_info&quot;</span>])</span><br><span class="line">  File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\cli\main_info.py&quot;</span>, line 254, <span class="keyword">in</span> get_main_info_str</span><br><span class="line">    info_dict[f<span class="string">&quot;_&#123;key&#125;&quot;</span>] = (<span class="string">&quot;\n&quot;</span> + 26 * <span class="string">&quot; &quot;</span>).<span class="built_in">join</span>(map(str, info_dict[key]))</span><br><span class="line">                                                           ~~~~~~~~~^^^^^</span><br><span class="line">KeyError: <span class="string">&#x27;pkgs_dirs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ERROR REPORT &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\exception_handler.py&quot;</span>, line 17, <span class="keyword">in</span> __call__</span><br><span class="line">        <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">               ^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\cli\main.py&quot;</span>, line 57, <span class="keyword">in</span> main_subshell</span><br><span class="line">        context.__init__(argparse_args=args)</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 459, <span class="keyword">in</span> __init__</span><br><span class="line">        CONDA_PREFIX=determine_target_prefix(self, argparse_args),</span><br><span class="line">                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1975, <span class="keyword">in</span> determine_target_prefix</span><br><span class="line">        <span class="built_in">return</span> validate_prefix_name(prefix_name, ctx=ctx)</span><br><span class="line">               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1935, <span class="keyword">in</span> validate_prefix_name</span><br><span class="line">        <span class="built_in">return</span> locate_prefix_by_name(prefix_name)</span><br><span class="line">               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 1894, <span class="keyword">in</span> locate_prefix_by_name</span><br><span class="line">        envs_dirs = context.envs_dirs</span><br><span class="line">                    ^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 657, <span class="keyword">in</span> envs_dirs</span><br><span class="line">        <span class="built_in">return</span> mockable_context_envs_dirs(</span><br><span class="line">               ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\base\context.py&quot;</span>, line 125, <span class="keyword">in</span> mockable_context_envs_dirs</span><br><span class="line">        fixed_dirs.append(<span class="built_in">join</span>(user_data_dir(APP_NAME, APP_NAME), <span class="string">&quot;envs&quot;</span>))</span><br><span class="line">                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\_vendor\appdirs.py&quot;</span>, line 67, <span class="keyword">in</span> user_data_dir</span><br><span class="line">        path = os.path.join(_get_win_folder(const), appauthor, appname)</span><br><span class="line">                            ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File <span class="string">&quot;D:\anaconda\Lib\site-packages\conda\_vendor\appdirs.py&quot;</span>, line 266, <span class="keyword">in</span> _get_win_folder_with_pywin32</span><br><span class="line">        <span class="built_in">dir</span> = shell.SHGetFolderPath(0, getattr(shellcon, csidl_name), 0, 0)</span><br><span class="line">              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">    pywintypes.com_error: (-2147024893, <span class="string">&#x27;系统找不到指定的路径。&#x27;</span>, None, None)</span><br><span class="line"></span><br><span class="line">`$ D:\anaconda\Scripts\conda-script.py list -n spider`</span><br><span class="line"></span><br><span class="line">  environment variables:</span><br><span class="line">conda info could not be constructed.</span><br><span class="line">KeyError(<span class="string">&#x27;pkgs_dirs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">An unexpected error has occurred. Conda has prepared the above report.</span><br><span class="line">If you suspect this error is being caused by a malfunctioning plugin,</span><br><span class="line">consider using the --no-plugins option to turn off plugins.</span><br><span class="line"></span><br><span class="line">Example: conda --no-plugins install &lt;package&gt;</span><br><span class="line"></span><br><span class="line">Alternatively, you can <span class="built_in">set</span> the CONDA_NO_PLUGINS environment variable on</span><br><span class="line">the <span class="built_in">command</span> line to run the <span class="built_in">command</span> without plugins enabled.</span><br><span class="line"></span><br><span class="line">Example: CONDA_NO_PLUGINS=<span class="literal">true</span> conda install &lt;package&gt;</span><br></pre></td></tr></table></figure><p>bing一直搜都搜不到，最后google找到了问题所在，上述报错有两个关键信息：</p><ol><li>KeyError(‘pkgs_dirs’)</li><li>pywintypes.com_error: (-2147024893, ‘系统找不到指定的路径。’, None, None)</li></ol><p>这说明是路径问题，在conda的issue中发现了一个issue提过这个问题<a href="https://github.com/conda/conda/issues/11503">ImportError: DLL load failed while importing shell: Can not find procedure.</a>。其中提到的解决方法是在base环境中重新安装pywin：228，即如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pywin32==228</span><br></pre></td></tr></table></figure><p>但是我测试发现会出现找不到的情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement pywin32==228 (from versions: 303, 304, 305, 306)</span><br><span class="line">ERROR: No matching distribution found <span class="keyword">for</span> pywin32==228</span><br></pre></td></tr></table></figure><p>我根据建议测试了303版本成功，打开Pycharm不再出现一直<strong>正在扫描conda已安装的软件包</strong>的情况。</p><blockquote><p>In my test <code>pywin32</code> 301 and 304 produce this error. Versions 303, 302, 300, and 228 are all OK.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyCharm </tag>
            
            <tag> Jupyter </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch-国内极速安装</title>
      <link href="/post/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/"/>
      <url>/post/shi-yong-whl-wen-jian-kuai-su-an-zhuang-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/PyTorch_office.png" alt="PyTorch_office" title="PyTorch主页" width="700"></div><br><blockquote><p>PyTorch官网：<a href="https://pytorch.org/">https://pytorch.org/</a></p></blockquote><p>在Windows环境下，PyTorch的安装由于网络问题，大部分人如果想直接通过官网的指令安装显然是非常困难的。因为torch这个库有2G左右的大小，服务器又在国外，这就出现了下载异常缓慢（能下一天）或者下载容易失败的问题（网络问题导致下载中断）。</p><p><strong>这时候有两种方法：</strong></p><ol><li>使用魔法，改善下载速度。</li><li>使用本地文件安装。</li></ol><p>这个博客主要记录如何使用本地压缩包（.whl）文件快速安装PyTorch。</p><h2 id="明确自己的使用需求"><a href="#明确自己的使用需求" class="headerlink" title="明确自己的使用需求"></a>明确自己的使用需求</h2><p>如果你需要使用GPU进行PyTorch实践，那么你就需要安装带CUDA的版本。如果你只是想要使用CPU进行实践，那么就选择CPU版本进行下载。各有优势，没有高低之分。<br><strong>这里有一些注意点</strong>：</p><ol><li>如果你想要下载CUDA版本的PyTorch，不要通过清华源下载，清华源已经没有CUDA版本的资源，下载多少次都是CPU版本的。</li><li>想使用<strong>GPU实践torch，必须安装NVIDIA CUDA</strong>。</li></ol><h2 id="查看自己的CUDA版本并安装CUDA支持"><a href="#查看自己的CUDA版本并安装CUDA支持" class="headerlink" title="查看自己的CUDA版本并安装CUDA支持"></a>查看自己的CUDA版本并安装CUDA支持</h2><ul><li>对于大多数NVIDIA显卡来说，都是支持CUDA的，<strong>如果你的显卡不支持CUDA，那即使装了CUDA版本，也只能使用CPU进行实践。</strong></li><li><strong>如果你的显卡不支持CUDA，那么建议下载CPU版本。</strong></li></ul><h3 id="查看CUDA版本"><a href="#查看CUDA版本" class="headerlink" title="查看CUDA版本"></a>查看CUDA版本</h3><p>如果下载CUDA版本的PyTorch，此时就需要对应自己电脑所支持的最高CUDA版本，然后同级或者向下兼容选择相应的CUDA安装指令。查看CUDA版本有两种方法。</p><ol><li>通过NVIDIA控制面板查看</li></ol><div align="center">  <img src="https://z4a.net/images/2022/11/16/cuda_1.png" alt="通过控制面板" width="500"><img src="https://z4a.net/images/2022/11/16/cuda_2.png" alt="通过控制面板查看" title="通过控制面板查看" width="500"></div><ol start="2"><li><p>通过指令</p><p>打开命令行，输入<code>nvidia-smi</code>，出现以下界面</p></li></ol><div align="center">   <img src="https://z4a.net/images/2022/11/16/cuda_3.png" alt="通过命令函查看" title="通过命令行查看" width="700"></div><h3 id="安装CUDA支持"><a href="#安装CUDA支持" class="headerlink" title="安装CUDA支持"></a>安装CUDA支持</h3><p>查询到自己电脑的CUDA版本后，你需要安装CUDA支持。</p><blockquote><p>各版本CUDA下载：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p></blockquote><div align="center">     <img src="https://z4a.net/images/2022/11/16/CUDA.png" alt="CUDA安装" title="CUDA安装" width="600"></div><p>建议选择电脑支持的<strong>最高CUDA版本</strong>安装即可。</p><h2 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h2><div align="center">     <img src="https://z4a.net/images/2022/11/16/install.png" alt="安装方式" title="安装方式" width="700"></div><p>如果你是Windows用户，一般情况下，官网提供了两种常用的安装方式：</p><ol><li>pip指令</li><li>Conda指令（需要Anaconda环境）</li></ol><p>这两个指令下载的东西都是一样的，只是安装的方式不同。<strong>建议在Anaconda环境中安装</strong>，方便管理。</p><h2 id="下载离线文件"><a href="#下载离线文件" class="headerlink" title="下载离线文件"></a>下载离线文件</h2><div align="center">  <img src="https://z4a.net/images/2022/11/16/whl_list.png" alt="PyTorch_office" title="PyTorch主页" width="400"></div><hr><p>.whl文件，实际就是torch的压缩文件。<br>当我们使用pip进行库的下载时候，会先拉取压缩包请求，然后在本地解压安装。这边有个注意点，如果当前拉取的压缩包已经存在，则会直接解压。所以我们提前准备好torch的压缩包，当使用pip指令下载时，会直接拉取本地的压缩包，跳过下载安装包的过程。从本地文件安装的原理就是如此。</p><ul><li>当然还有一个重要前提，单独下载.whl文件真的非常快。</li></ul><p>下载文件之前需要了解一些概念，以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>这个文件名为例。</p><blockquote><p>torch-1.12.0：代表torch版本</p><p>cu116：代表支持CUDA11.6</p><p>cp37：代表运行环境为Python3.7</p><p>win：指Windows平台</p><p>amd64：代表64位操作系统</p></blockquote><p>了解这些之后就可以按自己的需求下载自己需要的.whl压缩文件。</p><blockquote><p>下载地址：<a href="https://download.pytorch.org/whl/torch/">https://download.pytorch.org/whl/torch/</a></p></blockquote><ul><li>小提示：善用快捷搜索，Ctrl+F</li><li>下载后的文件最好放入<code>C:\Users\用户名</code>路径下，方便后续安装。</li></ul><h2 id="使用pip指令安装压缩文件"><a href="#使用pip指令安装压缩文件" class="headerlink" title="使用pip指令安装压缩文件"></a>使用pip指令安装压缩文件</h2><p>以<code>torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl</code>为例。</p><p>进入要安装的环境命令行，进入.whl文件所在的路径，运行指令<code>pip install torch-1.12.0+cu116-cp37-cp37m-win_amd64.whl </code> </p><p>如果没出现下载，就会自动显示要求满足，然后压缩安装。如果还是下载了，请自行关闭命令行再次尝试一遍。</p><div align="center">  <img src="https://z4a.net/images/2022/11/16/install_1.png" alt="安装压缩包" title="安装压缩包" width="600"></div><p>安装torch完成后，打开官网再次运行安装命令安装其他相适应的库即可，此时就会直接跳过torch的安装了。</p><div align="center"><img src="https://z4a.net/images/2022/11/16/install_2.png" alt="安装链接" title="安装链接" width="500"><img src="https://z4a.net/images/2022/11/16/install_3.png" alt="安装成功" title="安装成功" width="500"></div><ul><li>注意.whl文件与pip安装命令之间的对应关系。</li><li>如果输入pip您发现还在下载torch，那么您下载的.whl不满足对应要求，请按照pip出现的版本重新下载.whl文件。</li></ul><h2 id="一些检查指令"><a href="#一些检查指令" class="headerlink" title="一些检查指令"></a>一些检查指令</h2><ul><li>返回当前设备索引<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.current_device()</span><br></pre></td></tr></table></figure></li><li>返回GPU的数量  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.device_count()</span><br></pre></td></tr></table></figure></li><li>返回gpu名字，设备索引默认从0开始<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.get_device_name(0)</span><br></pre></td></tr></table></figure></li><li>cuda是否可用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>我的结果：<div align="center"><img src="https://z4a.net/images/2022/11/16/check.png" alt="PyTorch_office" title="PyTorch主页" width="350"></div><br></li></ul><blockquote><p>如果<code>torch.cuda.is_available()</code>返回的是False，那么很遗憾，你可能需要重新安装，重新检查问题所在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halo-博客搭建</title>
      <link href="/post/halo-bo-ke-da-jian-li-cheng/"/>
      <url>/post/halo-bo-ke-da-jian-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>首先要说明的是，这个博客的搭建是按照b站up主“我不是咕咕鸽”所发视频教程来的，大佬很强，真正做到了傻瓜式的教程，个人还是非常感谢的。<br>因为视频是2019年，所以在搭建过程中肯定会遇到的与视频有些出路的地方，我在这个文章中小小记录一下。<br>先这里放一下链接：</p><blockquote><p>如何用服务器优雅地搭建一个博客—Hello,Halo!：<a href="https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web">https://www.bilibili.com/video/BV1JN411Q7Na?share_source=copy_web</a></p></blockquote><div align=center class="aspect-ratio"><iframe src="//player.bilibili.com/player.html?bvid=BV1JN411Q7Na" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p>服务器购买还是跟视频说的一样，还是推荐Vultr，当然你也可以选择国内的服务器厂商，但是我觉得Vultr的价格确实还算亲民（在这篇文章编写的时候是<strong>1＄：7.18￥</strong>）。</p><blockquote><p>Vultr官网：<a href="https://my.vultr.com/">https://my.vultr.com/</a></p></blockquote><p>明明后缀中有cn，但是还是可能需要魔法，不然可能会一直加载，注册流程就先跳过了。</p><h2 id="Server-Type"><a href="#Server-Type" class="headerlink" title="Server Type"></a><strong>Server Type</strong></h2><p>前面两个<strong>High Performance</strong>都可以。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/CPU.png"></div><h2 id="Server-Location"><a href="#Server-Location" class="headerlink" title="Server Location"></a><strong>Server Location</strong></h2><p>这个算比较关键，主要如果服务器离中国太远的话，很容易出现高Ping，所以这边先点到Asia，这边推荐选择Tokyo，当然可以选Tokyo之外的其他地区。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/location.png"></div><h2 id="Server-Image"><a href="#Server-Image" class="headerlink" title="Server Image"></a><strong>Server Image</strong></h2><p>按视频来是选择<strong>CentOS 7×64</strong>，其实只要是Decker支持安装的System都是可行的。</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/operation-system.png"></div><h2 id="Server-Size"><a href="#Server-Size" class="headerlink" title="Server Size"></a><strong>Server Size</strong></h2><p>视频里也说了最好还是用一核2G的机子，不然的话你的博客就不能设计太多的其他东西，不然会很卡（我自己的一核1G已经卡爆了）</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bill.png"></div><p>把这个关掉然后创建即可</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/auto_save_to_cloud.png"></div><p>网站的链接延迟使用站长之家的Ping值检测即可。大量延迟太高的节点或者主机无响应的话，可能需要重新创建服务器。</p><blockquote><p>站长之家：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p></blockquote><h1 id="使用FinalShell操纵远程服务器"><a href="#使用FinalShell操纵远程服务器" class="headerlink" title="使用FinalShell操纵远程服务器"></a>使用FinalShell操纵远程服务器</h1><p>这边倒是没有出现问题，这边就直接贴一下链接。</p><blockquote><p>FinalShell：<a href="http://www.hostbuf.com/t/988.html">http://www.hostbuf.com/t/988.html</a></p></blockquote><h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><blockquote><p>宝塔面板：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p></blockquote><p>CentOS的安装代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="显示宝塔面板的登陆网址"><a href="#显示宝塔面板的登陆网址" class="headerlink" title="显示宝塔面板的登陆网址"></a>显示宝塔面板的登陆网址</h2><p>这边一般会给一个国外访问链接和国内访问两个链接，哪个点的开就选哪个</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/c56237a158382e8be971ccbfc29b3118.png"></div><p>这边如果后续不小心关闭了，使用以下代码就可以再次显现链接，以及账号密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt default</span><br></pre></td></tr></table></figure><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>后续如果忘记账号密码，密码就会不显示（显示为***），此时就需要更改密码，可以通过输入以下指令修改密码（把命令最后面的 “testpasswd” 替换成你要改的新密码。如果你直接复制这条命令那默认的密码就是 “testpasswd”！）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server/panel &amp;&amp; python tools.pyc panel testpasswd</span><br></pre></td></tr></table></figure><p>也可以通过输入bt调出菜单，可以看到修改密码的选项：</p><div align="center"><img src="https://www.z4a.net/images/2023/03/13/bt.png"></div><h1 id="安装Docker和Halo博客"><a href="#安装Docker和Halo博客" class="headerlink" title="安装Docker和Halo博客"></a>安装Docker和Halo博客</h1><p>跟着视频一步一步装就好。</p><blockquote><p>Docker install on CentOS：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br>使用Docker安装Halo博客：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></p></blockquote><p>这里其实也可以在宝塔面板中安装Docker，但是面板中的版本可能不是最新版，因此不推荐这种方法。</p><div align="center">  <img src="https://www.z4a.net/images/2023/03/13/docker_.png"></div><p>这边就要注意端口的一致性，不然无法准确映射。</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>由于英语不是很好，加上视频里完全没有细细说DNS解析这方面，在这里确实卡了很久。简单来说，当你拿到域名到代理商那里去解析的时候，代理商会显示两个值，需要把这两个值添加到我们购买域名的网站对应域名的Manage DNS Records里，目的是为了让这个域名知道是谁来管理他。<br>如果你是namesoil买的域名，那么这样按这个顺序点击：主页的MyCount → ，domain link manager，然会会出现以下界面。</p><div align="center">  <img src="https://z4a.net/images/2023/03/15/domain-link-manager.png"><img src="https://z4a.net/images/2023/03/15/Domain-L-ink-Manager.png"></div><p>勾选域名，点击上面的Change Nameservers，然后把开头的全部删除，把代理商给你的两个值填进去就好。<br>提交之后需要等待审核（非常快），然后按照视频的流程即可。</p><h1 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a>设置反向代理</h1><p>申请的SLL证书（不申请你的网站进入时便会又不安全警告）<strong>是有时间期限的，一般是90天，之后还需要重新申请。</strong><br>反向代理的代码在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8090/;</span><br><span class="line">  rewrite ^/(.*)$ /$1 break;</span><br><span class="line">  proxy_redirect off;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header Upgrade-Insecure-Requests 1;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加之后就可以使用域名访问我们的博客。</p><h1 id="主题的选择"><a href="#主题的选择" class="headerlink" title="主题的选择"></a>主题的选择</h1><p>拿到博客一开始的主题算非常简陋的，可以去Halo的<strong>主题仓库</strong>更换自己喜欢的主题。如果你和我选择的一样，都是<strong>一核1G，那么还是不要安装太花里胡哨的主题，因为这样你的博客日常访问都会非常卡顿，这会严重影响博客的体验。</strong></p><blockquote><p>Halo主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Halo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> 服务器 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>归档</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>这里是gcnanmu，一个普通的大学生，喜欢鼓捣一些奇怪的事，建立博客的初衷是记录与分享，所以所有文章都尽量写的详细且易懂，希望对访问的你有所帮助。本站的话主要是为了备份使用，以防服务器出现问题或者续不了费用导致的文章丢失。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/bilibili.css"/>
      <url>/css/bilibili.css</url>
      
        <content type="html"><![CDATA[/*哔哩哔哩视频适配*/.aspect-ratio {    position: relative;    width: 100%;    height: auto;    padding-bottom: 75%;    margin: 3% auto;    text-align: center;  }  .aspect-ratio iframe {    position: absolute;    width: 100%;    height: 86%;    left: 0;    top: 0;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/loading-bar.css"/>
      <url>/css/loading-bar.css</url>
      
        <content type="html"><![CDATA[.pace {-webkit-pointer-events: none;pointer-events: none;-webkit-user-select: none;-moz-user-select: none;user-select: none;-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 10px;-moz-border-radius: 10px;border-radius: 10px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;z-index: 2000;position: fixed;margin: auto;top: 12px;left: 0;right: 0;bottom: 0;width: 200px;height: 50px;overflow: hidden;}.pace .pace-progress {-webkit-box-sizing: border-box;-moz-box-sizing: border-box;-ms-box-sizing: border-box;-o-box-sizing: border-box;box-sizing: border-box;-webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;-webkit-background-clip: padding-box;-moz-background-clip: padding;background-clip: padding-box;-webkit-transform: translate3d(0, 0, 0);transform: translate3d(0, 0, 0);display: block;position: absolute;right: 100%;margin-right: -7px;width: 93%;top: 7px;height: 14px;font-size: 12px;background: #29d;color: #29d;line-height: 60px;font-weight: bold;font-family: Helvetica, Arial, "Lucida Grande", sans-serif;-webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;-ms-box-shadow: 120px 0 #fff, 240px 0 #fff;box-shadow: 120px 0 #fff, 240px 0 #fff;}.pace .pace-progress:after {content: attr(data-progress-text);display: inline-block;position: fixed;width: 45px;text-align: right;right: 0;padding-right: 16px;top: 4px;}.pace .pace-progress[data-progress-text="0%"]:after { right: -200px }.pace .pace-progress[data-progress-text="1%"]:after { right: -198.14px }.pace .pace-progress[data-progress-text="2%"]:after { right: -196.28px }.pace .pace-progress[data-progress-text="3%"]:after { right: -194.42px }.pace .pace-progress[data-progress-text="4%"]:after { right: -192.56px }.pace .pace-progress[data-progress-text="5%"]:after { right: -190.7px }.pace .pace-progress[data-progress-text="6%"]:after { right: -188.84px }.pace .pace-progress[data-progress-text="7%"]:after { right: -186.98px }.pace .pace-progress[data-progress-text="8%"]:after { right: -185.12px }.pace .pace-progress[data-progress-text="9%"]:after { right: -183.26px }.pace .pace-progress[data-progress-text="10%"]:after { right: -181.4px }.pace .pace-progress[data-progress-text="11%"]:after { right: -179.54px }.pace .pace-progress[data-progress-text="12%"]:after { right: -177.68px }.pace .pace-progress[data-progress-text="13%"]:after { right: -175.82px }.pace .pace-progress[data-progress-text="14%"]:after { right: -173.96px }.pace .pace-progress[data-progress-text="15%"]:after { right: -172.1px }.pace .pace-progress[data-progress-text="16%"]:after { right: -170.24px }.pace .pace-progress[data-progress-text="17%"]:after { right: -168.38px }.pace .pace-progress[data-progress-text="18%"]:after { right: -166.52px }.pace .pace-progress[data-progress-text="19%"]:after { right: -164.66px }.pace .pace-progress[data-progress-text="20%"]:after { right: -162.8px }.pace .pace-progress[data-progress-text="21%"]:after { right: -160.94px }.pace .pace-progress[data-progress-text="22%"]:after { right: -159.08px }.pace .pace-progress[data-progress-text="23%"]:after { right: -157.22px }.pace .pace-progress[data-progress-text="24%"]:after { right: -155.36px }.pace .pace-progress[data-progress-text="25%"]:after { right: -153.5px }.pace .pace-progress[data-progress-text="26%"]:after { right: -151.64px }.pace .pace-progress[data-progress-text="27%"]:after { right: -149.78px }.pace .pace-progress[data-progress-text="28%"]:after { right: -147.92px }.pace .pace-progress[data-progress-text="29%"]:after { right: -146.06px }.pace .pace-progress[data-progress-text="30%"]:after { right: -144.2px }.pace .pace-progress[data-progress-text="31%"]:after { right: -142.34px }.pace .pace-progress[data-progress-text="32%"]:after { right: -140.48px }.pace .pace-progress[data-progress-text="33%"]:after { right: -138.62px }.pace .pace-progress[data-progress-text="34%"]:after { right: -136.76px }.pace .pace-progress[data-progress-text="35%"]:after { right: -134.9px }.pace .pace-progress[data-progress-text="36%"]:after { right: -133.04px }.pace .pace-progress[data-progress-text="37%"]:after { right: -131.18px }.pace .pace-progress[data-progress-text="38%"]:after { right: -129.32px }.pace .pace-progress[data-progress-text="39%"]:after { right: -127.46px }.pace .pace-progress[data-progress-text="40%"]:after { right: -125.6px }.pace .pace-progress[data-progress-text="41%"]:after { right: -123.74px }.pace .pace-progress[data-progress-text="42%"]:after { right: -121.88px }.pace .pace-progress[data-progress-text="43%"]:after { right: -120.02px }.pace .pace-progress[data-progress-text="44%"]:after { right: -118.16px }.pace .pace-progress[data-progress-text="45%"]:after { right: -116.3px }.pace .pace-progress[data-progress-text="46%"]:after { right: -114.44px }.pace .pace-progress[data-progress-text="47%"]:after { right: -112.58px }.pace .pace-progress[data-progress-text="48%"]:after { right: -110.72px }.pace .pace-progress[data-progress-text="49%"]:after { right: -108.86px }.pace .pace-progress[data-progress-text="50%"]:after { right: -107px }.pace .pace-progress[data-progress-text="51%"]:after { right: -105.14px }.pace .pace-progress[data-progress-text="52%"]:after { right: -103.28px }.pace .pace-progress[data-progress-text="53%"]:after { right: -101.42px }.pace .pace-progress[data-progress-text="54%"]:after { right: -99.56px }.pace .pace-progress[data-progress-text="55%"]:after { right: -97.7px }.pace .pace-progress[data-progress-text="56%"]:after { right: -95.84px }.pace .pace-progress[data-progress-text="57%"]:after { right: -93.98px }.pace .pace-progress[data-progress-text="58%"]:after { right: -92.12px }.pace .pace-progress[data-progress-text="59%"]:after { right: -90.26px }.pace .pace-progress[data-progress-text="60%"]:after { right: -88.4px }.pace .pace-progress[data-progress-text="61%"]:after { right: -86.53999999999999px }.pace .pace-progress[data-progress-text="62%"]:after { right: -84.68px }.pace .pace-progress[data-progress-text="63%"]:after { right: -82.82px }.pace .pace-progress[data-progress-text="64%"]:after { right: -80.96000000000001px }.pace .pace-progress[data-progress-text="65%"]:after { right: -79.1px }.pace .pace-progress[data-progress-text="66%"]:after { right: -77.24px }.pace .pace-progress[data-progress-text="67%"]:after { right: -75.38px }.pace .pace-progress[data-progress-text="68%"]:after { right: -73.52px }.pace .pace-progress[data-progress-text="69%"]:after { right: -71.66px }.pace .pace-progress[data-progress-text="70%"]:after { right: -69.8px }.pace .pace-progress[data-progress-text="71%"]:after { right: -67.94px }.pace .pace-progress[data-progress-text="72%"]:after { right: -66.08px }.pace .pace-progress[data-progress-text="73%"]:after { right: -64.22px }.pace .pace-progress[data-progress-text="74%"]:after { right: -62.36px }.pace .pace-progress[data-progress-text="75%"]:after { right: -60.5px }.pace .pace-progress[data-progress-text="76%"]:after { right: -58.64px }.pace .pace-progress[data-progress-text="77%"]:after { right: -56.78px }.pace .pace-progress[data-progress-text="78%"]:after { right: -54.92px }.pace .pace-progress[data-progress-text="79%"]:after { right: -53.06px }.pace .pace-progress[data-progress-text="80%"]:after { right: -51.2px }.pace .pace-progress[data-progress-text="81%"]:after { right: -49.34px }.pace .pace-progress[data-progress-text="82%"]:after { right: -47.480000000000004px }.pace .pace-progress[data-progress-text="83%"]:after { right: -45.62px }.pace .pace-progress[data-progress-text="84%"]:after { right: -43.76px }.pace .pace-progress[data-progress-text="85%"]:after { right: -41.9px }.pace .pace-progress[data-progress-text="86%"]:after { right: -40.04px }.pace .pace-progress[data-progress-text="87%"]:after { right: -38.18px }.pace .pace-progress[data-progress-text="88%"]:after { right: -36.32px }.pace .pace-progress[data-progress-text="89%"]:after { right: -34.46px }.pace .pace-progress[data-progress-text="90%"]:after { right: -32.6px }.pace .pace-progress[data-progress-text="91%"]:after { right: -30.740000000000002px }.pace .pace-progress[data-progress-text="92%"]:after { right: -28.880000000000003px }.pace .pace-progress[data-progress-text="93%"]:after { right: -27.02px }.pace .pace-progress[data-progress-text="94%"]:after { right: -25.16px }.pace .pace-progress[data-progress-text="95%"]:after { right: -23.3px }.pace .pace-progress[data-progress-text="96%"]:after { right: -21.439999999999998px }.pace .pace-progress[data-progress-text="97%"]:after { right: -19.58px }.pace .pace-progress[data-progress-text="98%"]:after { right: -17.72px }.pace .pace-progress[data-progress-text="99%"]:after { right: -15.86px }.pace .pace-progress[data-progress-text="100%"]:after { right: -14px }.pace .pace-activity {position: absolute;width: 100%;height: 28px;z-index: 2001;box-shadow: inset 0 0 0 2px #29d, inset 0 0 0 7px #FFF;border-radius: 10px;}.pace.pace-inactive {display: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/pic_border.css"/>
      <url>/css/pic_border.css</url>
      
        <content type="html"><![CDATA[#post img {  display: block;  border: 5px solid #ddd;  padding: 5px;  background: #fff;  border-radius: 10px;}#post figcaption {  font-size: small;  color: var(rgba(0, 0, 0));}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(rgb(14, 151, 243));  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(rgb(14, 151, 243));}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/footer.css"/>
      <url>/css/footer.css</url>
      
        <content type="html"><![CDATA[#moe>a {    text-decoration: none;    color: black;}#moe img {    width:auto;    height:32px;    vertical-align:middle;}#moe a:hover {    color: pink;    text-decoration: none;}#miit a {    text-decoration: none;    color: black;}#miit a:hover {    color: yellow;    text-decoration: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 一级菜单居中 *//* #nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;} *//* 子菜单横向展示 *//* #nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;} *//* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 *//* .menus_items .menus_item:nth-child(2) .menus_item_child {  left: 0px;} *//* 返回主页效果 */.site-name::before{  opacity: 0;  background-color: var(--lyx-theme)!important;  border-radius: 8px;  -webkit-border-radius: 8px;  -moz-border-radius: 8px;  -ms-border-radius: 8px;  -o-border-radius: 8px;  transition: .3s;  -webkit-transition: .3s;  -moz-transition: .3s;  -ms-transition: .3s;  -o-transition: .3s;  position:absolute;  top:0!important;  right:0!important;  width:100%;  height:100%;  content: "\f015";  box-shadow: 0 0 5px var(--lyx-theme);  font-family: "Font Awesome 6 Free";  text-align: center;  color:white;  line-height:34px;/*如果有溢出或者垂直不居中的现象微调一下这个参数*/  font-size: 18px;/*根据个人喜好*/}.site-name:hover::before{  opacity: 1;  scale:1.03;}.site-name{  position: relative;  font-size: 24px; /*一定要把字体调大点，否则效果惨不忍睹！*/}:root{  --lyx-theme:#49b1f5 /*我的主题色*/}/* 顶栏常驻 */.nav-fixed #nav{  transform: translateY(58px)!important;  -webkit-transform: translateY(58px)!important;  -moz-transform: translateY(58px)!important;  -ms-transform: translateY(58px)!important;  -o-transform: translateY(58px)!important;}#nav{  transition: none!important;  -webkit-transition: none!important;  -moz-transition: none!important;  -ms-transition: none!important;  -o-transition: none!important;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 子菜单定位 */.menus_items .menus_item .menus_item_child {  left: -100px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}@import "//at.alicdn.com/t/c/font_3962437_6snoplzeg9u.css";/* 动态图标 */svg.icon {  width: 4em;  height: 4em;  /* vertical-align: -0.15em; */  fill: currentColor;  overflow: hidden;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/right.css"/>
      <url>/css/right.css</url>
      
        <content type="html"><![CDATA[/* 右键菜单 */#rightMenu {    display: none;    position: fixed;    width: 160px;    height: fit-content;    top: 10%;    left: 10%;      /* 菜单面板背景色 */    background-color: var(--card-bg);      /* 菜单面板文字颜色 */    border: 1px solid var(--font-color);    border-radius: 8px;    z-index: 100;  }  #rightMenu .rightMenu-group {    padding: 7px 6px;  }  #rightMenu .rightMenu-group:not(:nth-last-child(1)) {    border-bottom: 1px solid var(--font-color);  }  #rightMenu .rightMenu-group.rightMenu-small {    display: flex;    justify-content: space-between;  }  #rightMenu .rightMenu-group .rightMenu-item {    height: 30px;    line-height: 30px;    border-radius: 8px;    transition: 0.3s;    color: var(--font-color);  }  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {    display: flex;    height: 40px;    line-height: 40px;    padding: 0 4px;  }  #rightMenu .rightMenu-group .rightMenu-item:hover {      /* 鼠标悬浮选项颜色 */    background-color: var(--text-bg-hover);  }  #rightMenu .rightMenu-group .rightMenu-item i {    display: inline-block;    text-align: center;    line-height: 30px;    width: 30px;    height: 30px;    padding: 0 5px;  }  #rightMenu .rightMenu-group .rightMenu-item span {    line-height: 30px;  }    #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {    height: 40px;    line-height: 40px;  }  .rightMenu-group.hide {    display: none;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/fps.css"/>
      <url>/css/fps.css</url>
      
        <content type="html"><![CDATA[/* 帧率检测 */#fps {    position: fixed;    /* 指定位置 */    left: 0;    bottom: 10px;    z-index: 1919810;  }  [data-theme="light"] #fps {    background-color: rgba(255, 255, 255, 0.85);    backdrop-filter: var(--backdrop-filter);    padding: 4px;    border-radius: 4px;  }  [data-theme="dark"] #fps {    background-color: rgba(0, 0, 0, 0.72);    backdrop-filter: var(--backdrop-filter);    padding: 4px;    border-radius: 4px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/set_font.css"/>
      <url>/css/set_font.css</url>
      
        <content type="html"><![CDATA[@font-face {  /* 为载入的字体取名字(随意) */  font-family: "WenKai-R";  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/LXGWWenKaiGBScreen.woff);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}@font-face {  /* 为载入的字体取名字(随意) */  font-family: "JetBrains Mono-R";  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/JetBrainsMonoNL-Regular.woff);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}body {  font-family: "JetBrains Mono-R", "WenKai-R";  font-size: 16px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("/font/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/yemian.css"/>
      <url>/css/yemian.css</url>
      
        <content type="html"><![CDATA[/* 文章图片增加边框 */#post img[class^="entered"][class$="loaded"] {  display: block;  border: 1px solid #ddd;  padding: 1px;  background: #fff;}:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(197, 231, 246);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 10px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 15px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 波浪css */.main-hero-waves-area {  width: 100%;  position: absolute;  left: 0;  bottom: -11px;  z-index: 5;}.waves-area .waves-svg {  width: 100%;  height: 5rem;}/* Animation */.parallax > use {  animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #f7f9febd;}.parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #f7f9fe82;}.parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #f7f9fe36;}.parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #18171dc8;}[data-theme="dark"] .parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #18171d80;}[data-theme="dark"] .parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #18171d3e;}[data-theme="dark"] .parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #18171d;}@keyframes move-forever {  0% {    transform: translate3d(-90px, 0, 0);  }  100% {    transform: translate3d(85px, 0, 0);  }}/*Shrinking for mobile*/@media (max-width: 768px) {  .waves-area .waves-svg {    height: 40px;    min-height: 40px;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/icon.css"/>
      <url>/css/icon.css</url>
      
        <content type="html"><![CDATA[@font-face {  font-family: "iconfont"; /* Project id 3962437 */  /* Color fonts */  src:        url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAABD0AAwAAAAAIfQAABCgAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoMeI4FSBmAAgSQKs3ilfgE2AiQDgmQLgToABCAFgXwHIBtrGaOQjpJWOGR/kWDbAMse2CueVAtuPW+qI37Ofp4E8pKQvIhheXgEiSCeEFQT2sJv0yBeASqa1LmDOrSFtv8qp1Bzria0OZWKpT3nTDcA7s35NhNYkFq2XQI63Nd28j83XGRfpKt0NQR2OeESgOFtAJYT9dRcabN/9wXMFYAUkGVjWai63eMN3PHMJSlRnngfIV8iSeQAVfKESQHAAfoKVVtVX/YzeeHGLho1tYijiuPm+Lw7BAAJAB9gbR4O4EsokuTgLF5K+tCYr3AqsKX06FQQzlER3FCSF+njF43zY0EK4gk6KSaFqbgoHRax2SLJskhzSBlfzlIIUGL/AAfonIH6IE7wTjBDgm8INx8qDNOG0xExkQUyKlat0ABoZZ0+GkJMUKWgjxOg1zaojDyTOF7LCZJE0k6KS6ZSBKkAaa8uPSojJDPYHGEhsnRWMhvPUeZieRrnQy7ACkEWaYp9SvDqSwPLROVhFexKvyp5tawm0hZgB6jlTpFOVdrTouvCAQyYst+cJgFaRf8sAdR2HdDOWgwJjRra06dCd/cx6PER6rZ9Qr9nJAq93aJGpzwatLJCi97vikbXXo9BeiRDzcMmhDDFnZh09PlO+te1WVOvyUWPNhUN+1ApvhDkdlai/25MQX/dmob+/m0AoQ/3o8DA0+japTfRD++fR1/dvo7Cgm4itONdVLH2YyTN/hQxzAP029fP0Tdff4USdvyMTNtoqelFhNiXEAIPQvVPEZjm6C6AJHnYJmABiY/gzQBQKpeCNYMJMwHtjdGZt1NWXpYLl4B5dpJwIzcA4QY3AGAAADjgbwEAA0oCIB5plqgZLwESNokMkPKMXsJLeflekVfhjfBavdXe6d4+71nvv88anp1EqHYg28s1Zc237inRQyVS/q38S/m78ielV3lHOa48qnxBOVUpUxxVOA6mbIatp/rPAMALAL6dAJwQ5eVNdwcWANyJ6lhFHocS3oFnVRfyKCJKWKW9cyH/yj4Tq70sHAggcPNKKIok2aSYxyNJDof0D8kIEIl8lGyxxETzBXypRBIgIZXI49GJTy2BOzmcjubz9SyS9BE4mbJ2DM0xQoJP0HpaqZLFo7X8WWihkEer1QKfhAzm4SkVbD5vycLKvbZ41NfFATeX249hfOxX7gIuxudfaFF/QC1tG+Yu4QcLl/S/ByTNWvHBSlHKnn2i8ssLtHhEZQDMJyK0JMQYGScwzuk0oJhBAoZETogARsenr6wUGxsvGbZWRb6n1IuCZYVHwKbaWirlEqEMljy14AB89cTuMNiVsTbEmP2I3xG5dXfm78ucjkpenmsDsmkxtuqZ2aBUDv9SdnxJ/zU7HnqeIt6U1ore9D+3399YX2qQVHexS1D0tRaND8fcmlWZGnsH5buLx4nFzcsz4u6U2oOSVn84FcrTLm26taY3Hf9c3s0oheFUrqnpNJP3gm2Jk1GURr8Rhim3qdh16C5PtStqEJy/6W9MPoh2WK0HS5yG6jhKrQJ2Wbnrb83IyNDIQ5oInwYWiAdRHuVm3ydjxpujiI4tYHtU20MAh1L5BPH4sSuiRwcbSDIIOqQSYXhSenUBYTdtNiWneFzb7QrFZuoup7RxnDvUT82m1D1Xc+vKQyJ2H/LFymonyO3TmlEZ9G4b+0Pc3m1HFpCgARQmIE1S+BKZSJFCwJTqFKg/OfoT/flggibPcm0nYzR+FggQJACm0/FYvWHaiKI5D9EkGaZx0i8EEgv7mA2vwZ3YtkJsIpraABFd5D1K5aXd2D/otc6w19pzL/2pLnUM1cUPUzjLnnXAU7Lyxs5MYBcm6f0q4s3X3fgV/Lm96bXw1qpOsKK24vb7zyH+u+f6Bq9xb1tkls8+AqYczp8LnyOf4agP7jTw2uDQ2U7KHvIuIdG/K9oQ2yunpL3p1cVNxbCnVQbljJqWchfWp5ZV0zl8LQId2rHYHrnffJN+C6x4MR+LshI4BhPRKux0mN0vltGDQPGoBCACkZ9PuWLhVz9M9YnT/WBzBDmbUb60qPFgRnSRxPsh2VVzxlMfkAXmtyCI0qZzRmQP+Un1KSEX+n6qOb26ZMqF1r4X7fBuWZyMEYDsbq2CtrlRCiQuvgJ8o1T++Dmo78RvUWnm/GKIdsFV8E+UbCzPJvdnivTPXMt7zlYduuZgwrrjORzvjybcJcFifRWSd43tMjTjW0WX7K23p/YxQPYxiqEop5S6GLuQK+SLB2t8elcsbbNlHWldwbhaQ8ZcvP+Y9EDs2DEbH4MxkkH/era3BAHEXvYUYTh7ULSvLzf24aiadcx5M12wuKChY5AvaS3KNKCfLawvzjYxg4m/iRV0rrWI6gtaWNefLdwr8iWWtzWHGimVPiaBg+n3ce5O4C812n64/DPSzKMg2pN+EoW7H4f+TiMnObL/v83dMFrRmHXeOzba/NAPdhHKia44eq/3q2nuqZfVSnol5+UMr/osoPcprmDn09pwRk7JeT1M8sXNhXvtNiTYImc0l9hbhVuTSFfLAtdRQ0fNONlkJmHyFyoA7DoHLgRGMP/Z+awL4ewQN0rdDpHvedKvlAa/zx5FffebnQ7o/X9MKR38v6TynnTDpm1ucoNLfxVBmliV8NgIeVtd4XMhSMevJTdQYCHcFhIgcd/XH3wAadVMQrWl6EgaTrvqn0wkQOrx8ISG8uWOjGpI3Y8pzKvKzNkbt//sNv/S+BMlXY2KDUuCzAZ3+jWAdKIumTgBmVdXZzSS8DQCq+BwIihORSpUcKgIDqcCnqgNyYZUzgqmdy2S7uhOXvi/OqWQ5PD/9lceGLP56h2aTl6neli9PWrGr1FRv5YvAcXP/LisrDjEgOH9ZNqwqXEyNPnvZOAPUcCzPcv0wOtIdUJ5jqXKAlFfXb5sCj8XnDasUo0XiAL3uHyWw2nB58LDrlw+c+auWHwXJgp1uvHxaN1C7jPNDnUre9QX2M+pHezfKfAdZbdodmiecYF/fH58StTE2Zpb7funlo+qhCCkbxvfmJ1P7w/A2ezH84f6XVBQJXoHz437KRebTr+hgkh+AkmUdITsGegJfxPhkt9FIAo1M8zcTQvWnxGJGvyHh4bdG0Ss7d/6LwsOtgdD3SXDvqbUiuiJ7C1b9rB4lcSrPS6A4826iti/updruz8NqMSG1kAOM6+jOKkjHHDfPNOG1vz44/kJG9rzEqZlnVzDr90ScqwyaTj8N5zfGz6r6t4rkHYkpLVY2KrqLE7tBKNovX9igKP6RM8fLcLuyw5h96MKyNV+try/v/xsezsu1N9/trzdNd6ZDNx7nC1xMSUlMXHzuHe5znijzWaMd/4x5gWh8qgmud9zJ6WbH8d9lLtzLCrwq7swf+GC/KIiBbFXYZGtDZbsYo9T8dQ4m0qyfkqwm2uEthybJmy0PdsOw3tK/dS5OSSUvoxdpyrL7KomG5bnMme68rCmGtq+LI8BJC1emex0Jq8sLobP6VwrFbtqRaPWXkNtraHXaiVfbS0pWak5SMXdDiayij6VUNRvcQSaDx70TV0Tlk2FM4wjhKwKqo3m2K7q6q5Ys1lBgVbJ7GrBRQR7AMwqZo9nKpd7jxteoqPQfcbs7ZqxTAbxwFgYNvhgzwM3WBx7HO4ZyHHJ4broeOC4f38v/C5z+lHB+PB38O4mQvDEMKOkqooT6ksfnr53JEbyg0T6vaSEGzUvfFH49qWXHEvP3DzdDwwxveFA0cqVRQcaGggKtEoNLuEMaT9bNjBQdmMhQ4FWqd09GHDfA078HtBQGbUxJ1LL3YxnJxSUB2+9q+mgNifE7HnCsvalT7wC+0n/FAx6jUFW0YMYG/5zcnB+Eq8/zDm7cmBKneJ/0nnwLH0kw9d3M1ebE7kxSj6vsqIAOaAKTnVYDd322h59lpVT22v13VarHj2sWdqGbvi7cYyQ50fzzk9ED8Wj/VjTi/z6cvPuWPQEOZ6Xd7fbCXuVku7uu1YeJwmLvthUHzD+tkHznDnmrTabeVDWDJptbmDQ1hMMsxYmLHfMWJ5YUMBQoPUXFri6HcsTCvLc8dg4QVr0d4aHMiAZLDZXe6Bqg3jsEnQM1XzdAWo6hggfHTjoapjiILi0dohclLhNUih6kcPVcfilc3RcMNPqTz9FcYIdQ4bdglxNjta+Sr5TXiYrbe/dlFmBV+L9hY6lwjKRTVadg0+QkFstqRTsy93c010aenW6OA4r2ahfXK+zTgt3WWFGybHC7Ofb0/aydhqz4s+e/V4m/R6vClrkxkl5ZLpFPYJbI0rkalXo+E+fbJuO9T0XgfHYmFYHOi3o4o06yKiypjFrVcQ1OmbOhTBh2BivBeNRT4d/rwob0FLaRSIh0yJ7oY2ywhQ/08seP6YF1Bi1CZaoX5/2GrwhrVQX0D8/7lISdGHhVN4fJeTrwGT7ssfZKhaAGpP0Y1Q/+xyV5spp1Cj1mXUB1dnQnTrXY5RSmt1VDfR58Yvq6heZ8nJ5Q329aZFwJs1j40cEs+HF+889kiEDLADDII6D4K3nD94Ugchz8eJ4ojd5bv+c6Eu3tm27eRnsmknDpFAvBAOMXjKkbQrONL2Vl9Pbm5NHC4TNifOr3tv68rUWSHTxCu09rqziFvPsuOrquNnmEXPkq67O6De3FLuy7D28wrY3U3Iqo2JbkuuTkuqTR5IBf7WTW+Iqo1Jyx64bpXelIdeS7KfZkzUPm9/qhky8rIaXNTTJrBUNw/DPyuL0OmqgQwlFaYoLR6EuvTiXqoMaqCtJgxqoehhITZVu6fCfw9hGD6X07wD9u6eVJcV1JUpFSV1xCRhdKYn19YkpKXx0Yn3K+iXDzaQ7nu/LJWWib74Qlssq7nk835XJyul7C6QtCyQLprTJ2wP77nj6gloVrX1TIrk9qM/jKXXPD5nWVktTVib8/tFg70vsVU7DR7u7Oic+btB/vL5rq2yQ6nEaPt7V1VVYveHjga5B2RDVTWxVBcsHu3bdyPgmuiTHx05DD3tIvjVF2te5u9KtR2RQPqgRpI9udfkZ6gE0hT1z/dJfNPT7yszM+RuWPkmhpGUTWfe09W0h+q8N+rMM//dpzS/rl84vy1RSc3Nr3m/T1LfBL3SsxRIbw0hwDL421tYLbvq79tuv7f648S/+uqrIyMTorNRiv1Wzvj547vP5iwUn0iwx8TNXZ6xmqsVDdYvWVO2npw3KNUmaJwv4pRWre+usgtZgdcrxo5DR9JVm4EZ9DzU37dnXOX9tpOilof7yQsd9yiF2ppXvfXnWaub1rWpNouYJGA7TtdGBV3fPEKT/yibIsmMeXpevkhzITbYTawG+Kjk62L/53TLpAUCIPPCNLcrOkQwWS9Vkm+VTi2DbXg6yHqT3t5EY0HnJaosHRrA/gAXLwD/m+RZ3wzb64ZKwFbuRAC7vytKGCbjcXYaIELYR9Zsfm4lKlYcRxpjulMWPM2Te0x3clZ8cJp6sAo3gNL/idPi1PlambBgTP3aJWMvp0BimDWEf6f2AzqJ6AYBwK08Oj3+Cd+TUp/TAbdJD+LWCmUAL97G3wQIyyLzgifUwB3xuY7GmPR8oAwIwkgIMaAAr4MCf2jGRgEQInkgCAzUTWeAPva35AAMboA0aYDbMgua49V6ogiZogXnQCTOhGwzf9K2BnAZlUM44Ny3WXylmWmzdwhhsd2K7oQfaUJnZQZkGDRJgVoWOgwkAAAA=') format('woff2'),       url('//at.alicdn.com/t/c/font_3962437_6snoplzeg9u.woff?t=1704945411802') format('woff'),       url('//at.alicdn.com/t/c/font_3962437_6snoplzeg9u.ttf?t=1704945411802') format('truetype');}.iconfont {  font-family: "iconfont" !important;  font-size: 30px;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.icon-caozuojiemiantubiao---_jingxiang:before {  content: "\e65e";}.icon-auth:before {  content: "\e612";}.icon-gitee:before {  content: "\e60c";}.icon-huoche:before {  content: "\e603";}.icon-yuedu:before {  content: "\e763";}.icon-Search:before {  content: "\e642";}.icon-shujutongji:before {  content: "\e60e";}.icon-lishi:before {  content: "\e625";}.icon-home:before {  content: "\e641";}.icon-biaoqian:before {  content: "\e687";}.icon-iconzhengli-:before {  content: "\e60d";}.icon-lianjie:before {  content: "\e6fd";}.icon-icon-shishi:before {  content: "\e688";}.icon-shouye:before {  content: "\e608";}.icon-guidang:before {  content: "\e6b9";}.icon-wenzhangliebiao:before {  content: "\e653";}.icon-gmail:before {  content: "\e60b";}.icon-RSS:before {  content: "\e7b5";}.icon-bilibili:before {  content: "\e609";}.icon-github:before {  content: "\e618";}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/weather.css"/>
      <url>/css/weather.css</url>
      
        <content type="html"><![CDATA[#tp-weather-widget {    margin-bottom: 10px;    margin-right: 20px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/kuanping.css"/>
      <url>/css/kuanping.css</url>
      
        <content type="html"><![CDATA[/* 全局宽度 */.layout {    max-width: 1300px;  }    /* 侧边卡片栏宽度 */  .aside-content {    max-width: 340px;    min-width: 300px;  }    /* 平板尺寸自适应(不启用侧边栏宽度限制) */  @media screen and (max-width: 900px) {    .aside-content {      max-width: none !important;      padding: 0 5px 0 5px;    }  }/* 友链一行显示更多 */.site-card {  width: calc(100% / 5 - 16px) !important;  border-radius: 18px !important;}.site-card .img {  height: 165px !important;  border-radius: 18px !important;}/* 适应宽度不同的设备 */@media screen and (max-width: 1200px) {  .site-card {    width: calc(100% / 4 - 16px) !important;  }}@media screen and (max-width: 900px) {  .site-card {    width: calc(100% / 3 - 16px) !important;  }}@media screen and (max-width: 600px) {  .site-card {    width: calc(100% / 2 - 16px) !important;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/swiperstyle.css"/>
      <url>/css/swiperstyle.css</url>
      
        <content type="html"><![CDATA[* {    -webkit-box-sizing:border-box;    -moz-box-sizing:border-box;    box-sizing:border-box}div#swiper_container {    background:rgba(255, 255, 255, 0)}.blog-slider {    width:100%;    position:relative;    border-radius:12px 8px 8px 12px;    margin:auto;    background:var(--global-bg);    padding:10px;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__item {    display:-webkit-box;    display:-moz-box;    display:-webkit-flex;    display:-ms-flexbox;    display:box;    display:flex;    -webkit-box-align:center;    -moz-box-align:center;    -o-box-align:center;    -ms-flex-align:center;    -webkit-align-items:center;    align-items:center}.blog-slider__item.swiper-slide-active .blog-slider__img img {    opacity:1;    -ms-filter:none;    filter:none;    -webkit-transition-delay:.3s;    -moz-transition-delay:.3s;    -o-transition-delay:.3s;    -ms-transition-delay:.3s;    transition-delay:.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>* {    opacity:1;    -ms-filter:none;    filter:none;    -webkit-transform:none;    -moz-transform:none;    -o-transform:none;    -ms-transform:none;    transform:none}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(1) {    -webkit-transition-delay:.3s;    -moz-transition-delay:.3s;    -o-transition-delay:.3s;    -ms-transition-delay:.3s;    transition-delay:.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(2) {    -webkit-transition-delay:.4s;    -moz-transition-delay:.4s;    -o-transition-delay:.4s;    -ms-transition-delay:.4s;    transition-delay:.4s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(3) {    -webkit-transition-delay:.5s;    -moz-transition-delay:.5s;    -o-transition-delay:.5s;    -ms-transition-delay:.5s;    transition-delay:.5s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(4) {    -webkit-transition-delay:.6s;    -moz-transition-delay:.6s;    -o-transition-delay:.6s;    -ms-transition-delay:.6s;    transition-delay:.6s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(5) {    -webkit-transition-delay:.7s;    -moz-transition-delay:.7s;    -o-transition-delay:.7s;    -ms-transition-delay:.7s;    transition-delay:.7s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(6) {    -webkit-transition-delay:.8s;    -moz-transition-delay:.8s;    -o-transition-delay:.8s;    -ms-transition-delay:.8s;    transition-delay:.8s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(7) {    -webkit-transition-delay:.9s;    -moz-transition-delay:.9s;    -o-transition-delay:.9s;    -ms-transition-delay:.9s;    transition-delay:.9s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(8) {    -webkit-transition-delay:1s;    -moz-transition-delay:1s;    -o-transition-delay:1s;    -ms-transition-delay:1s;    transition-delay:1s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(9) {    -webkit-transition-delay:1.1s;    -moz-transition-delay:1.1s;    -o-transition-delay:1.1s;    -ms-transition-delay:1.1s;    transition-delay:1.1s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(10) {    -webkit-transition-delay:1.2s;    -moz-transition-delay:1.2s;    -o-transition-delay:1.2s;    -ms-transition-delay:1.2s;    transition-delay:1.2s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(11) {    -webkit-transition-delay:1.3s;    -moz-transition-delay:1.3s;    -o-transition-delay:1.3s;    -ms-transition-delay:1.3s;    transition-delay:1.3s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(12) {    -webkit-transition-delay:1.4s;    -moz-transition-delay:1.4s;    -o-transition-delay:1.4s;    -ms-transition-delay:1.4s;    transition-delay:1.4s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(13) {    -webkit-transition-delay:1.5s;    -moz-transition-delay:1.5s;    -o-transition-delay:1.5s;    -ms-transition-delay:1.5s;    transition-delay:1.5s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(14) {    -webkit-transition-delay:1.6s;    -moz-transition-delay:1.6s;    -o-transition-delay:1.6s;    -ms-transition-delay:1.6s;    transition-delay:1.6s}.blog-slider__item.swiper-slide-active .blog-slider__content>:nth-child(15) {    -webkit-transition-delay:1.7s;    -moz-transition-delay:1.7s;    -o-transition-delay:1.7s;    -ms-transition-delay:1.7s;    transition-delay:1.7s}.blog-slider__img {    width:300px;    -webkit-flex-shrink:0;    flex-shrink:0;    height:200px;    padding:10px;    border-radius:5px;    -webkit-transform:translateX(0);    -moz-transform:translateX(0);    -o-transform:translateX(0);    -ms-transform:translateX(0);    transform:translateX(0);    overflow:hidden}.blog-slider__img:after {    content:'';    position:absolute;    top:0;    left:0;    width:100%;    height:100%;    border-radius:5px;    opacity:.8}.blog-slider__img img {    width:100%;    height:100%;    object-fit:cover;    display:block;    opacity:0;    border-radius:5px;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__content {    padding-right:50px;    padding-left:50px}.blog-slider__content>* {    opacity:0;    -webkit-transform:translateY(25px);    -moz-transform:translateY(25px);    -o-transform:translateY(25px);    -ms-transform:translateY(25px);    transform:translateY(25px);    -webkit-transition:all .4s;    -moz-transition:all .4s;    -o-transition:all .4s;    -ms-transition:all .4s;    transition:all .4s}.blog-slider__code {    color:var(--font-color);    margin-bottom:0;    display:block;    font-weight:500}.blog-slider__title {    font-size:18px;    font-weight:700;    color:var(--font-color);    margin-bottom:15px;    -webkit-line-clamp:1;    display:-webkit-box;    overflow:hidden;    -webkit-box-orient:vertical}.blog-slider__text {    color:var(--font-color);    -webkit-line-clamp:1;    display:-webkit-box;    overflow:hidden;    -webkit-box-orient:vertical;    margin-bottom:15px;    line-height:1.5em;    width:100%;    display:block;    word-break:break-all;    word-wrap:break-word}.blog-slider__button {    display:-webkit-inline-box;    display:-moz-inline-box;    display:-webkit-inline-flex;    display:-ms-inline-flexbox;    display:inline-box;    display:inline-flex;    background-color:var(--btn-bg);    padding:4px 14px;    border-radius:8px;    color:var(--btn-color);    text-decoration:none;    font-weight:500;    -webkit-box-pack:center;    -moz-box-pack:center;    -o-box-pack:center;    -ms-flex-pack:center;    -webkit-justify-content:center;    justify-content:center;    text-align:center;    letter-spacing:1px;    display:none}.blog-slider__button:hover {    background-color:var(--btn-hover-color);    color:var(--btn-color)}.blog-slider .swiper-container-horizontal>.swiper-pagination-bullets, .blog-slider .swiper-pagination-custom, .blog-slider .swiper-pagination-fraction {    bottom:10px;    left:0;    width:100%}.blog-slider__pagination {    position:absolute;    z-index:21;    right:20px;    width:11px!important;    text-align:center;    left:auto!important;    top:50%;    bottom:auto!important;    -webkit-transform:translateY(-50%);    -moz-transform:translateY(-50%);    -o-transform:translateY(-50%);    -ms-transform:translateY(-50%);    transform:translateY(-50%)}.blog-slider__pagination.swiper-pagination-bullets .swiper-pagination-bullet {    margin:8px 0}.blog-slider__pagination .swiper-pagination-bullet {    width:11px;    height:11px;    display:block;    border-radius:10px;    background:#858585;    opacity:.2;    -webkit-transition:all .3s;    -moz-transition:all .3s;    -o-transition:all .3s;    -ms-transition:all .3s;    transition:all .3s}.blog-slider__pagination .swiper-pagination-bullet-active {    opacity:1;    -ms-filter:none;    filter:none;    background:var(--btn-bg);    height:30px}@media screen and (max-width:600px) {    .blog-slider__pagination {        -webkit-transform:translateX(-50%);        -moz-transform:translateX(-50%);        -o-transform:translateX(-50%);        -ms-transform:translateX(-50%);        transform:translateX(-50%);        left:50%!important;        top:320px;        width:100%!important;        display:-webkit-box;        display:-moz-box;        display:-webkit-flex;        display:-ms-flexbox;        display:box;        display:flex;        -webkit-box-pack:center;        -moz-box-pack:center;        -o-box-pack:center;        -ms-flex-pack:center;        -webkit-justify-content:center;        justify-content:center;        -webkit-box-align:center;        -moz-box-align:center;        -o-box-align:center;        -ms-flex-align:center;        -webkit-align-items:center;        align-items:center    }    .blog-slider__pagination.swiper-pagination-bullets .swiper-pagination-bullet {        margin:0 5px    }    .blog-slider__pagination .swiper-pagination-bullet-active {        height:11px;        width:30px    }    .blog-slider__button {        display:-webkit-inline-box;        display:-moz-inline-box;        display:-webkit-inline-flex;        display:-ms-inline-flexbox;        display:inline-box;        display:inline-flex;        width:100%    }    .blog-slider__text {        margin-bottom:40px    }    .blog-slider {        min-height:350px;        height:auto;        margin-top:110px;        margin-bottom:10px    }    .blog-slider__content {        margin-top:-80px;        text-align:center;        padding:0 30px    }    .blog-slider__item {        -webkit-box-orient:vertical;        -moz-box-orient:vertical;        -o-box-orient:vertical;        -webkit-flex-direction:column;        -ms-flex-direction:column;        flex-direction:column    }    .blog-slider__img {        -webkit-transform:translateY(-50%);        -moz-transform:translateY(-50%);        -o-transform:translateY(-50%);        -ms-transform:translateY(-50%);        transform:translateY(-50%);        width:90%    }    .blog-slider__content {        padding-left:10px;        padding-right:10px    }    .blog-slider__pagination.swiper-pagination-clickable.swiper-pagination-bullets {        top:110px    }}@media screen and (min-width:600px) {    .blog-slider {        height:200px    }    .blog-slider__img {        height:200px    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/random_post.js"/>
      <url>/js/random_post.js</url>
      
        <content type="html"><![CDATA[// 发现有时会和当前页面重复，加一个判断function randomPost() {fetch("/baidusitemap.xml").then((res) => res.text()).then((str) => new window.DOMParser().parseFromString(str, "text/xml")).then((data) => {let ls = data.querySelectorAll("url loc");// 将ls中所有的链接的开头换为https://hexo.gcnanmu3125.xyz/const newUrl = "https://hexo.gcnanmu3125.xyz/";for (let i = 0; i < ls.length; i++) {let str = ls[i].innerHTML;const urlSplit = str.split("/");// console.log(urlSplit); // [ 'https:', '', 'ldm0715.github.io', 'post', 'javascript-mo-kuai-hua-kuai-su;// console.log(urlSplit.slice(3, -1)); // [ 'https:', '', 'ldm0715.github.io', 'post', 'javascript-mo-kuai-hua-kuai-su-rulet url = newUrl + urlSplit.slice(3, -1).join("/");// console.log(url); // https://hexo.gcnanmu3125.xyz/ldm0715.github.io/post/javascript-mo-kuai-hua-kuai-suls[i].innerHTML = url;}while (true) {let url = ls[Math.floor(Math.random() * ls.length)].innerHTML;if (location.href == url) continue;location.href = url;return;}});}// 阅读文章时看了一遍写的代码，发现加个数组和一个遍历完全没必要，改成下面这个即可。// function randomPost() {//     fetch('/baidusitemap.xml').then(res => res.text()).then(str => (new window.DOMParser()).parseFromString(str, "text/xml")).then(data => {//         let ls = data.querySelectorAll('url loc');//         location.href = ls[Math.floor(Math.random() * ls.length)].innerHTML//     })// }// 旧代码// function randomPost() {// fetch('/baidusitemap.xml').then(res => res.text()).then(str => (new window.DOMParser()).parseFromString(str, "text/xml")).then(data => {//     let ls = data.querySelectorAll('url loc');//     let list = [];//     ls.forEach(i => list.push(i.innerHTML))//     location.href = list[Math.floor(Math.random() * ls.length)]// })// }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/vue.js"/>
      <url>/js/vue.js</url>
      
        <content type="html"><![CDATA[// 防抖全局计时器let TT = null;    //time用来控制事件的触发// 防抖函数:fn->逻辑 time->防抖时间function debounce(fn, time) {    if (TT !== null) clearTimeout(TT);    TT = setTimeout(fn, time);}// 复制提醒document.addEventListener("copy", function () {    debounce(function () {        new Vue({            data: function () {                this.$notify({                    title: "哎嘿！复制成功🍬",                    message: "若要转载最好保留原文链接哦，给你一个大大的赞！",                    position: 'top-left',                    offset: 50,                    showClose: true,                    type: "success",                    duration: 5000                });            }        })    }, 300);})//F12提醒document.addEventListener("keydown", function () {    if (event.key === "F12" || event.keyCode === 123) {        debounce(function () {            new Vue({                data: function () {                    this.$notify({                        title: "你已被发现😜",                        message: "小伙子，扒源记住要遵循GPL协议！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "warning",                        duration: 5000                    });                }            })        }, 300);      }})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-02-21 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/小站-休息了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (  window.localStorage.getItem("fpson") == undefined ||  window.localStorage.getItem("fpson") == "1") {  var rAF = (function () {    return (      window.requestAnimationFrame ||      window.webkitRequestAnimationFrame ||      function (callback) {        window.setTimeout(callback, 1000 / 60);      }    );  })();  var frame = 0;  var allFrameCount = 0;  var lastTime = Date.now();  var lastFameTime = Date.now();  var loop = function () {    var now = Date.now();    var fs = now - lastFameTime;    var fps = Math.round(1000 / fs);    lastFameTime = now;    // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS    allFrameCount++;    frame++;    if (now > 1000 + lastTime) {      var fps = Math.round((frame * 1000) / (now - lastTime));      if (fps <= 5) {        var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`;      } else if (fps <= 15) {        var kd = `<span style="color:red">电竞级帧率😖</span>`;      } else if (fps <= 25) {        var kd = `<span style="color:orange">有点难受😨</span>`;      } else if (fps < 35) {        var kd = `<span style="color:#9338e6">不太流畅🙄</span>`;      } else if (fps <= 45) {        var kd = `<span style="color:#08b7e4">还不错哦😁</span>`;      } else {        var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`;      }      // document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;      document.getElementById("fps").innerHTML = `FPS:${fps}`;      frame = 0;      lastTime = now;    }    rAF(loop);  };  loop();} else {  document.getElementById("fps").style = "display:none!important";}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/nav.js"/>
      <url>/js/nav.js</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/welcome.js"/>
      <url>/js/welcome.js</url>
      
        <content type="html"><![CDATA[document.addEventListener('pjax:complete', todis);document.addEventListener('DOMContentLoaded', todis);function todis(){$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: 'T3EBZ-TJ7LI-YRBG2-5ZLUR-KD3OS-U6BJO',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;        function getDistance(e1, n1, e2, n2) {            const R = 6371            const { sin, cos, asin, PI, hypot } = Math                    let getPoint = (e, n) => {                e *= PI / 180                n *= PI / 180                return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }            }                    let a = getPoint(e1, n1)            let b = getPoint(e2, n2)            let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)            let r = asin(c / 2) * 2 * R            return Math.round(r);        }                function showWelcome() {                    let dist = getDistance(120.351896, 30.314085, ipLoacation.result.location.lng, ipLoacation.result.location.lat);                    let pos = ipLoacation.result.ad_info.nation;            let posdesc;            switch (ipLoacation.result.ad_info.nation) {                case "日本":                    posdesc = "よろしく，一起去看樱花吗";                    break;                case "美国":                    posdesc = "Make America Great Again!";                    break;                case "英国":                    posdesc = "想同你一起夜乘伦敦眼";                    break;                case "俄罗斯":                    posdesc = "干了这瓶伏特加！";                    break;                case "法国":                    posdesc = "C'est La Vie";                    break;                case "德国":                    posdesc = "Die Zeit verging im Fluge.";                    break;                case "澳大利亚":                    posdesc = "一起去大堡礁吧！";                    break;                case "加拿大":                    posdesc = "拾起一片枫叶赠予你";                    break;                case "中国":                    pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city;                    switch (ipLoacation.result.ad_info.province) {                        case "北京市":                            posdesc = "北——京——欢迎你~~~";                            break;                        case "天津市":                            posdesc = "讲段相声吧。";                            break;                        case "重庆市":                            posdesc = "老乡！！！"                            break;                        case "河北省":                            posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                            break;                        case "山西省":                            posdesc = "展开坐具长三尺，已占山河五百余。";                            break;                        case "内蒙古自治区":                            posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                            break;                        case "辽宁省":                            posdesc = "我想吃烤鸡架！";                            break;                        case "吉林省":                            posdesc = "状元阁就是东北烧烤之王。";                            break;                        case "黑龙江省":                            posdesc = "很喜欢哈尔滨大剧院。";                            break;                        case "上海市":                            posdesc = "众所周知，中国只有两个城市。";                            break;                        case "江苏省":                            switch (ipLoacation.result.ad_info.city) {                                case "南京市":                                    posdesc = "欢迎来自安徽省南京市的小伙伴。";                                    break;                                case "苏州市":                                    posdesc = "上有天堂，下有苏杭。";                                    break;                                default:                                    posdesc = "散装是必须要散装的。";                                    break;                            }                            break;                        case "浙江省":                            posdesc = "东风渐绿西湖柳，雁已还人未南归。";                            break;                        case "安徽省":                            posdesc = "蚌埠住了，芜湖起飞。";                            break;                        case "福建省":                            posdesc = "井邑白云间，岩城远带山。";                            break;                        case "江西省":                            posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                            break;                        case "山东省":                            posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                            break;                        case "湖北省":                            posdesc = "来碗热干面！";                            break;                        case "湖南省":                            posdesc = "74751，长沙斯塔克。";                            break;                        case "广东省":                            posdesc = "老板来两斤福建人。";                            break;                        case "广西壮族自治区":                            posdesc = "桂林山水甲天下。";                            break;                        case "海南省":                            posdesc = "朝观日出逐白浪，夕看云起收霞光。";                            break;                        case "四川省":                            posdesc = "康康川妹子。";                            break;                        case "贵州省":                            posdesc = "茅台，学生，再塞200。";                            break;                        case "云南省":                            posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                            break;                        case "西藏自治区":                            posdesc = "躺在茫茫草原上，仰望蓝天。";                            break;                        case "陕西省":                            posdesc = "来份臊子面加馍。";                            break;                        case "甘肃省":                            posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                            break;                        case "青海省":                            posdesc = "牛肉干和老酸奶都好好吃。";                            break;                        case "宁夏回族自治区":                            posdesc = "大漠孤烟直，长河落日圆。";                            break;                        case "新疆维吾尔自治区":                            posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                            break;                        case "台湾省":                            posdesc = "我在这头，大陆在那头。";                            break;                        case "香港特别行政区":                            posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                            break;                        case "澳门特别行政区":                            posdesc = "性感荷官，在线发牌。";                            break;                        default:                            posdesc = "社会主义大法好。";                            break;                    }                    break;                default:                    posdesc = "带我去你的国家逛逛吧。";                    break;            }                    //判断时间            let timeChange;            let date = new Date();            if (date.getHours()>= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨";            else if (date.getHours()>= 1 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了";            else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";            else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，饮茶先啦！";            else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";            else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";            else timeChange = "夜深了，早点休息，少熬夜";                    document.getElementsByClassName("announcement_content")[0].innerHTML =                `欢迎来自<span>${pos}</span>的小伙伴，${timeChange}<br>        你距离gcnanmu约有<span>${dist}</span>公里，${posdesc}        <br>        `;        }        showWelcome()    }})    function switchPostChart () {    let color = document.documentElement.getAttribute('data-theme') === 'light' ? '#4C4948' : 'rgba(255,255,255,0.7)'    if (document.getElementById('posts-chart') && postsOption) {      try {        let postsOptionNew = postsOption        postsOptionNew.title.textStyle.color = color        postsOptionNew.xAxis.nameTextStyle.color = color        postsOptionNew.yAxis.nameTextStyle.color = color        postsOptionNew.xAxis.axisLabel.color = color        postsOptionNew.yAxis.axisLabel.color = color        postsOptionNew.xAxis.axisLine.lineStyle.color = color        postsOptionNew.yAxis.axisLine.lineStyle.color = color        postsOptionNew.series[0].markLine.data[0].label.color = color        postsChart.setOption(postsOptionNew)      } catch (error) {        console.log(error)      }    }    if (document.getElementById('tags-chart') && tagsOption) {      try {        let tagsOptionNew = tagsOption        tagsOptionNew.title.textStyle.color = color        tagsOptionNew.xAxis.nameTextStyle.color = color        tagsOptionNew.yAxis.nameTextStyle.color = color        tagsOptionNew.xAxis.axisLabel.color = color        tagsOptionNew.yAxis.axisLabel.color = color        tagsOptionNew.xAxis.axisLine.lineStyle.color = color        tagsOptionNew.yAxis.axisLine.lineStyle.color = color        tagsOptionNew.series[0].markLine.data[0].label.color = color        tagsChart.setOption(tagsOptionNew)      } catch (error) {        console.log(error)      }    }    if (document.getElementById('categories-chart') && categoriesOption) {      try {        let categoriesOptionNew = categoriesOption        categoriesOptionNew.title.textStyle.color = color        categoriesOptionNew.legend.textStyle.color = color        if (!categoryParentFlag) { categoriesOptionNew.series[0].label.color = color }        categoriesChart.setOption(categoriesOptionNew)      } catch (error) {        console.log(error)      }    }    }    document.querySelector(".rightMenu-item:has(.fa-moon)").addEventListener("click", function () { setTimeout(switchPostChart, 100) })    document.getElementById("con-mode").addEventListener("click", function () { setTimeout(switchPostChart, 100) })}    //]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">友链</div><div class="flink-desc">一些优秀的人</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://hexo.gcnanmu3125.xyz" title="gcnanmuの博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://docimg10.docs.qq.com/image/AgAAC6u-TVPtJ_LI7f5GYqFzs7WIvgcg.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="gcnanmuの博客" />              </div>              <div class="flink-item-name">gcnanmuの博客</div>               <div class="flink-item-desc" title="Hexo博客">Hexo博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zfe.space/" title="小冰博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://zfe.space/images/headimage.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="小冰博客" />              </div>              <div class="flink-item-name">小冰博客</div>               <div class="flink-item-desc" title="做个有梦想的人！">做个有梦想的人！</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://noionion.top/" title="贰猹の小窝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="贰猹の小窝" />              </div>              <div class="flink-item-name">贰猹の小窝</div>               <div class="flink-item-desc" title="用这生命的每一秒，给自己一个不后悔的未来">用这生命的每一秒，给自己一个不后悔的未来</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://forever97.top/" title="未央的童话镇" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="未央的童话镇" />              </div>              <div class="flink-item-name">未央的童话镇</div>               <div class="flink-item-desc" title="在人海里梦游">在人海里梦游</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.fomal.cn/" title="Fomalhaut🥝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Fomalhaut🥝" />              </div>              <div class="flink-item-name">Fomalhaut🥝</div>               <div class="flink-item-desc" title="优秀魔改博主">优秀魔改博主</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://anzhiyu-c-github-io.vercel.app/page/2/" title="安知鱼" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼" />              </div>              <div class="flink-item-name">安知鱼</div>               <div class="flink-item-desc" title="生活明朗，万物可爱。">生活明朗，万物可爱。</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://tzy1997.com/" title="唐志远の博客" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="唐志远の博客" />              </div>              <div class="flink-item-name">唐志远の博客</div>               <div class="flink-item-desc" title="2023年的理想开始实现了吗？">2023年的理想开始实现了吗？</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://guole.fun/" title="Guo Le" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Guo Le" />              </div>              <div class="flink-item-name">Guo Le</div>               <div class="flink-item-desc" title="null">null</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://butterfly.js.org/" title="Butterfly官方" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Butterfly官方" />              </div>              <div class="flink-item-name">Butterfly官方</div>               <div class="flink-item-desc" title="Butterfly主题官方博客">Butterfly主题官方博客</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://shields.io/" title="Github小卡片" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="http://www.w3.org/2000/svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Github小卡片" />              </div>              <div class="flink-item-name">Github小卡片</div>               <div class="flink-item-desc" title="生成有趣的卡片">生成有趣的卡片</div>            </a>          </div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/journals/index.html"/>
      <url>/journals/index.html</url>
      
        <content type="html"><![CDATA[<div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-08</p></div></div><div class='timeline-item-content'><ol><li>修改页面圆角</li><li>添加<code>萌备</code>和<code>Miit</code></li><li>添加<code>wormhole</code>标识</li><li>修改广告栏和fps显示</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-07</p></div></div><div class='timeline-item-content'><ol><li>更改部分样式适应封面、屏幕大小</li><li>添加心知天气组件</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-29</p></div></div><div class='timeline-item-content'><ol><li>添加镜像选项</li><li>添加<code>Written-By-Human-Not-By-AI</code>申明</li></ol></div></div></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-15</p></div></div><div class='timeline-item-content'><ol><li>将默认域名映射到当前域名。</li><li>添加宽屏适配。</li><li>申请加入”开往”项目。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-14</p></div></div><div class='timeline-item-content'><ol><li>适配<code>bilibili视频</code>。</li><li>为”归档”与”文章”页面添加图标展示。</li><li>添加”随机访问文章”功能。</li><li>添加右键菜单，可在右边”设置”中关闭。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-13</p></div></div><div class='timeline-item-content'><ol><li>增加<code>复制</code>与<code>F12</code>操作提示弹窗。</li><li>增加<code>fps</code>实时显示。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-12</p></div></div><div class='timeline-item-content'><ol><li>更新<code>Butterfly v4.7.0</code>到<code>Butterfly v4.9.0</code>。</li><li>更改文章字体为<code>霞鹜文楷</code>，更改代码字体为<code>JetBrainsMono</code>。</li><li>为文章内的所有图片添加边框。</li><li>优化主页<strong>最新文章</strong>的显示数目，去除<strong>归档栏</strong>，添加<strong>标签栏</strong>。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-30</p></div></div><div class='timeline-item-content'><p>Butterfly v4.7.0<code>Mermaid</code>渲染完全失效，需要等待官方修复。所以说推广不开不是没有道理的。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-28</p></div></div><div class='timeline-item-content'><p>更改了<code>github</code>仓库名，测试网页是否能够正常上传。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-25</p></div></div><div class='timeline-item-content'><p>试了试<code>HarmonyOS Sans</code>与<code>OPPO Sans</code>,感觉鸿蒙的字体更加圆润一点，现已将博客字体更换为<code>HarmonyOS Sans</code>。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-19</p></div></div><div class='timeline-item-content'><p>又一次把Hexo给搭回来了，好在在固态坏掉之前又搭建了Halo博客，所以文章的话还在，可以说是不幸中的万幸。而且有了第一次的经验，这一次搭建Hexo可以说相当快了，前前后后就花了3小时左右（包括文章的编写，CSS的设定），也不弄的太花哨了，还是以实用为主。发现我没什么博客封面啊，只能拿点老图凑合一下了。</p></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/weather.js"/>
      <url>/js/weather.js</url>
      
        <content type="html"><![CDATA[(function (a, h, g, f, e, d, c, b) {    b = function () {        d = h.createElement(g);        c = h.getElementsByTagName(g)[0];        d.src = e;        d.charset = "utf-8";        d.async = 1;        c.parentNode.insertBefore(d, c);    };    a["SeniverseWeatherWidgetObject"] = f;    a[f] ||        (a[f] = function () {            (a[f].q = a[f].q || []).push(arguments);        });    a[f].l = +new Date();    if (a.attachEvent) {        a.attachEvent("onload", b);    } else {        a.addEventListener("load", b, false);    }})(    window,    document,    "script",    "SeniverseWeatherWidget",    "//cdn.sencdn.com/widget2/static/js/bundle.js?t=" +        parseInt((new Date().getTime() / 100000000).toString(), 10));window.SeniverseWeatherWidget("show", {    flavor: "slim",    location: "WTMKQ069CCJ7",    geolocation: true,    language: "zh-Hans",    unit: "c",    theme: "light",    token: "10608fcb-08ba-4cef-8ba7-2ba2713c2f2f",    hover: "disabled",    container: "tp-weather-widget",});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/share.js"/>
      <url>/js/share.js</url>
      
        <content type="html"><![CDATA[// 分享本页function share_() {    let url = window.location.origin + window.location.pathname    try {        // 截取标题        var title = document.title;        var subTitle = title.endsWith("| Fomalhaut🥝") ? title.substring(0, title.length - 14) : title;        navigator.clipboard.writeText('gcnanmuの博客站内分享\n标题：' + subTitle + '\n链接：' + url + '\n欢迎来访！');        new Vue({            data: function () {                this.$notify({                    title: "成功复制分享信息🎉",                    message: "您现在可以通过粘贴直接跟小伙伴分享了！",                    position: 'top-left',                    offset: 50,                    showClose: true,                    type: "success",                     duration: 5000                });                // return { visible: false }            }        })    } catch (err) {        console.error('复制失败！', err);    }    // new ClipboardJS(".share", { text: function () { return '标题：' + document.title + '\n链接：' + url } });    // btf.snackbarShow("本页链接已复制到剪切板，快去分享吧~")}// 防抖function share() {    debounce(share_, 300);}]]></content>
      
    </entry>
    
    
  
</search>
